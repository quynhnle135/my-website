"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[315],{2091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var i=t(5893),l=t(1151);const o={title:"The __init__() method"},s="The _init_() method",r={id:"tech-blogs/oop/oop_in_python_03",title:"The __init__() method",description:"1. A class without \\init()",source:"@site/docs/tech-blogs/oop/oop_in_python_03.md",sourceDirName:"tech-blogs/oop",slug:"/tech-blogs/oop/oop_in_python_03",permalink:"/docs/tech-blogs/oop/oop_in_python_03",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"The __init__() method"},sidebar:"tutorialSidebar",previous:{title:"What's so special about self?",permalink:"/docs/tech-blogs/oop/oop_in_python_02"},next:{title:"Static methods",permalink:"/docs/tech-blogs/oop/oop_in_python_04"}},c={},h=[{value:"1. A class without _<em>init</em>_()",id:"1-a-class-without-_init_",level:2},{value:"2. A simple _<em>init</em>_() method",id:"2-a-simple-_init_-method",level:2},{value:"3. You can call it something else",id:"3-you-can-call-it-something-else",level:2},{value:"Conclusion:",id:"conclusion",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"the-_init_-method",children:["The _",(0,i.jsx)(n.em,{children:"init"}),"_() method"]}),"\n",(0,i.jsxs)(n.h2,{id:"1-a-class-without-_init_",children:["1. A class without _",(0,i.jsx)(n.em,{children:"init"}),"_()"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Let's consider if it's possible to have a functioning class without and ",(0,i.jsx)(n.code,{children:"__init__()"})," method"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Greeter:\n    def say_hello(self):\n        print("Hi!")\n\n\ngreeter = Greeter()\ngreeter.say_hello()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:">>> Hi!\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A class doesn't need an ",(0,i.jsx)(n.code,{children:"__init__()"})," method"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"2-a-simple-_init_-method",children:["2. A simple _",(0,i.jsx)(n.em,{children:"init"}),"_() method"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Let's take a look at a simple _",(0,i.jsx)(n.em,{children:"init"}),"_() method"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Greeter:\n    def __init__(self, tone: str = "casual"):\n        self.tone = tone\n\n    def say_hello(self):\n        if self.tone == "casual":\n            print("Hi.")\n        elif self.tone == "formal":\n            print("Hello.")\n\n\ngreeter = Greeter()\ngreeter.say_hello()\n\ngreeter.tone = "formal"\ngreeter.say_hello()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:">>> Hi.\n>>> Hello.\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["It looks like only one method, ",(0,i.jsx)(n.code,{children:"say_hello()"})," is being called. But when the first line here is execute, Python finds our _",(0,i.jsx)(n.em,{children:"init"}),"_() method and runs it."]}),"\n",(0,i.jsxs)(n.li,{children:["Most importantly, the value of ",(0,i.jsx)(n.code,{children:"self.tone"})," is being set before ",(0,i.jsx)(n.code,{children:"say_hello()"})," can ever be called."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-you-can-call-it-something-else",children:"3. You can call it something else"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You can call ",(0,i.jsx)(n.code,{children:"__init__()"})," something else. Here's Greeter with an initialize_object() method instead of ",(0,i.jsx)(n.code,{children:"__init__()"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Greeter:\n    # def __init__(self, tone: str = "casual"):\n    #     self.tone = tone\n\n    def initialize_object(self, tone="casual"):\n        self.tone = tone\n\n    def say_hello(self):\n        if self.tone == "casual":\n            print("Hi.")\n        elif self.tone == "formal":\n            print("Hello.")\n\n\ngreeter = Greeter()\ngreeter.initialize_object()\ngreeter.say_hello()\n\ngreeter.tone = "formal"\ngreeter.say_hello()\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This code works exactly as the earlier version did. The only difference is that we\u2019re using a name other than ",(0,i.jsx)(n.code,{children:"__init__()"}),", so we have to call that method explicitly before calling ",(0,i.jsx)(n.code,{children:"say_hello()"}),". If you leave out the call to ",(0,i.jsx)(n.code,{children:"initialize_object()"}),", you\u2019ll get the same traceback we saw earlier."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All you need to remember is that whenever you create a new instance from a class, Python looks for a method called ",(0,i.jsx)(n.code,{children:"__init__()"}),", and runs that method if it finds one."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["You can read the full article ",(0,i.jsx)(n.a,{href:"https://www.mostlypython.com/p/oop-in-python-part-3-the-__init__",children:"here"})]})]})}function d(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var i=t(7294);const l={},o=i.createContext(l);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);