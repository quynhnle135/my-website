"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4601],{5867:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=r(5893),l=r(1151);const o={title:"Feb 27, 2024"},s="Coding Journal: Feb 27, 2024",i={id:"learning-journal/2024/February/20240227",title:"Feb 27, 2024",description:"- Continued with the job application (10 applications)",source:"@site/docs/learning-journal/2024/February/20240227.md",sourceDirName:"learning-journal/2024/February",slug:"/learning-journal/2024/February/20240227",permalink:"/docs/learning-journal/2024/February/20240227",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feb 27, 2024"},sidebar:"tutorialSidebar",previous:{title:"Feb 26, 2024",permalink:"/docs/learning-journal/2024/February/20240226"},next:{title:"Notes",permalink:"/docs/category/notes"}},a={},c=[];function u(n){const e={code:"code",h1:"h1",li:"li",pre:"pre",ul:"ul",...(0,l.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"coding-journal-feb-27-2024",children:"Coding Journal: Feb 27, 2024"}),"\n",(0,t.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Continued with the job application (10 applications)"}),"\n",(0,t.jsxs)(e.li,{children:["Continued with Data Structures for Coding Interview in JavaScript (Tree/BST):","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Binary Search Tree implementation with Insert function"}),"\n",(0,t.jsx)(e.li,{children:"Search in BST"}),"\n",(0,t.jsx)(e.li,{children:"Find minimum value in BST"}),"\n",(0,t.jsx)(e.li,{children:"Find Kth Largest Value in BST"}),"\n",(0,t.jsx)(e.li,{children:"Find Kth Smallest Value in BST"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h1,{id:"2-questions-i-had-today",children:"2. Questions I Had Today"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"I didn't have any question for today."}),"\n"]}),"\n",(0,t.jsx)(e.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"I didn't find anything challenging today."}),"\n"]}),"\n",(0,t.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Binary Search Tree implementation with Insert function"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"class Node {\n    constructor(val) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass BinarySearchTree {\n    constructor(rootValue) {\n        this.root = new Node(rootValue);\n    }\n\n    insert(value) {\n        if (this.root === null) {\n            thir.root = new Node(value);\n        }\n\n        let cur = this.root;\n        let parent;\n        while (cur) {\n            parent = cur;\n            if (value < cur.val) {\n                cur = cur.left;\n            } else {\n                cur = cur.right;\n            }\n        }\n        if (value < parent.val) {\n            parent.left = new Node(value);\n        } else {\n            parent.right = new Node(value);\n        }\n    }\n\n    search(target) {\n        if (this.root === null) return false;\n        let cur = this.root;\n        while (cur) {\n            if (cur.val === target) return true;\n            else if (target < cur.val) {\n                cur = cur.left;\n            } else {\n                cur = cur.right;\n            }\n        }\n        return false;\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Search in BST"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"class Node {\n    constructor(val) {\n        this.val = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinarySearchTree {\n    constructor(newValue) {\n        this.root = new Node(newValue);\n    }\n\n    insert(newValue) {\n        if (this.root === null) {\n            this.root = new Node(newValue);\n            return;\n        }\n\n        // start insert from the root\n        let curNode = this.root;\n        let parentNode;\n        while (curNode) {\n            parentNode = curNode;\n            if (newValue < curNode.val) {\n                curNode = curNode.left;\n            } else {\n                curNode = curNode.right;\n            }\n        } \n\n        if (newValue < parentNode.val) {\n            parentNode.left = new Node(newValue);\n        } else {\n            parentNode.right = new Node(newValue);\n        }\n    }\n}\n\nfunction searchInBST(root, target) {\n    if (root === null) {\n        return false;\n    }\n    // start searching from the root\n    let curNode = root;\n    while (curNode) {\n        if (target === curNode.val) {\n            return true;\n        } else if (target < curNode.val) {\n            curNode = curNode.left;\n        } else {\n            curNode = curNode.right;\n        }\n    }\n    return false;\n}\n\nfunction inOrderTraversal(root) {\n    function helper(node, traversal) {\n        if (node) {\n            helper(node.left, traversal);\n            traversal.push(node.val);\n            helper(node.right, traversal);\n        }\n        return traversal;\n    }\n    return helper(root, []);\n}\n\nlet bst = new BinarySearchTree(10);\nbst.insert(15);\nbst.insert(12);\nbst.insert(17);\nbst.insert(5);\nbst.insert(7);\nbst.insert(3);\n\nconsole.log(inOrderTraversal(bst.root));\nconsole.log(searchInBST(bst.root, 10));\nconsole.log(searchInBST(bst.root, 7));\nconsole.log(searchInBST(bst.root, 3));\nconsole.log(searchInBST(bst.root, 12));\nconsole.log(searchInBST(bst.root, 20)); // false\nconsole.log(searchInBST(bst.root, 11)); // false\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Find minimum value in BST"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { Node, BinarySearchTree } from "./BinarySearchTree.js";\n\n// find minimum value recursively\nfunction findMinimumValue(root) {\n    function helper(node) {\n        if (node.left === null) {\n            return node.val;\n        }\n        return helper(node.left);\n    }\n    return helper(root);\n}\n\n// find minimum value iteratively\nfunction findMin(root) {\n    if (root === null) {\n        return;\n    }\n\n    let cur = root;\n    while (cur.left) {\n        cur = cur.left;\n    }\n    return cur.val;\n}\n\n\nlet bst = new BinarySearchTree(10);\nbst.insert(15);\nbst.insert(12);\nbst.insert(17);\nbst.insert(5);\nbst.insert(1);\nbst.insert(7);\nbst.insert(3);\n\nconsole.log(findMinimumValue(bst.root)); \nconsole.log(findMin(bst.root)); \n'})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Find Kth Largest Value in BST"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { Node, BinarySearchTree } from "./BinarySearchTree.js";\n\n\nfunction findKthBiggestElement(root, k) {\n    let traversal = inOrderTraversal(root);\n    return traversal[traversal.length - k];\n}\n\nfunction inOrderTraversal(root) {\n    function helper(node, traversal) {\n        if (node) {\n            helper(node.left, traversal);\n            traversal.push(node.val);\n            helper(node.right, traversal);\n        }\n        return traversal;\n    }\n    return helper(root, []);\n}\n\nfunction findKthLargestElement(root, k) {\n    let stack = [];\n    let cur = root;\n    let count = 0;\n    while (stack || cur) {\n        while (cur) {\n            stack.push(cur);\n            cur = cur.right;\n        }\n        cur = stack.pop();\n        count++;\n        if (count === k) {\n            return cur.val;\n        }\n        cur = cur.left;\n    }\n}\n\nlet bst = new BinarySearchTree(10);\nbst.insert(15);\nbst.insert(12);\nbst.insert(17);\nbst.insert(5);\nbst.insert(1);\nbst.insert(7);\nbst.insert(3);\n\n// console.log(inOrderTraversal(bst.root));\n// console.log(inOrderTraversal(bst.root).length);\nconsole.log(findKthBiggestElement(bst.root, 1)); // 17\nconsole.log(findKthLargestElement(bst.root, 1)); // 17\n\nconsole.log(findKthBiggestElement(bst.root, 3)); // 12\nconsole.log(findKthLargestElement(bst.root, 3)); // 12\n\nconsole.log(findKthBiggestElement(bst.root, 5)); // 5\nconsole.log(findKthLargestElement(bst.root, 5)); // 12\n\n'})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Find Kth Smallest Value in BST"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { Node, BinarySearchTree } from "./BinarySearchTree.js";\n\nfunction findKthSmallestElement(root, k) {\n    let traversal = inOrderTraversal(root);\n    return traversal[k - 1];\n}\n\nfunction inOrderTraversal(root) {\n    function helper(node, traversal) {\n        if (node) {\n            helper(node.left, traversal);\n            traversal.push(node.val);\n            helper(node.right, traversal);\n        }\n        return traversal;\n    }\n    return helper(root, []);\n}\n\n// Using Stack\nfunction findKthSmallestElementStack(root, k) {\n    let stack = [];\n    let counter = 0;\n    let cur = root;\n    while (stack || cur) {\n        while (cur) {\n            stack.push(cur);\n            cur = cur.left;\n        }\n        cur = stack.pop();\n        counter++;\n        if (counter == k) {\n            return cur.val;\n        }\n        cur = cur.right;\n    }\n}\n\nlet bst = new BinarySearchTree(10);\nbst.insert(15);\nbst.insert(12);\nbst.insert(17);\nbst.insert(5);\nbst.insert(1);\nbst.insert(7);\nbst.insert(3);\n\nconsole.log(findKthSmallestElement(bst.root, 3)); // 5\nconsole.log(findKthSmallestElement(bst.root, 1)); // 1\nconsole.log(findKthSmallestElement(bst.root, 2)); // 3\n\nconsole.log(findKthSmallestElementStack(bst.root, 3)); // 5\nconsole.log(findKthSmallestElementStack(bst.root, 1)); // 1\nconsole.log(findKthSmallestElementStack(bst.root, 2)); // 3\n\n'})})]})}function d(n={}){const{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>i,a:()=>s});var t=r(7294);const l={},o=t.createContext(l);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);