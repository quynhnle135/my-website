"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6964],{3811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>o});var a=t(5893),i=t(1151);const s={title:"Sep 26, 2023"},l="Coding Journal: Sep 26, 2023",r={id:"learning-journal/September/20230926",title:"Sep 26, 2023",description:"Flask Task Manager application",source:"@site/docs/learning-journal/September/20230926.md",sourceDirName:"learning-journal/September",slug:"/learning-journal/September/20230926",permalink:"/my-website/docs/learning-journal/September/20230926",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 26, 2023"},sidebar:"tutorialSidebar",previous:{title:"Sep 24, 2023",permalink:"/my-website/docs/learning-journal/September/20230924"},next:{title:"Sep 27, 2023",permalink:"/my-website/docs/learning-journal/September/20230927"}},d={},o=[{value:"Flask Task Manager application",id:"flask-task-manager-application",level:3},{value:"Setting up",id:"setting-up",level:5},{value:"Creat Flask app and some functions to add, check, and delete task",id:"creat-flask-app-and-some-functions-to-add-check-and-delete-task",level:5},{value:"Notes",id:"notes",level:4},{value:"Notes:",id:"notes-1",level:4},{value:"Run the app",id:"run-the-app",level:3},{value:"Flaskr project",id:"flaskr-project",level:2},{value:"Setting up the project",id:"setting-up-the-project",level:5},{value:"Create Application factory",id:"create-application-factory",level:4},{value:"Notes:",id:"notes-2",level:5},{value:"Setting up the database",id:"setting-up-the-database",level:4},{value:"Notes:",id:"notes-3",level:5},{value:"Setting up databse with SQL",id:"setting-up-databse-with-sql",level:3},{value:"Notes:",id:"notes-4",level:5},{value:"Initialize and connect database to app",id:"initialize-and-connect-database-to-app",level:5},{value:"Successfully connect databse",id:"successfully-connect-databse",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"coding-journal-sep-26-2023",children:"Coding Journal: Sep 26, 2023"}),"\n",(0,a.jsx)(n.h3,{id:"flask-task-manager-application",children:"Flask Task Manager application"}),"\n",(0,a.jsx)(n.h5,{id:"setting-up",children:"Setting up"}),"\n",(0,a.jsx)(n.p,{children:"Set up virtual environment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-command",children:"python3 -m venv .venv\n"})}),"\n",(0,a.jsx)(n.p,{children:"Activate .venv virtual environment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-command",children:"source .venv/bim/activate\n"})}),"\n",(0,a.jsx)(n.p,{children:"Install Flask"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-command",children:"pip install flask\n"})}),"\n",(0,a.jsx)(n.h5,{id:"creat-flask-app-and-some-functions-to-add-check-and-delete-task",children:"Creat Flask app and some functions to add, check, and delete task"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="app.py"',children:'from flask import Flask, render_template, request, redirect, url_for\n\napp = Flask(__name__)\ntasks = []\n\n@app.route("/")\ndef index():\n    return render_template("index.html", tasks=tasks)\n\n\n@app.route("/add", methods=[\'POST\'])\ndef add_task():\n    task_name = request.form.get("task_name")\n    tasks.append({"name": task_name, "completed": False})\n    return redirect(url_for("index"))\n\n\n@app.route("/complete/<int:task_id>")\ndef complete_task(task_id):\n    tasks[task_id]["completed"] = True\n    return redirect(url_for("index"))\n\n\n@app.route("/delete/<int:task_id>")\ndef delete_task(task_id):\n    tasks.pop(task_id)\n    return redirect(url_for("index"))\n'})}),"\n",(0,a.jsx)(n.h4,{id:"notes",children:"Notes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"I find it's easy for me to understand when I compare the things I'm learning with the one that I'm familiar with. For this case, I tried to find the similarity between Flask and Django"}),"\n",(0,a.jsx)(n.li,{children:"Beause there will be many tasks so I created an empty list, each task will be stored as a dictionary with name and completed as keys"}),"\n",(0,a.jsx)(n.li,{children:"app.route() is a decorate to set up the url for the function defined below"}),"\n",(0,a.jsx)(n.li,{children:"Similar to Django, Flask also use templates and jinja to work and display data"}),"\n",(0,a.jsx)(n.li,{children:'When you create a task, it means you create something new and "post" it to the database, so the method for add_task is POST.'}),"\n",(0,a.jsx)(n.li,{children:"When a task is sucessfully added, it will direct user to index page (similar to reverse_lazy in Django)"}),"\n",(0,a.jsx)(n.li,{children:"The task_id comes from the URL itself since each task will have its own ID"}),"\n",(0,a.jsx)(n.li,{children:'This is a small project so my "database" is the list of tasks I created first thing.'}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",metastring:'title="templates/index.html"',children:'<!DOCTYPE html>\n<html>\n<head>\n    <title>Task Manager</title>\n</head>\n<body>\n    <h1>Task Manager</h1>\n\n    <form action="/add" method="post">\n        <input type="text" name="task_name" placeholder="New Task" required>\n        <button type="submit">Add</button>\n    </form>\n\n    <ul>\n        {% for task in tasks %}\n            <li>\n                {{ task["name"] }}\n                {% if not task["completed"] %}\n                    <a href="/complete/{{ loop.index0 }}">Complete</a>\n                {% endif %}\n                <a href="/delete/{{ loop.index0 }}">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"notes-1",children:"Notes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Creating templates with Flask is very similar to Django"}),"\n",(0,a.jsx)(n.li,{children:'With the form, I need to add function "add" as my action to let it know that the application adds new task using add_task fucntion declared in app.py with POST method'}),"\n",(0,a.jsx)(n.li,{children:"A special thing is loop.index0 (this is number zero, not uppercase o). Since complete and delete functions need task_id, while looping thru each task, it requires index as id so that's why it's necessary and required there"}),"\n",(0,a.jsx)(n.li,{children:"Remember to close the if-else statement and for loop. I forgot and the code didn't run"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"run-the-app",children:"Run the app"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-command",children:"flask --app app run\n"})}),"\n",(0,a.jsx)(n.h2,{id:"flaskr-project",children:"Flaskr project"}),"\n",(0,a.jsx)(n.p,{children:"Code along Flask documentations"}),"\n",(0,a.jsx)(n.h5,{id:"setting-up-the-project",children:"Setting up the project"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-command",children:"python3 -m venv .venv\n\n# acticvate .venv \nsource .vemv/bin/activate\n\n# install flask\npip install flask\n\n"})}),"\n",(0,a.jsx)(n.h4,{id:"create-application-factory",children:"Create Application factory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="flaskr/__init__.py"',children:"import os\n\nfrom flask import Flask\n\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route(\"/hello/\")\n    def hello():\n        return \"Hello, World!\"\n\n    return app\n"})}),"\n",(0,a.jsx)(n.h5,{id:"notes-2",children:"Notes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Even though this is the start and the set up but it's really confusing to me."}),"\n",(0,a.jsxs)(n.li,{children:["Is it different to normal app set up by importing Flask and create app = Flask(",(0,a.jsx)(n.strong,{children:"name"}),"_)?"]}),"\n",(0,a.jsx)(n.li,{children:"Obviously, since it looks longer and much complicated. Here it's try to connect SQLite database and test"}),"\n",(0,a.jsx)(n.li,{children:"We can also work with urls and views/function in this factory"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"setting-up-the-database",children:"Setting up the database"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="flaskr/db.py"',children:"import sqlite3\n\nimport click\nfrom flask import current_app, g\n\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n\n\ndef init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n\n@click.command('init-db')\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n\n\ndef init_app(app):\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n"})}),"\n",(0,a.jsx)(n.h5,{id:"notes-3",children:"Notes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"g is a global object in Flask to store data"}),"\n",(0,a.jsx)(n.li,{children:"if there's no existing database, it will create a new sqlite3 databse"}),"\n",(0,a.jsx)(n.li,{children:"close_db function is used to remove database"}),"\n",(0,a.jsx)(n.li,{children:"init_db to innitialize databsae writing with SQL below"}),"\n",(0,a.jsx)(n.li,{children:"init_apop is used to connect the database with the app"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"setting-up-databse-with-sql",children:"Setting up databse with SQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="flaskr/schema.sql"',children:"DROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n"})}),"\n",(0,a.jsx)(n.h5,{id:"notes-4",children:"Notes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Here I need to create 2 tables: user and post"}),"\n",(0,a.jsx)(n.li,{children:"user table will have 3 attributes: id, username, and password"}),"\n",(0,a.jsx)(n.li,{children:"pst tbale have user as foreign key since it requires user_id"}),"\n"]}),"\n",(0,a.jsx)(n.h5,{id:"initialize-and-connect-database-to-app",children:"Initialize and connect database to app"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="flaskr/__init__.py"',children:"    ...\n    from . import db\n    db.init_app(app)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"successfully-connect-databse",children:"Successfully connect databse"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-command",children:"flask --app flaskr init-db\n>>> Initialized the database.\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>l});var a=t(7294);const i={},s=a.createContext(i);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);