"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4493],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>f});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function p(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=t.createContext({}),l=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):p(p({},n),e)),r},s=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=l(r),d=i,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||a;return r?t.createElement(f,p(p({ref:n},s),{},{components:r})):t.createElement(f,p({ref:n},s))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,p=new Array(a);p[0]=d;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u[m]="string"==typeof e?e:i,p[1]=u;for(var l=2;l<a;l++)p[l]=r[l];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6763:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>p,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var t=r(7462),i=(r(7294),r(3905));const a={title:"Apr 28",description:"Coding Journal - Fri, Apr 28",tags:["journal"]},p=void 0,u={unversionedId:"coding-journal/2023/April/apr_28_23",id:"coding-journal/2023/April/apr_28_23",title:"Apr 28",description:"Coding Journal - Fri, Apr 28",source:"@site/docs/coding-journal/2023/April/apr_28_23.md",sourceDirName:"coding-journal/2023/April",slug:"/coding-journal/2023/April/apr_28_23",permalink:"/my-website/docs/coding-journal/2023/April/apr_28_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding-journal/2023/April/apr_28_23.md",tags:[{label:"journal",permalink:"/my-website/docs/tags/journal"}],version:"current",frontMatter:{title:"Apr 28",description:"Coding Journal - Fri, Apr 28",tags:["journal"]},sidebar:"tutorialSidebar",previous:{title:"110922",permalink:"/my-website/docs/coding-journal/2022/November/nov_9_22"},next:{title:"Apr 29",permalink:"/my-website/docs/coding-journal/2023/April/apr_29_23"}},o={},l=[],s={toc:l},m="wrapper";function c(e){let{components:n,...r}=e;return(0,i.kt)(m,(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Recursion: Recursion is a process that calls its function directly or indirectly. Recursion is used to break down the problem into smaller sub-problems until they become simple enough to solve directly"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Factorial of positive number:\nExample 1:\nInput: 5\nOutput: 120 (1 x 2 x 3 x4 x5 = 120)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_factorial(n):\n    # base case\n    if n == 1:\n        return 1\n    return find_factorial(n - 1) * n\n\ndef find_factorial_iterative(n):\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial\n\nprint(find_factorial(5))\nprint(find_factorial_iterative(5))\nprint(find_factorial(10))\nprint(find_factorial_iterative(10))\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Sum of nums up to N:\nExample:\nInput: 5\nOutput: 15 (1 + 2 + 3 + 4 + 5 = 15)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_sum(n):\n# base case\nif n == 0:\n    return 0\nreturn find_sum(n - 1) + n\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Fibonacci number:\nfib(n) = fib(n - 1) + fib(n - 2) with fib(1) = 1, fib(2) = 1\n-> 1 1 2 3 5 8 13 21\nExample:\nInput: 5\nOutput: 5\nInput: 8\nOutput: 21"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_fibonacci_number(n):\n    # base case\n    if n == 1 or n == 2:\n        return 1\n    return find_fibonacci_number(n - 1) + find_fibonacci_number(n - 2)\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Check if a number is a palindrome:\nExample:"),(0,i.kt)("p",{parentName:"li"},"Input: 1221"),(0,i.kt)("p",{parentName:"li"},"Output: True"),(0,i.kt)("p",{parentName:"li"},"Input: 1234"),(0,i.kt)("p",{parentName:"li"},"Output: False"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def reverse_number(n, temp):\n    if n == 0:\n        return temp\n    digit = n % 10\n    temp = temp * 10 + digit\n    return reverse_number(n // 10, temp)\n\ndef check_palindrome(n):\n    # negative number cannot be a palindrome number\n    if n < 0:\n        return False\n    result = reverse_number(n, 0)\n    # true if reversed_number is the same as n\n    return result == n\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Check if a number is a palindrome but iterative solution:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def check_palindrome_iterative(n):\n    n_duplicated = n\n    reversed_number = 0\n    while n_duplicated > 0:\n        digit = n_duplicated % 10\n        n_duplicated //= 10\n        reversed_number = reversed_number * 10 + digit\n    return n == reversed_number\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Find the number of digits of a number:\nInput: 123"),(0,i.kt)("p",{parentName:"li"},"Output: 3"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_number_of_digits(n):\n    # base case when it reaches the last digit\n    if n == 0:\n        return 1\n    return find_number_of_digits_iterative(n // 10) + 1\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Find sum of digits of a number:\nInput: 123"),(0,i.kt)("p",{parentName:"li"},"Output: 6"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_sum_of_digits(n):\n    # base case\n    if n == 0:\n        return 0\n    digit = n % 10\n    return find_sum_of_digits(n // 10) + digit\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Reverse string:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def reverse_string_helper(s, index, res):\n    # base case: when reach the first character of the string\n    if index < 0:\n        return res\n    res += s[index]\n    return reverse_string_helper(s, index - 1, res)\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'def reverse_string(s):\n    return reverse_string_helper(s, len(s) - 1, "")\n```\n')),(0,i.kt)("ol",{start:9},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Given the list of numbers, return the sum of all values in the list:"),(0,i.kt)("p",{parentName:"li"},"Input: ","[1, 2, 3, 4, 5]"),(0,i.kt)("p",{parentName:"li"},"Output: 15"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_sum_of_list(nums):\n    # find sum of the list and start with the first element with index 0\n    return find_sum(nums, 0)\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"def find_sum(nums, index):\n    # base case: when it reaches out the range of given list\n    if index == len(nums):\n        return 0\n    return find_sum(nums, index + 1) + nums[index]\n```\n")),(0,i.kt)("ol",{start:10},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Given the list of numbers, return the minimum value of the list:"),(0,i.kt)("p",{parentName:"li"},"Input: ","[5, 2, 1, 6, 9, 8]"),(0,i.kt)("p",{parentName:"li"},"Output: 1"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def find_min_recursive(nums):\n    if nums == []:\n        return None\n    else:\n        return find_min_recursive_helper(nums, nums[0])\n\ndef find_min_recursive_helper(nums, min):\n    if nums == []:\n        return min\n    # set the first value as a temporary minimum value\n    if nums[0] < min:\n        min = nums[0]\n    return find_min_recursive_helper(nums[1:], min)\n")))))}c.isMDXComponent=!0}}]);