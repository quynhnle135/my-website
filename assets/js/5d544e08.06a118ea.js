"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9828],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=d(t),c=i,f=h["".concat(p,".").concat(c)]||h[c]||u[c]||a;return t?r.createElement(f,o(o({ref:n},l),{},{components:t})):r.createElement(f,o({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[h]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={title:"Sep 27"},o=void 0,s={unversionedId:"coding-journal/2023/September/sep_27_23",id:"coding-journal/2023/September/sep_27_23",title:"Sep 27",description:"Graph review",source:"@site/docs/coding-journal/2023/9 - September/sep_27_23.md",sourceDirName:"coding-journal/2023/9 - September",slug:"/coding-journal/2023/September/sep_27_23",permalink:"/my-website/docs/coding-journal/2023/September/sep_27_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Sep 27"},sidebar:"tutorialSidebar",previous:{title:"Sep 26",permalink:"/my-website/docs/coding-journal/2023/September/sep_26_23"},next:{title:"Sep 28",permalink:"/my-website/docs/coding-journal/2023/September/sep_28_23"}},p={},d=[{value:"Graph review",id:"graph-review",level:2},{value:"Breadth First Search",id:"breadth-first-search",level:3},{value:"Find level of each node in graph",id:"find-level-of-each-node-in-graph",level:3},{value:"Find existing path",id:"find-existing-path",level:3},{value:"Depth first search",id:"depth-first-search",level:3},{value:"DFS traversal",id:"dfs-traversal",level:4},{value:"Notes:",id:"notes",level:5}],l={toc:d},h="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(h,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"graph-review"},"Graph review"),(0,i.kt)("h3",{id:"breadth-first-search"},"Breadth First Search"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Visit the current node and its neighbors first by using queue to keep track "),(0,i.kt)("li",{parentName:"ul"},"Using set for visited nodes so it doesn't fall into a loop")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def breadth_first_search(graph, start):\n    queue = [start]\n    visited = set()\n    traversal = []\n\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return traversal\n\n\ndef bfs(graph, start):\n    return bfs_helper(graph=graph, queue=[start], visited=set())\n\n\ndef bfs_helper(graph, queue, visited):\n    if not queue:\n        return []\n    node = queue.pop(0)\n    if node in visited:\n        return bfs_helper(graph, queue, visited)\n\n    visited.add(node)\n    for neighbor in graph[node]:\n        queue.append(neighbor)\n    return [node] + bfs_helper(graph, queue, visited)\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['D', 'E'],\n        'C': ['F'],\n        'D': [],\n        'E': ['F'],\n        'F': []\n    }\n    print(breadth_first_search(graph, 'A'))\n    print(bfs(graph, 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n\n")),(0,i.kt)("h3",{id:"find-level-of-each-node-in-graph"},"Find level of each node in graph"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Since this exercise requires to go by level to check and count, BFS should be applied"),(0,i.kt)("li",{parentName:"ul"},"Instead of storing the node, store the tuple of node and level")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def find_level_of_each_node(graph, start):\n    visited = set()\n    queue = [(start, 0)]\n    node_levels = {}\n\n    while queue:\n        node, level = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            node_levels[node] = level\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append((neighbor, level + 1))\n    return node_levels\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    print(find_level_of_each_node(graph, 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n")),(0,i.kt)("h3",{id:"find-existing-path"},"Find existing path"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When traversing thru every node in graph, we can check if it contains end node. If contained, return True"),(0,i.kt)("li",{parentName:"ul"},"If we're done traversing every node in graph but end node cannot be found, return False")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def check_existing_path(graph, start, end):\n    if start not in graph or end not in graph:\n        return False\n    visited = set()\n    queue = [start]\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            if node == end:\n                return True\n            visited.add(node)\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return False\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    print(check_existing_path(graph, 'A', 'E'))\n    print(check_existing_path(graph, 'A', 'C'))\n    print(check_existing_path(graph, 'C', 'F'))\n    print(check_existing_path(graph, 'A', 'W'))\n    print(check_existing_path(graph, 'W', 'A'))\n    print(check_existing_path(graph, 'E', 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n")),(0,i.kt)("h3",{id:"depth-first-search"},"Depth first search"),(0,i.kt)("h4",{id:"dfs-traversal"},"DFS traversal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def dfs(graph, start):\n    return dfs_helper(graph, [start], set(), [])\n\n\ndef dfs_helper(graph, stack, visited, traversal):\n    if not stack:\n        return []\n\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                stack.append(neighbor)\n                dfs_helper(graph, stack, visited, traversal)\n    return traversal\n\n\ndef dfs_iterative(graph, start):\n    visited = set()\n    stack = [start]\n    traversal = []\n\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n\n        for neighbor in reversed(graph[node]):\n            if neighbor not in visited:\n                stack.append(neighbor)\n    return traversal\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    another_graph = {\n        0: [1, 3],\n        1: [0, 2],\n        2: [1, 3],\n        3: [0, 2]\n    }\n\n    print(dfs_iterative(graph, 'A'))\n    print(dfs_iterative(another_graph, 0))\n    print(dfs(graph, 'A'))\n    print(dfs(another_graph, 0))\n\n\nif __name__ == \"__main__\":\n    main()\n")),(0,i.kt)("h5",{id:"notes"},"Notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Quite opposite to BFS, DFS use stack since it's going downn/deeper so it doesn't need to store all of the current node's neighbor right ahead"),(0,i.kt)("li",{parentName:"ul"},"Reversed in DFS is not necessary but if you want to return an ordered/consistent traversal of nodes, reversed help traverse the node from left to right")))}u.isMDXComponent=!0}}]);