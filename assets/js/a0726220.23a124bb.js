"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4331],{3905:(n,e,r)=>{r.d(e,{Zo:()=>d,kt:()=>p});var t=r(7294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function c(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function o(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function a(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},c=Object.keys(n);for(t=0;t<c.length;t++)r=c[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(t=0;t<c.length;t++)r=c[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var s=t.createContext({}),u=function(n){var e=t.useContext(s),r=e;return n&&(r="function"==typeof n?n(e):o(o({},e),n)),r},d=function(n){var e=u(n.components);return t.createElement(s.Provider,{value:e},n.children)},l="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},m=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,c=n.originalType,s=n.parentName,d=a(n,["components","mdxType","originalType","parentName"]),l=u(r),m=i,p=l["".concat(s,".").concat(m)]||l[m]||f[m]||c;return r?t.createElement(p,o(o({ref:e},d),{},{components:r})):t.createElement(p,o({ref:e},d))}));function p(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var c=r.length,o=new Array(c);o[0]=m;var a={};for(var s in e)hasOwnProperty.call(e,s)&&(a[s]=e[s]);a.originalType=n,a[l]="string"==typeof n?n:i,o[1]=a;for(var u=2;u<c;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2997:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>c,metadata:()=>a,toc:()=>u});var t=r(7462),i=(r(7294),r(3905));const c={title:"Day 6"},o="Hashmap and Set",a={unversionedId:"leetcode-grinding/leetcode-75/day-6",id:"leetcode-grinding/leetcode-75/day-6",title:"Day 6",description:"2215. Find the Difference of Two Arrays",source:"@site/docs/leetcode-grinding/leetcode-75/day-6.md",sourceDirName:"leetcode-grinding/leetcode-75",slug:"/leetcode-grinding/leetcode-75/day-6",permalink:"/my-website/docs/leetcode-grinding/leetcode-75/day-6",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode-grinding/leetcode-75/day-6.md",tags:[],version:"current",frontMatter:{title:"Day 6"},sidebar:"tutorialSidebar",previous:{title:"Day 5",permalink:"/my-website/docs/leetcode-grinding/leetcode-75/day-5"},next:{title:"Day 7",permalink:"/my-website/docs/leetcode-grinding/leetcode-75/day-7"}},s={},u=[{value:"2215. Find the Difference of Two Arrays",id:"2215-find-the-difference-of-two-arrays",level:4},{value:"1207. Unique Number of Occurences",id:"1207-unique-number-of-occurences",level:4},{value:"1657. Determine if Two Strings Are Close",id:"1657-determine-if-two-strings-are-close",level:4},{value:"2352. Equal Row and Column Pairs",id:"2352-equal-row-and-column-pairs",level:4}],d={toc:u},l="wrapper";function f(n){let{components:e,...r}=n;return(0,i.kt)(l,(0,t.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hashmap-and-set"},"Hashmap and Set"),(0,i.kt)("h4",{id:"2215-find-the-difference-of-two-arrays"},"2215. Find the Difference of Two Arrays"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first solution of mine is a little bit lengthy because I need to check for unique number in nums1 compared to nums2 and vice versa."),(0,i.kt)("li",{parentName:"ul"},'The second solution helps me learn about the "-" operation in list to find the unique values between two lists.')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def find_differences_i(nums1, nums2):\n    res = []\n    nums1 = set(nums1)\n    first = []\n    second = []\n    for num in nums1:\n        if num not in nums2:\n            first.append(num)\n\n    nums2 = set(nums2)\n    for num in nums2:\n        if num not in nums1:\n            second.append(num)\n    res.append(first)\n    res.append(second)\n    return res\n\n\ndef find_differences_ii(nums1, nums2):\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    return [list(nums1 - nums2), list(nums2 - nums1)]\n\n\ndef main():\n    print(find_differences_i(nums1=[1, 2, 3], nums2=[2, 4, 6]))\n    print(find_differences_ii(nums1=[1, 2, 3], nums2=[2, 4, 6]))\n\n    print(find_differences_i(nums1=[1, 2, 3, 3], nums2=[1, 1, 2, 2]))\n    print(find_differences_ii(nums1=[1, 2, 3, 3], nums2=[1, 1, 2, 2]))\n\n\nif __name__ == "__main__":\n     main()\n     \n\n')),(0,i.kt)("h4",{id:"1207-unique-number-of-occurences"},"1207. Unique Number of Occurences"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\n\ndef uniqueOccurrences(arr):\n    numbers = set(arr)\n    occurrences = defaultdict(int)\n    count = set()\n    for num in arr:\n        occurrences[num] += 1\n    for key in occurrences:\n        count.add(occurrences[key])\n    return len(numbers) == len(count)\n\n\ndef main():\n    print(uniqueOccurrences([1, 2, 2, 1, 1, 3]))\n    print(uniqueOccurrences([1, 2]))\n    print(uniqueOccurrences([-3, 0, 1, -3, 1, 1, 1, -3, 10, 0]))\n\n\nif __name__ == "__main__":\n    main()\n\n\n')),(0,i.kt)("h4",{id:"1657-determine-if-two-strings-are-close"},"1657. Determine if Two Strings Are Close"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import Counter\n\n\ndef closeStrings(word1, word2):\n    if len(word1) < len(word2) or len(word1) > len(word2):\n        return False\n\n    char_dict_1 = {}\n    char_dict_2 = {}\n    for c in word1:\n        if c in char_dict_1:\n            char_dict_1[c] += 1\n        else:\n            char_dict_1[c] = 1\n\n    occurrences_1 = []\n    chars1 = []\n    for key in char_dict_1:\n        chars1.append(key)\n        occurrences_1.append(char_dict_1[key])\n\n    for c in word2:\n        if c in char_dict_2:\n            char_dict_2[c] += 1\n        else:\n            char_dict_2[c] = 1\n\n    occurrences_2 = []\n    chars2 = []\n    for key in char_dict_2:\n        chars2.append(key)\n        occurrences_2.append(char_dict_2[key])\n\n    chars1.sort()\n    chars2.sort()\n    occurrences_1.sort()\n    occurrences_2.sort()\n\n    if chars1 != chars2:\n        return False\n\n    for i in range(len(occurrences_1)):\n        if occurrences_1[i] != occurrences_2[i]:\n            return False\n    return True\n\n\ndef closeStrings_ii(word1, word2):\n    return sorted(Counter(word1).values()) == sorted(Counter(word2).values()) and set(word1) == set(word2)\n\n\ndef main():\n    # print(closeStrings("abc", "acb"))  # True\n    # print(closeStrings("a", "aa"))  # False\n    # print(closeStrings("cabbba", "abbccc"))  # True\n\n    print(closeStrings_ii("abc", "acb"))  # True\n    # print(closeStrings_ii("a", "aa"))  # False\n    # print(closeStrings_ii("cabbba", "abbccc"))  # True\n\n\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h4",{id:"2352-equal-row-and-column-pairs"},"2352. Equal Row and Column Pairs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\n\ndef find_equal_rows_columns(grid):\n    rows = []\n    columns = []\n    n = len(grid)\n    count = 0\n\n    # Add rows\n    for i in range(n):\n        cur_row = []\n        for j in range(n):\n            cur_row.append(grid[i][j])\n        rows.append(cur_row)\n\n    # Add columns\n    for i in range(n):\n        cur_col = []\n        for j in range(n):\n            cur_col.append(grid[j][i])\n        columns.append(cur_col)\n\n    for row in rows:\n        for column in columns:\n            if row == column:\n                count += 1\n    return count\n\n\ndef find_equal_rows_columns_ii(grid):\n    rows = [str(row) for row in grid]\n    row_dict = {}\n    for row in rows:\n        if row in row_dict:\n            row_dict[row] += 1\n        else:\n            row_dict[row] = 1\n\n    count = 0\n    # Check column\n    n = len(grid)\n\n    for i in range(n):\n        cur_col = []\n        for j in range(n):\n            cur_col.append(grid[j][i])\n        cur_col = str(cur_col)\n        if cur_col in rows:\n            count += row_dict[cur_col]\n    return count\n\n\ndef main():\n    print(find_equal_rows_columns(grid=[[3, 2, 1], [1, 7, 6], [2, 7, 7]]))  # 1\n    print(find_equal_rows_columns_ii(grid=[[3, 2, 1], [1, 7, 6], [2, 7, 7]]))  # 1\n    print(find_equal_rows_columns(grid=[[3, 1, 2, 2], [1, 4, 4, 5], [2, 4, 2, 2], [2, 4, 2, 2]]))\n    print(find_equal_rows_columns_ii(grid=[[3, 1, 2, 2], [1, 4, 4, 5], [2, 4, 2, 2], [2, 4, 2, 2]]))\n\n\nif __name__ == "__main__":\n    main()\n\n')))}f.isMDXComponent=!0}}]);