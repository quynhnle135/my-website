"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5593],{8e3:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=s(5893),i=s(1151);const r={title:"Node.js Introduction and Fundamental (1)"},t="Node.js Introduction and Fundamental (1)",l={id:"tech-blogs/become-fullstack-developer/node1",title:"Node.js Introduction and Fundamental (1)",description:"What is Node.js and what is it used for?",source:"@site/docs/tech-blogs/become-fullstack-developer/node1.md",sourceDirName:"tech-blogs/become-fullstack-developer",slug:"/tech-blogs/become-fullstack-developer/node1",permalink:"/docs/tech-blogs/become-fullstack-developer/node1",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Node.js Introduction and Fundamental (1)"},sidebar:"tutorialSidebar",previous:{title:"Interview Preparation - JavaScript (2)",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_2"},next:{title:"Node.js Introduction and Fundamental (2)",permalink:"/docs/tech-blogs/become-fullstack-developer/node2"}},a={},d=[{value:"What is Node.js and what is it used for?",id:"what-is-nodejs-and-what-is-it-used-for",level:2},{value:"Follow-up questions",id:"follow-up-questions",level:4},{value:"Buffer",id:"buffer",level:2},{value:"Buffer in Node.js",id:"buffer-in-nodejs",level:3},{value:"Readline",id:"readline",level:2},{value:"What does this code snippet do?",id:"what-does-this-code-snippet-do",level:4},{value:"Guess Number Coding Challenge",id:"guess-number-coding-challenge",level:3},{value:"What does this code snippet do?",id:"what-does-this-code-snippet-do-1",level:4},{value:"Guess Vowel Coding Challenge",id:"guess-vowel-coding-challenge",level:3},{value:"Follow-up questions",id:"follow-up-questions-1",level:4},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"nodejs-introduction-and-fundamental-1",children:"Node.js Introduction and Fundamental (1)"}),"\n",(0,o.jsx)(n.h2,{id:"what-is-nodejs-and-what-is-it-used-for",children:"What is Node.js and what is it used for?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Node.js is an ",(0,o.jsx)("b",{children:"open-source, cross-platform"})," JavaScript ",(0,o.jsx)("b",{children:"runtime environment"})," that executes JavaScript code outside of a web browser:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Open-source: Node.js has a healthy community of collaborators who work on keeping Node.js feature-rich and up-to-date"}),"\n",(0,o.jsx)(n.li,{children:"Cross-platform: Node.js applications can be run on Windows, Linux, or MacOS."}),"\n",(0,o.jsx)(n.li,{children:"Runtime environment: Node.js is built on Google Chrome's V8 engine and provides everything you need to run JavaScript outside the browser."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["What is Node.js used for?","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Web development: Building server-side logic for web applications, handling HTTP requests, and generating content dynamically."}),"\n",(0,o.jsx)(n.li,{children:"API services: Creating RESTful APIs that can be consumed by web clients, mobile applications, or other services."}),"\n",(0,o.jsx)(n.li,{children:"Real-time applications: Powering real-time features such as live chat, instant messaging, or collaborative editing tools, due to its event-driven, non-block nature."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("mark",{children:"\u2192 Node.js's non-blocking, event-drivent architecture makes it particularly well-suited for applications that require high concurrency but don't have intensive CPU computation, allowing for efficient handling of simultaneous connections with minimal overhead."}),"\n",(0,o.jsx)(n.h4,{id:"follow-up-questions",children:"Follow-up questions"}),"\n",(0,o.jsx)("b",{children:(0,o.jsx)("i",{children:'As the definition of Node.js, what does "outside of a web browser" mean?'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Traditionally, JavaScript was designed to run only within web browser to create interactive web pages and handle user interactions."}),"\n",(0,o.jsx)(n.li,{children:"Node.js extends the capabilities of JavaScript beyond browsers, making it possible to write server-side scripts, command-line tools, and even desk applications, etc."}),"\n"]}),"\n",(0,o.jsx)("b",{children:(0,o.jsx)("i",{children:"What does concurrency mean?"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Concurrency: refers to the ability of a system to handle multiple tasks or operations at the same time"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"buffer",children:"Buffer"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)("b",{children:"Buffer"})," in the context of computers refer to a temporary data storage that is used when moving data."]}),"\n",(0,o.jsxs)(n.li,{children:["For example: Moving data in video streaming. Depending on how fast your internet is, your video quality can change and so can your viewing experience. Video data is fetched from the server, ",(0,o.jsx)("b",{children:"stored in the buffer"}),", processed, and sent to your display \u2192 This is why when you click on a video, you do not wait for it to download completely; instead, it starts playing right away."]}),"\n"]}),"\n",(0,o.jsx)("mark",{children:"\u2192As soon as some data arrives, the program can start processing it or move on to process more code."}),"\n",(0,o.jsx)(n.h3,{id:"buffer-in-nodejs",children:"Buffer in Node.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"\nconst buff1 = Buffer.alloc(10); // Create 10 zero-filled buffers\nconsole.log(buff1);\n\nconst buff2 = Buffer.alloc(5, 15); // Create 5 buffers filled with 15\nconsole.log(buff2);\n\nconst buff3 = Buffer.from([1, 2, 3]); // Create 3 buffers whose values are from the list [1, 2, 3]\nconsole.log(buff3);\n\nconst buff4 = Buffer.allocUnsafe(10);\nconsole.log(buff4);\n\nconst buff5 = Buffer.from(\"hello world\");\nconsole.log(buff5); // Create buffers having hexadecimal values from 'hello world' string\nconsole.log(buff5.toString());\n\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Buffer.allocUnsafe()"})," is faster than ",(0,o.jsx)(n.code,{children:"Buffer.alloc()"})," but the buffers it returns may or may not be empty."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"readline",children:"Readline"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)("b",{children:(0,o.jsx)("i",{children:"readline"})})," module provides an interface for reading data from a Readable stream (such as ",(0,o.jsx)("i",{children:"process.stdin"}),") one line at a time."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const readline = require("readline");\n\nlet rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nlet query = "What\'s your name?\\n";\n\nrl.question(query, (input) => {\n  console.log(`Hi, ${input}! Nice to meet you.`);\n  rl.close();\n});\n\n'})}),"\n",(0,o.jsx)(n.h4,{id:"what-does-this-code-snippet-do",children:"What does this code snippet do?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Import ",(0,o.jsx)(n.code,{children:"readline"})," module and assign it to a constant variable which is used to access to all functionalities that ",(0,o.jsx)(n.code,{children:"readline"})," module offers."]}),"\n",(0,o.jsxs)(n.li,{children:["Create a ",(0,o.jsx)(n.code,{children:"rl"})," readline interface to get input from the console and return/display outpu in the console."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rl.question"})," set prompts with query as the first argument, and the second argument is a function that handles user's input from console."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rl.close()"}),": close the interface when the program is done."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"guess-number-coding-challenge",children:"Guess Number Coding Challenge"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const { stdin, stdout } = require("process");\nconst readline = require("readline");\n\nconst rl = readline.createInterface({\n  input: stdin,\n  output: stdout,\n});\n\nfunction generateRandomNumber(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n\n  let randomNumber = Math.round(Math.random() * (max - min + 1)) + min;\n  return randomNumber;\n}\n\n// Get a random number in range 1-10\nlet randomNumber = generateRandomNumber(1, 10);\n\n// Player has 3 trials\nlet tries = 3;\n\nrl.setPrompt("Guess a number from 1 to 10:\\n");\nrl.prompt();\nrl.on("line", function (guess) {\n  tries--;\n  game(tries, randomNumber, guess);\n  rl.prompt();\n});\n\nfunction game(tries, randomNumber, guess) {\n  if (tries > 0) {\n    if (randomNumber == guess) {\n      console.log("YOU WON!");\n      process.exit();\n    } else if (guess < randomNumber) {\n      console.log("TOO LOW");\n      console.log(`You have ${tries} trial(s) left.`);\n    } else {\n      console.log("TOO HIGH");\n      console.log(`You have ${tries} trials left.`);\n    }\n  } else {\n    if (randomNumber == guess) {\n      console.log("YOU WON");\n    } else {\n      console.log("YOU LOSE. THE NUMBER IS:", randomNumber);\n    }\n    process.exit();\n  }\n}\n\n'})}),"\n",(0,o.jsx)(n.h4,{id:"what-does-this-code-snippet-do-1",children:"What does this code snippet do?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This is a simple guessing game that player can play in the console."}),"\n",(0,o.jsxs)(n.li,{children:["The game here is straight-forward: user has 3 trials to guess a number generated by ",(0,o.jsx)(n.code,{children:"generateRandomNumber()"})," and ",(0,o.jsx)(n.code,{children:"game()"})," function is used to display game info."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rl.setPrompt(prompt)"}),": this sets the prompt that will be prompted ",(0,o.jsx)(n.code,{children:"output"})," whenever ",(0,o.jsx)(n.code,{children:"rl.prompt()"})," is called"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rl.prompt()"}),": this function displays the prompt that is set by ",(0,o.jsx)(n.code,{children:"rl.setPrompt()"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rl.on(eventName, callback)"}),": this is used to attach an event listener. When an event is emitted, the callback function will be called:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'rl.on("line", (name) => {console.log("hello,", name)};)'}),": Emitted whenver the input stream receives an end-of-line input (\\n or Enter)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'rl.on("close", () => {console.log("good bye)};)'}),": Emitted when the readline interface is closed using ",(0,o.jsx)(n.code,{children:"rl.close()"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"guess-vowel-coding-challenge",children:"Guess Vowel Coding Challenge"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const readline = require("readline");\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nfunction generateRandomVowel() {\n  let vowels = ["a", "e", "i", "o", "u"];\n  let randomIndex = Math.floor(Math.random() * vowels.length);\n  return vowels[randomIndex];\n}\n\nlet randomVowel = generateRandomVowel();\nconsole.log("Random Vowel: " + randomVowel);\nconsole.log("---GUESS CORRECT VOWEL---");\nconsole.log("***You have 3 trials***");\n\nlet tries = 3;\nrl.setPrompt("Pick a random vowel (either lowercase or upcase): ");\nrl.prompt();\nrl.on("line", (guess) => {\n  tries--;\n  game(tries, randomVowel, guess);\n  rl.prompt();\n});\n\nfunction game(tries, randomVowel, guess) {\n  if (tries > 0) {\n    if (randomVowel == guess) {\n      console.log("YOU WON!");\n      process.exit();\n    } else {\n      console.log("INCORRECT.");\n    }\n  } else {\n    if (randomVowel == guess) {\n      console.log("YOU WON!");\n    } else {\n      console.log("YOU LOSE. THE VOWEL IS: " + randomVowel);\n    }\n    process.exit();\n  }\n}\n\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"follow-up-questions-1",children:"Follow-up questions"}),"\n",(0,o.jsx)("b",{children:(0,o.jsxs)("i",{children:["What's the difference between ",(0,o.jsx)(n.code,{children:"rl.close()"})," and ",(0,o.jsx)(n.code,{children:"process.exit()"})]})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rl.close()"})," is used to close the command-line interface and want to clean up nicely, while ```process.exit() is used to end your program, regardless of what else might be happening in your application."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript outside of a web browser."}),"\n",(0,o.jsx)(n.li,{children:"Node.js can be used for many purpose such as web development, API services, and real-time applications."}),"\n",(0,o.jsx)(n.li,{children:"Synchronous programming is where tasks are executed one after another, while asynchornous programming allows the program to move on to another tasks without waiting for the first operation to complete."}),"\n",(0,o.jsx)(n.li,{children:"Buffer is a temporary data storage that is used when moving data."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"readline"})," module provides an interface for reading data from a Reader stream."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Written and updated on Mar 25, 2024."}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://nodejs.org/en",children:"Official Node.js documentation"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>t});var o=s(7294);const i={},r=o.createContext(i);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);