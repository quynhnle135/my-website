"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1456],{8256:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var t=i(5893),r=i(1151);const l={title:"Sep 16",description:"Sat, Sep 16"},a=void 0,s={id:"learning-journal/2023/September/sep_16_23",title:"Sep 16",description:"Sat, Sep 16",source:"@site/docs/learning-journal/2023/September/sep_16_23.md",sourceDirName:"learning-journal/2023/September",slug:"/learning-journal/2023/September/sep_16_23",permalink:"/my-website/docs/learning-journal/2023/September/sep_16_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 16",description:"Sat, Sep 16"},sidebar:"tutorialSidebar",previous:{title:"Sep 14",permalink:"/my-website/docs/learning-journal/2023/September/sep_14_23"},next:{title:"Sep 17",permalink:"/my-website/docs/learning-journal/2023/September/sep_17_23"}},o={},c=[{value:"Interviewing.io",id:"interviewingio",level:3},{value:"Best Time to buy and sell stocks",id:"best-time-to-buy-and-sell-stocks",level:5},{value:"Go over Intervals coding pattern",id:"go-over-intervals-coding-pattern",level:3},{value:"Insert intervals",id:"insert-intervals",level:5},{value:"Interval intersection",id:"interval-intersection",level:5},{value:"Merge Interval",id:"merge-interval",level:5}];function _(e){const n={code:"code",h3:"h3",h5:"h5",li:"li",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"interviewingio",children:"Interviewing.io"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Quesion: Best Time to buy and sell stocks"}),"\n",(0,t.jsxs)(n.li,{children:["Feedback:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Good job coming up with brute force approach then tried to optimized the solution"}),"\n",(0,t.jsx)(n.li,{children:"Actively discussed the time complexity and space complexity of the solution for given problem"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Suggestions:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Leetcode as much as possible to improve technical skills"}),"\n",(0,t.jsx)(n.li,{children:"May check Pramp to practice coding interview"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"best-time-to-buy-and-sell-stocks",children:"Best Time to buy and sell stocks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# first approach\ndef find_best_time_bruteforce(prices):\n    max_profit = 0\n    prices_len = len(prices)\n    if prices_len <= 1:\n        return max_profit\n\n    for i in range(prices_len):\n        for j in range(i + 1, prices_len):\n            cur_price = prices[j] - prices[i]\n            max_profit = max(max_profit, cur_price)\n\n    return max_profit\n\n\n# second approach\ndef find_best_time(prices):\n    min_value = float("inf")\n    max_profit = 0\n    prices_len = len(prices)\n    if prices_len <= 1:\n        return 0\n\n    for i in range(prices_len):\n        if prices[i] < min_value:\n            min_value = prices[i]\n\n        cur_max = prices[i] - min_value\n        max_profit = max(max_profit, cur_max)\n\n    return max_profit\n\n\ndef main():\n    print(find_best_time_bruteforce(prices=[7, 1, 5, 3, 6, 4]))  # 5\n    print(find_best_time(prices=[7, 1, 5, 3, 6, 4]))  # 5\n\n    print(find_best_time_bruteforce(prices=[7, 6, 4, 3, 1]))  # 0\n    print(find_best_time(prices=[7, 6, 4, 3, 1]))  # 0\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"go-over-intervals-coding-pattern",children:"Go over Intervals coding pattern"}),"\n",(0,t.jsx)(n.h5,{id:"insert-intervals",children:"Insert intervals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def insert_interval(intervals, new_interval):\n    if not intervals:\n        return [new_interval]\n\n    result = []\n    for interval in intervals:\n        if new_interval[0] > interval[1]:\n            result.append(interval)\n        elif new_interval[1] < interval[0]:\n            result.append(new_interval)\n            new_interval = interval\n        else:\n            new_interval[0] = min(new_interval[0], interval[0])\n            new_interval[1] = max(new_interval[1], interval[1])\n    result.append(new_interval)\n    return result\n\n\ndef main():\n    print(insert_interval(intervals=[[1, 3], [6, 9]], new_interval=[2, 5]))\n    print(insert_interval(intervals=[[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]], new_interval=[4, 8]))\n\n\nif __name__ == "__main__":\n    main()\n\n\n'})}),"\n",(0,t.jsx)(n.h5,{id:"interval-intersection",children:"Interval intersection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def find_intersection(list_a, list_b):\n    if not list_a:\n        return []\n    if not list_b:\n        return []\n\n    result = []\n    i = j = 0\n    while (i < len(list_a)) and (j < len(list_b)):\n        interval_start = max(list_a[i][0], list_b[j][0])\n        interval_end = min(list_a[i][1], list_b[j][1])\n        if interval_start <= interval_end:\n            result.append([interval_start, interval_end])\n\n        if list_a[i][1] >= list_b[j][1]:\n            j += 1\n        else:\n            i += 1\n    return result\n\n\ndef main():\n    print(find_intersection(list_a=[[0, 2], [5, 10], [13, 23], [24, 25]], list_b=[[1, 5], [8, 12], [15, 24], [25, 26]]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(n.h5,{id:"merge-interval",children:"Merge Interval"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def merge_intervals(intervals):\n    if not intervals:\n        return []\n\n    # Sort intervals by their starting times\n    intervals.sort(key=lambda x: x[0])\n\n    # Append the first interval\n    merged = [intervals[0]]\n\n    for interval in intervals[1:]:\n        last_merged_interval = merged[-1]\n\n        if interval[0] <= last_merged_interval[1]:\n            last_merged_interval[1] = max(interval[1], last_merged_interval[1])\n        else:\n            merged.append(interval)\n\n    return merged\n\n\ndef main():\n    print(merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]))  # [[1, 6], [8, 10], [15, 18]]\n    print(merge_intervals([[1, 4], [4, 5]]))  # [[1, 5]]\n\n\nif __name__ == "__main__":\n    main()\n\n\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(_,{...e})}):_(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>s,a:()=>a});var t=i(7294);const r={},l=t.createContext(r);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);