"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8113],{1610:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(5893),s=t(1151);const o={title:"Oct 19, 2023"},r="Coding Journal: Oct 19, 2023",a={id:"learning-journal/October/20231019",title:"Oct 19, 2023",description:"1. What I did today",source:"@site/docs/learning-journal/October/20231019.md",sourceDirName:"learning-journal/October",slug:"/learning-journal/October/20231019",permalink:"/docs/learning-journal/October/20231019",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Oct 19, 2023"},sidebar:"tutorialSidebar",previous:{title:"Oct 18, 2023",permalink:"/docs/learning-journal/October/20231018"},next:{title:"Oct 20, 2023",permalink:"/docs/learning-journal/October/20231020"}},d={},l=[{value:"1. What I did today",id:"1-what-i-did-today",level:2},{value:"2. Questions I asked other interviewees today",id:"2-questions-i-asked-other-interviewees-today",level:2},{value:"Number of Provinces",id:"number-of-provinces",level:4},{value:"Maximum Twin Sum of a Linked List",id:"maximum-twin-sum-of-a-linked-list",level:4}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,s.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"coding-journal-oct-19-2023",children:"Coding Journal: Oct 19, 2023"}),"\n",(0,i.jsx)(e.h2,{id:"1-what-i-did-today",children:"1. What I did today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Updated and added journals that I haven't written/submitted"}),"\n",(0,i.jsxs)(e.li,{children:["Continued with Leetcode 75 (Array/String):","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Product of Array Except Self"}),"\n",(0,i.jsx)(e.li,{children:"Kids With the Greatest Number of Candies"}),"\n",(0,i.jsx)(e.li,{children:"Merge Strings Alternately"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Reviewed some graph problems to prepare coding interview questions for interviewing.io"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"2-questions-i-asked-other-interviewees-today",children:"2. Questions I asked other interviewees today"}),"\n",(0,i.jsx)(e.h4,{id:"number-of-provinces",children:"Number of Provinces"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def numberOfProvinces(isConnected):\n    provinces = 0\n    visited = [False] * len(isConnected)\n\n    for vertex in range(len(isConnected)):\n        if not visited[vertex]:\n            provinces += 1\n            check_neighbors(vertex, visited, isConnected)\n    return provinces\n\n\ndef check_neighbors(vertex, visited, isConnected):\n    visited[vertex] = True\n    for i in range(len(isConnected)):\n        if isConnected[vertex][i] == 1 and not visited[i]:\n            check_neighbors(i, visited, isConnected)\n\n\ndef main():\n    isConnected1 = [\n                        [1, 1, 0],\n                        [1, 1, 0],\n                        [0, 0, 1]\n                   ]\n\n    isConnected2 = [\n                        [1, 0, 0],\n                        [0, 1, 0],\n                        [0, 0, 1]\n                   ]\n    print(numberOfProvinces(isConnected1))  # 2\n    print(numberOfProvinces(isConnected2))  # 3\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,i.jsx)(e.h4,{id:"maximum-twin-sum-of-a-linked-list",children:"Maximum Twin Sum of a Linked List"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef pairSum(head):\n    fast = slow = head\n\n    # Traverse slow pointer to the middle node\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n\n    # Reverse the second half\n    prev = None\n    while slow:\n        next_node = slow.next\n        slow.next = prev\n        prev = slow\n        slow = next_node\n    slow = prev\n    fast = head\n    max_sum = float("-inf")\n    while fast and slow:\n        cur_sum = fast.val + slow.val\n        max_sum = max(max_sum, cur_sum)\n        fast = fast.next\n        slow = slow.next\n    return max_sum\n\n\ndef main():\n    h = ListNode(5)\n    h.next = ListNode(4)\n    h.next.next = ListNode(2)\n    h.next.next.next = ListNode(1)\n\n    h1 = ListNode(4)\n    h1.next = ListNode(2)\n    h1.next.next = ListNode(2)\n    h1.next.next.next = ListNode(3)\n\n    print(pairSum(h))  # 6\n    print(pairSum(h1))  # 7\n\n\nif __name__ == "__main__":\n    main()\n\n'})})]})}function u(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>r});var i=t(7294);const s={},o=i.createContext(s);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);