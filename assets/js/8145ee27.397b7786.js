"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9040],{1009:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>u});var i=r(5893),c=r(1151);const s={title:"Day 6"},o="Hashmap and Set",t={id:"daily-practice/leetcode-75/day-6",title:"Day 6",description:"2215. Find the Difference of Two Arrays",source:"@site/docs/daily-practice/leetcode-75/day-6.md",sourceDirName:"daily-practice/leetcode-75",slug:"/daily-practice/leetcode-75/day-6",permalink:"/my-website/docs/daily-practice/leetcode-75/day-6",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Day 6"},sidebar:"tutorialSidebar",previous:{title:"Day 5",permalink:"/my-website/docs/daily-practice/leetcode-75/day-5"},next:{title:"Day 7",permalink:"/my-website/docs/daily-practice/leetcode-75/day-7"}},a={},u=[{value:"2215. Find the Difference of Two Arrays",id:"2215-find-the-difference-of-two-arrays",level:4},{value:"1207. Unique Number of Occurences",id:"1207-unique-number-of-occurences",level:4},{value:"1657. Determine if Two Strings Are Close",id:"1657-determine-if-two-strings-are-close",level:4},{value:"2352. Equal Row and Column Pairs",id:"2352-equal-row-and-column-pairs",level:4}];function d(n){const e={code:"code",h1:"h1",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,c.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"hashmap-and-set",children:"Hashmap and Set"}),"\n",(0,i.jsx)(e.h4,{id:"2215-find-the-difference-of-two-arrays",children:"2215. Find the Difference of Two Arrays"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"The first solution of mine is a little bit lengthy because I need to check for unique number in nums1 compared to nums2 and vice versa."}),"\n",(0,i.jsx)(e.li,{children:'The second solution helps me learn about the "-" operation in list to find the unique values between two lists.'}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def find_differences_i(nums1, nums2):\n    res = []\n    nums1 = set(nums1)\n    first = []\n    second = []\n    for num in nums1:\n        if num not in nums2:\n            first.append(num)\n\n    nums2 = set(nums2)\n    for num in nums2:\n        if num not in nums1:\n            second.append(num)\n    res.append(first)\n    res.append(second)\n    return res\n\n\ndef find_differences_ii(nums1, nums2):\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    return [list(nums1 - nums2), list(nums2 - nums1)]\n\n\ndef main():\n    print(find_differences_i(nums1=[1, 2, 3], nums2=[2, 4, 6]))\n    print(find_differences_ii(nums1=[1, 2, 3], nums2=[2, 4, 6]))\n\n    print(find_differences_i(nums1=[1, 2, 3, 3], nums2=[1, 1, 2, 2]))\n    print(find_differences_ii(nums1=[1, 2, 3, 3], nums2=[1, 1, 2, 2]))\n\n\nif __name__ == "__main__":\n     main()\n     \n\n'})}),"\n",(0,i.jsx)(e.h4,{id:"1207-unique-number-of-occurences",children:"1207. Unique Number of Occurences"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from collections import defaultdict\n\n\ndef uniqueOccurrences(arr):\n    numbers = set(arr)\n    occurrences = defaultdict(int)\n    count = set()\n    for num in arr:\n        occurrences[num] += 1\n    for key in occurrences:\n        count.add(occurrences[key])\n    return len(numbers) == len(count)\n\n\ndef main():\n    print(uniqueOccurrences([1, 2, 2, 1, 1, 3]))\n    print(uniqueOccurrences([1, 2]))\n    print(uniqueOccurrences([-3, 0, 1, -3, 1, 1, 1, -3, 10, 0]))\n\n\nif __name__ == "__main__":\n    main()\n\n\n'})}),"\n",(0,i.jsx)(e.h4,{id:"1657-determine-if-two-strings-are-close",children:"1657. Determine if Two Strings Are Close"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from collections import Counter\n\n\ndef closeStrings(word1, word2):\n    if len(word1) < len(word2) or len(word1) > len(word2):\n        return False\n\n    char_dict_1 = {}\n    char_dict_2 = {}\n    for c in word1:\n        if c in char_dict_1:\n            char_dict_1[c] += 1\n        else:\n            char_dict_1[c] = 1\n\n    occurrences_1 = []\n    chars1 = []\n    for key in char_dict_1:\n        chars1.append(key)\n        occurrences_1.append(char_dict_1[key])\n\n    for c in word2:\n        if c in char_dict_2:\n            char_dict_2[c] += 1\n        else:\n            char_dict_2[c] = 1\n\n    occurrences_2 = []\n    chars2 = []\n    for key in char_dict_2:\n        chars2.append(key)\n        occurrences_2.append(char_dict_2[key])\n\n    chars1.sort()\n    chars2.sort()\n    occurrences_1.sort()\n    occurrences_2.sort()\n\n    if chars1 != chars2:\n        return False\n\n    for i in range(len(occurrences_1)):\n        if occurrences_1[i] != occurrences_2[i]:\n            return False\n    return True\n\n\ndef closeStrings_ii(word1, word2):\n    return sorted(Counter(word1).values()) == sorted(Counter(word2).values()) and set(word1) == set(word2)\n\n\ndef main():\n    # print(closeStrings("abc", "acb"))  # True\n    # print(closeStrings("a", "aa"))  # False\n    # print(closeStrings("cabbba", "abbccc"))  # True\n\n    print(closeStrings_ii("abc", "acb"))  # True\n    # print(closeStrings_ii("a", "aa"))  # False\n    # print(closeStrings_ii("cabbba", "abbccc"))  # True\n\n\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.h4,{id:"2352-equal-row-and-column-pairs",children:"2352. Equal Row and Column Pairs"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from collections import defaultdict\n\n\ndef find_equal_rows_columns(grid):\n    rows = []\n    columns = []\n    n = len(grid)\n    count = 0\n\n    # Add rows\n    for i in range(n):\n        cur_row = []\n        for j in range(n):\n            cur_row.append(grid[i][j])\n        rows.append(cur_row)\n\n    # Add columns\n    for i in range(n):\n        cur_col = []\n        for j in range(n):\n            cur_col.append(grid[j][i])\n        columns.append(cur_col)\n\n    for row in rows:\n        for column in columns:\n            if row == column:\n                count += 1\n    return count\n\n\ndef find_equal_rows_columns_ii(grid):\n    rows = [str(row) for row in grid]\n    row_dict = {}\n    for row in rows:\n        if row in row_dict:\n            row_dict[row] += 1\n        else:\n            row_dict[row] = 1\n\n    count = 0\n    # Check column\n    n = len(grid)\n\n    for i in range(n):\n        cur_col = []\n        for j in range(n):\n            cur_col.append(grid[j][i])\n        cur_col = str(cur_col)\n        if cur_col in rows:\n            count += row_dict[cur_col]\n    return count\n\n\ndef main():\n    print(find_equal_rows_columns(grid=[[3, 2, 1], [1, 7, 6], [2, 7, 7]]))  # 1\n    print(find_equal_rows_columns_ii(grid=[[3, 2, 1], [1, 7, 6], [2, 7, 7]]))  # 1\n    print(find_equal_rows_columns(grid=[[3, 1, 2, 2], [1, 4, 4, 5], [2, 4, 2, 2], [2, 4, 2, 2]]))\n    print(find_equal_rows_columns_ii(grid=[[3, 1, 2, 2], [1, 4, 4, 5], [2, 4, 2, 2], [2, 4, 2, 2]]))\n\n\nif __name__ == "__main__":\n    main()\n\n'})})]})}function l(n={}){const{wrapper:e}={...(0,c.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>t,a:()=>o});var i=r(7294);const c={},s=i.createContext(c);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);