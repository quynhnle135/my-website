"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8139],{9943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(5893),r=t(1151);const o={title:"Dec 27, 2023"},d="Coding Journal: Dec 27, 2023",s={id:"learning-journal/2023/December/20231227",title:"Dec 27, 2023",description:"- Read and summarized some articles:",source:"@site/docs/learning-journal/2023/December/20231227.md",sourceDirName:"learning-journal/2023/December",slug:"/learning-journal/2023/December/20231227",permalink:"/docs/learning-journal/2023/December/20231227",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Dec 27, 2023"},sidebar:"tutorialSidebar",previous:{title:"Dec 25, 2023",permalink:"/docs/learning-journal/2023/December/20231225"},next:{title:"Dec 28, 2023",permalink:"/docs/learning-journal/2023/December/20231228"}},a={},l=[{value:"Remove Duplicates from Sorted List",id:"remove-duplicates-from-sorted-list",level:3},{value:"Remove Duplicates from Sorted List II",id:"remove-duplicates-from-sorted-list-ii",level:3},{value:"Rotate List",id:"rotate-list",level:3},{value:"Partition List",id:"partition-list",level:3},{value:"Reverse Nodes In K Group",id:"reverse-nodes-in-k-group",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"coding-journal-dec-27-2023",children:"Coding Journal: Dec 27, 2023"}),"\n",(0,i.jsx)(n.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Read and summarized some articles:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/swizec/post_3",children:"Software engineers, exercise, health, and productivity & Why write"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/swizec/post_5",children:"How One Sentence Guides Your Career & How Many Years to Senior Engineers?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/swizec/post_7",children:"Ownership makes careers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/swizec/post_8",children:"What I Learned from Team Topologies"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_31",children:"Things You Should Never Do"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/swizec/post_9",children:"You can't stop the business, or why rewrite fail"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/swizec/post_10",children:"Life is poker"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Continue practice solving coding problems (Linked List):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove Duplicated from Sorted List"}),"\n",(0,i.jsx)(n.li,{children:"Remove Duplicated from Sorted List II"}),"\n",(0,i.jsx)(n.li,{children:"Rotate List"}),"\n",(0,i.jsx)(n.li,{children:"Partition List"}),"\n",(0,i.jsx)(n.li,{children:"Reverse Nodes in K-Group"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"2-questions-i-have",children:"2. Questions I Have"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"I don't have any question for today"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"I don't find anything challenging today"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,i.jsx)(n.h3,{id:"remove-duplicates-from-sorted-list",children:"Remove Duplicates from Sorted List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from listnode import *\n\n\ndef remove_duplicates_i(head):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n\n    cur = head\n    while cur.next:\n        if cur.val == cur.next.val:\n            cur.next = cur.next.next\n        else:\n            cur = cur.next\n    return head\n\n\nhead = ListNode(1)\nhead.next = ListNode(1)\nhead.next.next = ListNode(1)\nhead.next.next.next = ListNode(2)\nhead.next.next.next.next = ListNode(3)\nprint_list(head)\nnew_head = remove_duplicates_i(head)\nprint_list(new_head)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"remove-duplicates-from-sorted-list-ii",children:"Remove Duplicates from Sorted List II"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from listnode import print_list, ListNode\nfrom typing import Optional\n\n\ndef reverse_between(head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n    if not head or left == right:\n        return head\n    dummy = ListNode()\n    dummy.next = head\n    prev = dummy\n    for _ in range(left - 1):\n        prev = prev.next\n    cur = prev.next\n    reverse = None\n    for _ in range(right - left + 1):\n        next_node = cur.next\n        cur.next = reverse\n        reverse = cur\n        cur = next_node\n    prev.next.next = cur\n    prev.next = reverse\n    return dummy.next\n\n\nhead = ListNode(1)\nhead.next = ListNode(2)\nhead.next.next = ListNode(3)\nhead.next.next.next = ListNode(4)\nhead.next.next.next.next = ListNode(5)\nnew_head = reverse_between(head, left=2, right=4)\nprint_list(new_head)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rotate-list",children:"Rotate List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from listnode import print_list, ListNode\nfrom typing import Optional\n\n\ndef rotate_list(head: Optional[ListNode], k: int) -> Optional[ListNode]:\n    if not head or k == 0:\n        return head\n    # Calculate the length of the linked list\n    list_len = 0\n    cur = head\n    while cur:\n        cur = cur.next\n        list_len += 1\n\n    k = k % list_len\n\n    if k == 0:\n        return head\n\n    go = list_len - k\n    prev_new_head = ListNode()\n    new_head = head\n\n    # Traverse to the new head\n    for _ in range(go):\n        prev_new_head = new_head\n        new_head = new_head.next\n\n    prev_new_head.next = None\n\n    # Traverse to the tail\n    tail = new_head\n    while tail.next:\n        tail = tail.next\n\n    # Connect the tail node to the old head\n    tail.next = head\n    return new_head\n\n\nhead = ListNode(1)\nhead.next = ListNode(2)\nhead.next.next = ListNode(3)\nhead.next.next.next = ListNode(4)\nhead.next.next.next.next = ListNode(5)\nprint_list(head=head)\nnew_head = rotate_list(head=head, k=2)\nprint_list(head=new_head)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"partition-list",children:"Partition List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from listnode import print_list, ListNode\nfrom typing import Optional\n\n\ndef partition(head: Optional[ListNode], x: int) -> Optional[ListNode]:\n    before_x = ListNode()\n    after_x = ListNode()\n\n    before = before_x\n    after = after_x\n\n    cur = head\n\n    while cur:\n        if cur.val < x:\n            before_x.next = cur\n            before_x = before_x.next\n        else:\n            after_x.next = cur\n            after_x = after_x.next\n        cur = cur.next\n    before_x.next = after.next\n    after_x.next = None\n    return before.next\n\n\nhead = ListNode(1)\nhead.next = ListNode(1)\nhead.next.next = ListNode(3)\nhead.next.next.next = ListNode(2)\nhead.next.next.next.next = ListNode(5)\nhead.next.next.next.next.next = ListNode(2)\nprint_list(head=head)\nnew_head = partition(head=head, x=3)\nprint_list(head=new_head)\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reverse-nodes-in-k-group",children:"Reverse Nodes In K Group"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from listnode import ListNode, print_list\nfrom typing import Optional\n\n\ndef reverse_k_group(head: Optional[ListNode], k: int) -> Optional[ListNode]:\n    if not head or not head.next or k == 1:\n        return head\n\n    dummy = ListNode()\n    dummy.next = head\n    cur = head\n    cur_dummy = dummy\n    length = 0\n    while cur:\n        cur = cur.next\n        length += 1\n    while length >= k:\n        cur = cur_dummy.next\n        next_node = cur.next\n        for _ in range(1, k):\n            cur.next = next_node.next\n            next_node.next = cur_dummy.next\n            cur_dummy.next = next_node\n            next_node = cur.next\n        cur_dummy = cur\n        length -= k\n    return dummy.next\n\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>d});var i=t(7294);const r={},o=i.createContext(r);function d(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);