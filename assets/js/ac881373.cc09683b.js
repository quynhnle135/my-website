"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4282],{8676:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=t(5893),i=t(1151);const r={title:"Python Testing with pytest (Chap 1 + 2)"},o="Python Testing with pytest (Chap 1 + 2) - Okken",a={id:"book-reviews/testing-with-pytest/testing_with_pytest",title:"Python Testing with pytest (Chap 1 + 2)",description:"Getting Started",source:"@site/docs/book-reviews/testing-with-pytest/testing_with_pytest.md",sourceDirName:"book-reviews/testing-with-pytest",slug:"/book-reviews/testing-with-pytest/testing_with_pytest",permalink:"/docs/book-reviews/testing-with-pytest/testing_with_pytest",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Python Testing with pytest (Chap 1 + 2)"},sidebar:"tutorialSidebar",previous:{title:"Python Testing with Pytest",permalink:"/docs/category/python-testing-with-pytest"},next:{title:"Python Programming Exercises, Gently Explained",permalink:"/docs/book-reviews/python_programming_exercise"}},c={},d=[{value:"Getting Started",id:"getting-started",level:3},{value:"Key notes in Chapter 1:",id:"key-notes-in-chapter-1",level:3},{value:"<strong>Set up and install pytest</strong>",id:"set-up-and-install-pytest",level:3},{value:"Chapter 2: Writing Test Functions",id:"chapter-2-writing-test-functions",level:3},{value:"Key Notes in Chapter 2:",id:"key-notes-in-chapter-2",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"python-testing-with-pytest-chap-1--2---okken",children:"Python Testing with pytest (Chap 1 + 2) - Okken"}),"\n",(0,s.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"What is pip because I always use pip whenever it comes to install a new package, library, or framework?"})}),"\n",(0,s.jsxs)(n.p,{children:["=> Answer: ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)("mark",{children:"pip is a package management system which is used to install and manage software packages."})})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-notes-in-chapter-1",children:"Key notes in Chapter 1:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"pytest is installed into a virtual environment with the following steps (for Mac):"}),"\n",(0,s.jsx)(n.p,{children:"(*) Disclaimer: I'm using Pycharm and looks like there's already a virtual environment venv set up. However, I can always create a new virtual environment with different name if needed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"(*) Why do we need virtual environment?"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["=> Answer: ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)("mark",{children:"To keep dependencies required by different projects separated by creating isolated Python environment for them."})})})," For example, there's one project that I need Django and Django framework to work with. However, the other one doesn't require any Django but Spotipy instead. Therefore, it's necessary to create a virtual environment for each project."]}),"\n",(0,s.jsx)(n.h3,{id:"set-up-and-install-pytest",children:(0,s.jsx)(n.strong,{children:"Set up and install pytest"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"python3 -m venv myvenv (your virtual environment's name)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"source myvenv/bin/activate (activate your virtual environment)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"pip install pytest (install pytest)"})}),"\n",(0,s.jsxs)(n.p,{children:["(*) ",(0,s.jsx)(n.code,{children:"pytest"})," can be run in several different ways:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pytest"}),": With no argument, pytest searches the local repository and subdirectories for tests."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pytest <filename>"}),": Run the tests in that file."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pytest <filename1> <filename2>"}),": Run tests in multiple files."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pytest <dirname>"}),": Run tests in a particular directory"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["(*) To make sure your tests are being tested and run, ",(0,s.jsx)(n.em,{children:"pay attention to naming convention:"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Test files should be named ",(0,s.jsx)(n.code,{children:"test_<something>.py"})," or ",(0,s.jsx)(n.code,{children:"<something>_test.py"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Test methods or functions should be named ",(0,s.jsx)(n.code,{children:"test_<something>"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Test classes should be ",(0,s.jsx)(n.code,{children:"Test<Something>"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Code Snippet"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def test_passing():\n    assert (1, 2, 3) == (1, 2, 3)\n\n# Make this test fail on purpose\ndef test_failing():\n    assert (1, 2, 3) == (3, 2, 1)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"chapter-2-writing-test-functions",children:"Chapter 2: Writing Test Functions"}),"\n",(0,s.jsxs)(n.p,{children:["Install ",(0,s.jsx)(n.code,{children:"cards_proj"})," as instructed in the book I encountered some errors while running the tests. At first, I use ",(0,s.jsx)(n.code,{children:"pytest"})," as my command:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The current Python I'm using is Python 3.11.0. However, if I run ",(0,s.jsx)(n.code,{children:"pytest"})," itself only, it will be associated with different Python interpreter than the one I'm using."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["I doubt it happens because of the project structure and try to make it correct, but it still ended up with ",(0,s.jsx)(n.code,{children:"ModuleNotFound error"}),". Although I tried to import the Card class with specific, it couldn't work."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["I changed my command to ",(0,s.jsx)(n.code,{children:"python3 -m pytest"}),"., everything works perfectly. Because ",(0,s.jsx)(n.code,{children:"python3"})," makes sure that all the environment settings and dependencies are taken into account. I'm using Python3 as well so it makes more sense."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Tests for cards_procj"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from cards import Card\n\n\n# Test when create a Card object without giving it any argument.\ndef test_default():\n    c = Card()\n    assert c.summary == None\n    assert c.owner == None\n    assert c.state == "todo"\n    assert c.id == None\n\n\n# Test when creating a Card object with arguments.\ndef test_field_access():\n    c = Card("something", "brian", "todo", 123)\n    assert c.summary == "something"\n    assert c.owner == "brian"\n    assert c.state == "todo"\n    assert c.id == 123\n\n\n# Test if two Card objects with the same attributes are equal or not\ndef test_equality():\n    c1 = Card("something", "brian", "todo", 123)\n    c2 = Card("something", "brian", "todo", 123)\n    assert c1 == c2\n\n\n# Test if two Card objects with the same attributes but different ids are equal or not.\n# Because in Card class, id cannot be compared.\ndef test_equality_with_diff_ids():\n    c1 = Card("something", "brian", "todo", 123)\n    c2 = Card("something", "brian", "todo", 4567)\n    assert c1 == c2\n\n\n# Test if two Cards objects are different if given different attributes\ndef test_inequality():\n    c1 = Card("something", "brian", "todo", 123)\n    c2 = Card("completely different", "okken", "done", 123)\n    assert c1 != c2\n\n\n# Test from_dict() function in Card class\ndef test_from_dict():\n    c1 = Card("something", "brian", "todo", 123)\n    c2_dict = {\n        "summary": "something",\n        "owner": "brian",\n        "state": "todo",\n        "id": 123\n    }\n    c2 = Card.from_dict(c2_dict)\n    assert c1 == c2\n\n\n# Test to_dict() function in Card class\ndef test_to_dict():\n    c1 = Card("something", "brian", "todo", 123)\n    c2 = c1.to_dict()\n    c2_expected = {\n        "summary": "something",\n        "owner": "brian",\n        "state": "todo",\n        "id": 123\n    }\n    assert c2 == c2_expected\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"One thing about pytest is its assert statements are different from unittest's:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"assert something"})," is ",(0,s.jsx)(n.code,{children:"assertTrue(something)"})," in unittest"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"assert not something"})," is ",(0,s.jsx)(n.code,{children:"assertFlase(something)"})," in unittest"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"assert a == b"})," is ",(0,s.jsx)(n.code,{children:"assertEqual(a, b)"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"assert a != b"})," is ",(0,s.jsx)(n.code,{children:"assertNotEqual(a, b)"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Moreover, you can run ",(0,s.jsx)(n.code,{children:"python3 -m pytest --vv"})," to show more details if your test fails."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["(*) Failing with ",(0,s.jsx)(n.code,{children:"pytest.fail()"})," and Exceptions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Basically for this section, it tells you that if you want to add comments to explain how this test fail or you can expect this test is failed and want to explain the reason while running your test, you can use ",(0,s.jsx)(n.code,{children:"pytest.fail()"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom cards import Card\n\n\ndef test_with_fail():\n    c1 = Card("sit down", "brian")\n    c2 = Card("do sonmething", "okken")\n    if c1 != c2:\n        pytest.fail("they don\'t match")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["=> For the test above, I know that c1 and c2 will be different because their first arguments are different. Adding ",(0,s.jsx)(n.code,{children:"pytest.fail()"}),' tell me "they don\'t match" in the short test summary: ',(0,s.jsx)(n.code,{children:"FAILED test_alt_"}),(0,s.jsx)(n.a,{href:"http://fail.py",children:(0,s.jsx)(n.code,{children:"fail.py"})}),(0,s.jsx)(n.code,{children:"::test_with_fail - Failed: they don't match"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You use ",(0,s.jsx)(n.code,{children:"pytest.raises()"})," to test for expected exceptions."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import cards\nimport pytest\n\n\ndef test_no_path_raises():\n    with pytest.raises(TypeError):\n        cards.CardsDB()\n\n\ndef test_raises_with_info():\n    match_regex = "missing 1 .* positional argument"\n    with pytest.raises(TypeError, match=match_regex):\n        cards.CardsDB()\n\n\ndef test_raises_with_info_alt():\n    with pytest.raises(TypeError) as exc_info:\n        cards.CardsDB()\n    expected = "missing 1 required argument"\n    assert expected in str(exc_info.value)\n'})}),"\n",(0,s.jsx)(n.p,{children:"(*) Structuring Test Functions: Arrange-Act-Assert"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Arrange: get ready to something"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Act: do something"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Assert: check to see if it worked"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from cards import Card\n\n\ndef test_to_dict():\n    # Arrange a Card object with known content\n    c1 = Card("something", "brian", "todo", 123)\n    # Act by calling to_dict() function with c1 object and assign it to c2\n    c2 = c1.to_dict()\n    expected_result = {\n        "summary": "something",\n        "owner": "brian",\n        "state": "todo",\n        "id": 123\n    }\n    # Assert: check if they are equal\n    assert c2 == expected_result\n'})}),"\n",(0,s.jsx)(n.h3,{id:"key-notes-in-chapter-2",children:"Key Notes in Chapter 2:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tests can fail from assertion failures, from calls to fail(), or from any uncaught exception"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pytest.raises()"})," is used to test for expected exceptiojns"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A great way to structure tests is called Given-When-Then or Arrange-Act-Assert"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Running small subsets of tests is handy while debugging, and pytest allows you to run a small batch of tests in many ways:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Single test method: ",(0,s.jsx)(n.code,{children:"python3 -m pytest path/test_module::TestClass::test_method"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["All tests in a class: ",(0,s.jsx)(n.code,{children:"python3 -m pytest path/test_module::TestClass"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"the -vv command-line flag shows even more information during test failures."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);