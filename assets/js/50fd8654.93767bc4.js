"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9338],{4754:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=i(5893),t=i(1151);const a={title:"Sep 28, 2023"},d="Coding Journal: Sep 28, 2023",s={id:"learning-journal/September/20230928",title:"Sep 28, 2023",description:"Graph review",source:"@site/docs/learning-journal/September/20230928.md",sourceDirName:"learning-journal/September",slug:"/learning-journal/September/20230928",permalink:"/docs/learning-journal/September/20230928",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 28, 2023"},sidebar:"tutorialSidebar",previous:{title:"Sep 27, 2023",permalink:"/docs/learning-journal/September/20230927"},next:{title:"Sep 29, 2023",permalink:"/docs/learning-journal/September/20230929"}},o={},p=[{value:"Graph review",id:"graph-review",level:3},{value:"BFS implementation",id:"bfs-implementation",level:4},{value:"DFS implementation",id:"dfs-implementation",level:4},{value:"Check existing path",id:"check-existing-path",level:4},{value:"Check cycle in undirected graph",id:"check-cycle-in-undirected-graph",level:4},{value:"Find the level of each node",id:"find-the-level-of-each-node",level:4}];function h(n){const e={code:"code",h1:"h1",h3:"h3",h4:"h4",pre:"pre",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"coding-journal-sep-28-2023",children:"Coding Journal: Sep 28, 2023"}),"\n",(0,r.jsx)(e.h3,{id:"graph-review",children:"Graph review"}),"\n",(0,r.jsx)(e.h4,{id:"bfs-implementation",children:"BFS implementation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def breadth_first_search(graph, start):\n    queue = [start]\n    visited = set()\n    traversal = []\n\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return traversal\n\n\ndef bfs(graph, start):\n    return bfs_helper(graph=graph, queue=[start], visited=set())\n\n\ndef bfs_helper(graph, queue, visited):\n    if not queue:\n        return []\n    node = queue.pop(0)\n    if node in visited:\n        return bfs_helper(graph, queue, visited)\n\n    visited.add(node)\n    for neighbor in graph[node]:\n        queue.append(neighbor)\n    return [node] + bfs_helper(graph, queue, visited)\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['D', 'E'],\n        'C': ['F'],\n        'D': [],\n        'E': ['F'],\n        'F': []\n    }\n    print(breadth_first_search(graph, 'A'))\n    print(bfs(graph, 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n\n"})}),"\n",(0,r.jsx)(e.h4,{id:"dfs-implementation",children:"DFS implementation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def dfs(graph, start):\n    return dfs_helper(graph, [start], set(), [])\n\n\ndef dfs_helper(graph, stack, visited, traversal):\n    if not stack:\n        return []\n\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                stack.append(neighbor)\n                dfs_helper(graph, stack, visited, traversal)\n    return traversal\n\n\ndef dfs_iterative(graph, start):\n    visited = set()\n    stack = [start]\n    traversal = []\n\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n\n        for neighbor in reversed(graph[node]):\n            if neighbor not in visited:\n                stack.append(neighbor)\n    return traversal\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    another_graph = {\n        0: [1, 3],\n        1: [0, 2],\n        2: [1, 3],\n        3: [0, 2]\n    }\n\n    print(dfs_iterative(graph, 'A'))\n    print(dfs_iterative(another_graph, 0))\n    print(dfs(graph, 'A'))\n    print(dfs(another_graph, 0))\n\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"check-existing-path",children:"Check existing path"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def check_existing_path(graph, start, end):\n    if start not in graph or end not in graph:\n        return False\n    visited = set()\n    queue = [start]\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            if node == end:\n                return True\n            visited.add(node)\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return False\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    print(check_existing_path(graph, 'A', 'E'))\n    print(check_existing_path(graph, 'A', 'C'))\n    print(check_existing_path(graph, 'C', 'F'))\n    print(check_existing_path(graph, 'A', 'W'))\n    print(check_existing_path(graph, 'W', 'A'))\n    print(check_existing_path(graph, 'E', 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"check-cycle-in-undirected-graph",children:"Check cycle in undirected graph"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def has_cycle(graph):\n    visited = set()\n\n    def bfs(start):\n        queue = [(start, None)]\n        while queue:\n            node, parent = queue.pop(0)\n            if node in visited:\n                return True\n            visited.add(node)\n            for neighbor in graph.get(node, []):\n                if neighbor != parent:\n                    queue.append((neighbor, node))\n        return False\n\n    for node in graph:\n        if bfs(node):\n            return True\n    return False\n\n\ndef main():\n    graph1 = {\n        'A': ['B', 'D'],\n        'B': ['A', 'C'],\n        'C': ['B'],\n        'D': ['A']\n    }\n    print(has_cycle(graph1))  # Expected output: False\n\n    graph2 = {\n        'A': ['B', 'D'],\n        'B': ['A', 'C', 'D'],\n        'C': ['B'],\n        'D': ['A', 'B']\n    }\n    print(has_cycle(graph2))  # Expected output: True\n\n    graph3 = {\n        'A': ['B'],\n        'B': ['A', 'C', 'D'],\n        'C': ['B', 'D'],\n        'D': ['B', 'C']\n    }\n    print(has_cycle(graph3))  # Expected output: True\n\n\nif __name__ == \"__main__\":\n    main()\n\n"})}),"\n",(0,r.jsx)(e.h4,{id:"find-the-level-of-each-node",children:"Find the level of each node"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def find_level_of_each_node(graph, start):\n    visited = set()\n    queue = [(start, 0)]\n    node_levels = {}\n\n    while queue:\n        node, level = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            node_levels[node] = level\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append((neighbor, level + 1))\n    return node_levels\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    print(find_level_of_each_node(graph, 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n"})})]})}function l(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>s,a:()=>d});var r=i(7294);const t={},a=r.createContext(t);function d(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);