"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7563],{4218:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>o});var i=s(5893),a=s(1151);const l={title:"Basic and Fundamental JavaScript Overview"},r="Basic and Fundamental JavaScript Overview",t={id:"tech-blogs/become-fullstack-developer/basic_js",title:"Basic and Fundamental JavaScript Overview",description:"Scope and Variables in JavaScript",source:"@site/docs/tech-blogs/become-fullstack-developer/basic_js.md",sourceDirName:"tech-blogs/become-fullstack-developer",slug:"/tech-blogs/become-fullstack-developer/basic_js",permalink:"/docs/tech-blogs/become-fullstack-developer/basic_js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Basic and Fundamental JavaScript Overview"},sidebar:"tutorialSidebar",previous:{title:"Become A Full-stack Developer",permalink:"/docs/category/become-a-full-stack-developer"},next:{title:"CSS Interview Prepartion",permalink:"/docs/tech-blogs/become-fullstack-developer/css_review"}},c={},o=[{value:"Scope and Variables in JavaScript",id:"scope-and-variables-in-javascript",level:2},{value:"Variables",id:"variables",level:3},{value:"Scope",id:"scope",level:3},{value:"Hoisting",id:"hoisting",level:2},{value:"ES6 Features",id:"es6-features",level:2},{value:"Synchronous programming vs Asynchronous programming",id:"synchronous-programming-vs-asynchronous-programming",level:2},{value:"DOM - Document Object Model",id:"dom---document-object-model",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"basic-and-fundamental-javascript-overview",children:"Basic and Fundamental JavaScript Overview"}),"\n",(0,i.jsx)(n.h2,{id:"scope-and-variables-in-javascript",children:"Scope and Variables in JavaScript"}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There are three keywords for declaring variables in JavaScript: ",(0,i.jsx)("b",{children:(0,i.jsx)("mark",{children:"const, let, and var"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("mark",{children:"var"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Before ES6 (JavaScript latest version), ",(0,i.jsx)(n.code,{children:"var"})," was the primary way to declare variables."]}),"\n",(0,i.jsxs)(n.li,{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"var"})," are ",(0,i.jsx)("mark",{children:"function-scoped or global-scoped."})]}),"\n",(0,i.jsxs)(n.li,{children:["These ",(0,i.jsx)(n.code,{children:"var"})," variables can be re-declared and updated."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    var name = "John Doe";\n    // console.log(name);\n    var name = "Quinn Le"; // Re-declaring is allowed\n    console.log(name);\n    name = "Another name"; // Updating is allowed\n    console.log(name);\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("mark",{children:"let"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let"})," allows you to declare block-scoped or block-level variables."]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)("mark",{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"let"})," can be updated but not re-declared."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    let myName = "Quinn Le";\n    console.log(myName);\n    myName = "Jane Doe"; // Updating is allowed\n    console.log(myName);\n    // let myName = "Another name"; // Re-declaring is not allowed\n    console.log(myName);\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("mark",{children:"const"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"const"})," remain ",(0,i.jsx)("mark",{children:"constant"}),", which means they cannot be updated or re-declared."]}),"\n",(0,i.jsxs)(n.li,{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"const"})," are ",(0,i.jsx)("mark",{children:"block-scoped"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    const PI = 3.14;\n    console.log(PI);\n    // PI = 3.14159; // Updating is not allowed\n    // console.log(PI)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scope",children:"Scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There are three main scopes in JavaScript: ",(0,i.jsx)("mark",{children:"global scope, functional/local scope, and block scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("mark",{children:"Global scope"}),": Variables declared outside any function or block become globally accessible from any part of the code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("mark",{children:"Function/local scope"}),": Variables declared within a function are local to that function and cannot be accessed from outside."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("mark",{children:"Block scope"}),": Block scope restricts the visibility of a variable to the block in which it's declared such as if-else conditions, loops, etc."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("b",{children:"(*) What is the difference between DECLARE and INITIALIZE?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Declaration ",(0,i.jsx)("mark",{children:"introduce"})," the variable into the program ",(0,i.jsx)("mark",{children:"without assigning any value to them"})]}),"\n",(0,i.jsxs)(n.li,{children:["Initialization ",(0,i.jsx)("mark",{children:"assigns"})," values to the variables, making them ready to use."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"hoisting",children:"Hoisting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Hoisting in JavaScript is the process where ",(0,i.jsx)("mark",{children:"the JavaScript interpreter moves all variables and function declarations to the top of their containing scope before the scope has actually executed"}),". For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    console.log(myVar); // undefined\n    var myVar = "This is my variable";\n    console.log(myVar); // This is my variable\n\n    console.log("Before defining myFunction")\n    myFunction();\n    function myFunction() {\n        console.log("This is my function.")\n    }\n\n    myFunction()\n\n    >>> undefined\n    >>> This is my variable\n    >>> Before defining myFunction\n    >>> This is my function.    \n    >>> This is my function.\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For variables declared with ",(0,i.jsx)(n.code,{children:"var"}),", hoisting moves their declarations to the top of their scope, but not their initialization \u2192 ",(0,i.jsxs)("mark",{children:["Until they are initialized, their value is ",(0,i.jsx)("b",{children:"undefined"})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"}),", although their declarations are technically hoisted but if you access them before declaration, it will result in ",(0,i.jsx)(n.code,{children:"ReferenceError"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"With functions, hoisting works differently:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Function declarations: ",(0,i.jsx)("mark",{children:"are fully hoisted"}),", which means both declaration and the definition are moved to the top of their containing scope \u2192 ",(0,i.jsx)("mark",{children:"Allow you to call the function before it's declared and still return the expected output."})]}),"\n",(0,i.jsxs)(n.li,{children:["Function expression: if a function is assigned to a variable, the variable declaration is hoisted but the assignment of the function is not hoisted \u2192 ",(0,i.jsx)("mark",{children:"If you try to call it before it's defined, it'll result in errors"}),". For example:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    notHoistedFunction(); // TypeError: notHoistedFunction is not a function\n\n    var notHoistedFunction = function() {\n    console.log("This function expression is not hoisted.");\n    };\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"es6-features",children:"ES6 Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["ES6 is the newest version of JavaScript which was introduced in 2015, offering more powerful and easier features:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Arrow functions: They are especially used for short functions. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    // arrow function\n    const adding = (a, b) => a + b;\n\n    console.log(adding(10, 20)) // 30\n\n    const doubling = (a) => a * 2;\n    console.log(doubling(10)) // 20\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Template literals: Allow easier string concatenaton."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    // template literals\n    const greeting = (name) => console.log(`hello, ${name}`);\n    greeting("Quinn")\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Default parameter: Functions can have default values for parameters that aren't passed when the function is called."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Destructing assignment."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Rest parameters and spread operations."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Classes."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Modules."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Promises: Promise is a way to handle asynchronous operations, providing a cleaner and more flexible way to organize callback-based code."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Enhance object literals."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"synchronous-programming-vs-asynchronous-programming",children:"Synchronous programming vs Asynchronous programming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In ",(0,i.jsx)("b",{children:"synchronous programming"}),", tasks are executed one after another. If a task is waiting for some I/O operation to complete, the program execution ",(0,i.jsx)("b",{children:"blocks or waits"})," until that task is finished."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"Asynchronous programming in Node.js"})," allows the program to initiate the I/O operation and then move on to another task without waiting for the first operation to complete \u2192 Once the operation is finished, a callback function, promise, or an async/await pattern is used to handle the result, allowing the program to continue its workflow."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"dom---document-object-model",children:"DOM - Document Object Model"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DOM is a programming interface for web documents. It represents the page so that programs can change the document's structure, style, and content \u2192 ",(0,i.jsx)("mark",{children:"DOM represents the documents as nodes and objects; that way, programming languages can interact with the page."})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"Manipulating DOM"}),": JavaScript can be used to manipulate DOM, allowing dynamical changes to the content, structure, and style of a document:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)("i",{children:"Accessing elements"})}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    document.getElementById('id'); // Access an element by its ID\n    document.getElementsByTagName('tag'); // Access elements by their tag name\n    document.getElementsByClassName('class'); // Access elements by their class name\n    document.querySelector('.class'); // Access the first element that matches a CSS selector\n    document.querySelectorAll('.class'); // Access all elements that match a CSS selector\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)("i",{children:"Changing elements"})}),": Once you have access to elements, you can modify their properties, attributes, and content:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    let element = document.getElementById('id');\n    element.innerHTML = 'New content'; // Change the inner HTML of an element\n    element.setAttribute('attr', 'value'); // Set an attribute value\n    element.style.color = 'red'; // Change the style directly\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)("i",{children:"Creating and removing elements"})}),": JavaScript allows you to dynamically create new elements and remove existing ones:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    // Create a new element\n    let newElement = document.createElement('div');\n    newElement.innerHTML = 'Hello, World!';\n    document.body.appendChild(newElement); // Add the new element to the body\n\n    // Remove an element\n    let oldElement = document.getElementById('id');\n    oldElement.parentNode.removeChild(oldElement);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)("i",{children:"Event handling"})}),": You can respond to user actions by adding event listeners to elements:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    let button = document.getElementById('myButton');\n    button.addEventListener('click', function() {\n        alert('Button clicked!');\n    });\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There are three types of variabels in JavaScript: ",(0,i.jsx)(n.code,{children:"const"}),", ",(0,i.jsx)(n.code,{children:"let"}),", and ",(0,i.jsx)(n.code,{children:"var"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"const"})," variables cannot be updated after initialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let"})," can be updated after initialization but cannot be re-declared"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"var"})," can be updated and re-declated"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"There are three variable scopes: global scope, function/local scope, and block scope."}),"\n",(0,i.jsxs)(n.li,{children:["Hoisting is the process where the JavaScript interperter moves all variables and function declarations to the top of their containing scope before the scope has actually executed \u2192 Simply speaking to my understand, there are some cases (mostly ",(0,i.jsx)(n.code,{children:"var"})," variables and functions) can be accessed before being initialized (assigned value)."]}),"\n",(0,i.jsx)(n.li,{children:"Synchronous programming means the program has to execute tasks one by one and in order, which means the next one can only be executed when the previous one is completed. Meanwhile, asynchronous programming can work on other tasks while there's tasks executing or taking longer to complete compared to others."}),"\n",(0,i.jsx)(n.li,{children:"DOM - Document Object Model, represents the documents as objects so that programming languagel like JavaScript can interact with page's elements."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added and updated on Mar 25, 2024."}),"\n",(0,i.jsxs)(n.li,{children:["Some resources I used:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=DHGhFJZLKMs&t=193s",children:"What is HTML, CSS, and JavaScript?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.w3schools.com/js/js_scope.asp",children:"JavaScript scope"})}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>r});var i=s(7294);const a={},l=i.createContext(a);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);