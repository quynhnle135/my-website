"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[820],{30:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var r=i(5893),t=i(1151);const s={title:"Oct 02, 2023"},a="Coding Journal: Oct 02, 2023",d={id:"learning-journal/2023/October/20231002",title:"Oct 02, 2023",description:"Breadth first search review",source:"@site/docs/learning-journal/2023/October/20231002.md",sourceDirName:"learning-journal/2023/October",slug:"/learning-journal/2023/October/20231002",permalink:"/docs/learning-journal/2023/October/20231002",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Oct 02, 2023"},sidebar:"tutorialSidebar",previous:{title:"Oct 10, 2023",permalink:"/docs/learning-journal/2023/October/20231001"},next:{title:"Oct 03, 2023",permalink:"/docs/learning-journal/2023/October/20231003"}},c={},o=[{value:"Breadth first search review",id:"breadth-first-search-review",level:2},{value:"Depth first search review",id:"depth-first-search-review",level:2},{value:"Number of provinces",id:"number-of-provinces",level:2},{value:"Detect cycle in a directed graph",id:"detect-cycle-in-a-directed-graph",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"coding-journal-oct-02-2023",children:"Coding Journal: Oct 02, 2023"}),"\n",(0,r.jsx)(n.h2,{id:"breadth-first-search-review",children:"Breadth first search review"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def breadth_first_search(graph):\n    queue = []\n    visited = set()\n    result = []\n    for key in graph:\n        if key not in visited:\n            queue.append(key)\n            while queue:\n                node = queue.pop(0)\n                if node not in visited:\n                    visited.add(node)\n                    result.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n    return result\n"})}),"\n",(0,r.jsx)(n.h2,{id:"depth-first-search-review",children:"Depth first search review"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def depth_first_search(graph):\n    stack = []\n    visited = set()\n    result = []\n    for vertex in graph:\n        if vertex not in visited:\n            stack.append(vertex)\n            while stack:\n                node = stack.pop()\n                if node not in visited:\n                    visted.add(node)\n                    result.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            stack.append(neighbor)\n    return result\n"})}),"\n",(0,r.jsx)(n.h2,{id:"number-of-provinces",children:"Number of provinces"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def countProvinces(provinces):\n    count = 0\n    n = len(provinces)\n    visited = [0] * n\n    queue = []\n    for i in range(n):\n        if visited[i] == 0:\n            count += 1\n            queue.append(i)\n            while queue:\n                node = queue.pop(0)\n                visited[node] = 1\n                for j in range(n):\n                    if provinces[node][j] == 1 and visited[j] == 0:\n                        queue.append(j)\n    return count\n\n\ndef main():\n    provinces1 = [[1, 0, 0, 1],\n                  [0, 1, 1, 0],\n                  [0, 1, 1, 1],\n                  [1, 0, 1, 1]]\n\n    provinces2 = [[1, 0, 0,  0],\n                 [0, 1, 1, 0],\n                 [0, 1, 1, 0],\n                 [0, 0, 0, 1]]\n\n    print(countProvinces(provinces1))\n    print(countProvinces(provinces2))\n\nif __name__ == "__main__":\n    main()\n\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"detect-cycle-in-a-directed-graph",children:"Detect cycle in a directed graph"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n\n    def addEdge(self, v, w):\n        self.graph[v].append(w)\n        self.graph[w].append(v)\n\n    def isCyclic(self):\n        visited = [False] * self.V\n        for i in range(self.V):\n            if visited[i] == False:\n                if self.isCyclicUtil(i, visited, -1) == True:\n                    return True\n        return False\n\n    def isCyclicUtil(self, v, visited, parent):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                if self.isCyclicUtil(i, visited, v):\n                    return True\n            elif parent != i:\n                return True\n        return False\n\n\ndef main():\n    g = Graph(5)\n    g.addEdge(1, 0)\n    g.addEdge(1, 2)\n    g.addEdge(2, 0)\n    g.addEdge(0, 3)\n    g.addEdge(3, 4)\n    print(g.graph)\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>a});var r=i(7294);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);