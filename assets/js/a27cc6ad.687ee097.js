"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[798],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=d(n),f=o,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:o,l[1]=a;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={title:"Sep 26"},l=void 0,a={unversionedId:"leetcode-grinding/2023/September/sep_26_23",id:"leetcode-grinding/2023/September/sep_26_23",title:"Sep 26",description:"316. Remove Duplicate Letters",source:"@site/docs/leetcode-grinding/2023/September/sep_26_23.md",sourceDirName:"leetcode-grinding/2023/September",slug:"/leetcode-grinding/2023/September/sep_26_23",permalink:"/my-website/docs/leetcode-grinding/2023/September/sep_26_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode-grinding/2023/September/sep_26_23.md",tags:[],version:"current",frontMatter:{title:"Sep 26"},sidebar:"tutorialSidebar",previous:{title:"Sep 04",permalink:"/my-website/docs/leetcode-grinding/2023/September/sep_04_23"},next:{title:"Tutorial - Basics",permalink:"/my-website/docs/category/tutorial---basics"}},s={},d=[{value:"316. Remove Duplicate Letters",id:"316-remove-duplicate-letters",level:3},{value:"Notes:",id:"notes",level:4},{value:"151. Reverese words in a string",id:"151-reverese-words-in-a-string",level:3},{value:"Notes:",id:"notes-1",level:4},{value:"114. Flatten Binary Tree to Linked List",id:"114-flatten-binary-tree-to-linked-list",level:3},{value:"Notes:",id:"notes-2",level:4},{value:"222. Count complete tree nodes",id:"222-count-complete-tree-nodes",level:3},{value:"Notes:",id:"notes-3",level:4},{value:"111. Minimum depth of binary tree",id:"111-minimum-depth-of-binary-tree",level:3},{value:"Notes:",id:"notes-4",level:4},{value:"404. Sum of left leaves",id:"404-sum-of-left-leaves",level:3},{value:"Notes:",id:"notes-5",level:4}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"316-remove-duplicate-letters"},"316. Remove Duplicate Letters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def removeDuplicateLetters(s):\n    result = ""\n    last_occ = {}\n    stack = []\n    visited = set()\n    for i in range(len(s)):\n        last_occ[s[i]] = i\n\n    for i in range(len(s)):\n        if s[i] not in visited:\n            while stack and stack[-1] > s[i] and last_occ[stack[-1]] > i:\n                visited.remove(stack.pop())\n            visited.add(s[i])\n            stack.append(s[i])\n    for letter in stack:\n        result += letter\n    return result\n\n\ndef main():\n    print(removeDuplicateLetters("bcabc"))\n    print(removeDuplicateLetters("cbacdcbc"))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h4",{id:"notes"},"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For this problem, the main thing that I need to pay attention to is the lexicographical order"),(0,o.kt)("li",{parentName:"ul"},'An example of lexicographical order is that "abcd" is smaller than "abef" (based on the length and alphebetical order)'),(0,o.kt)("li",{parentName:"ul"},"However, the problem requires to remove the duplicate letter in order, not remove the duplicate letters and rearrange to the smallest possible lexicographical order. That's why I need to use stack and queue to keep track and compare ")),(0,o.kt)("h3",{id:"151-reverese-words-in-a-string"},"151. Reverese words in a string"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import re\n\n\ndef reverse_word(word, start, end):\n    while start < end:\n        temp = word[end]\n        word[end] = word[start]\n        word[start] = temp\n        start += 1\n        end -= 1\n\n\ndef reverse_words_in_a_string(sentence):\n    sentence = re.sub(" +", " ", sentence.strip())\n    sentence = list(sentence)\n    reverse_word(sentence, 0, len(sentence) - 1)\n    start = end = 0\n    while start < len(sentence):\n        while end < len(sentence) and sentence[end] != " ":\n            end += 1\n        reverse_word(sentence, start, end - 1)\n        start = end = end + 1\n    return "".join(sentence)\n\n\ndef reverse_words_in_a_string_ii(s):\n    s = re.sub(" +", " ", s.strip())\n    start = end = 0\n    words = []\n    word = ""\n    while start < len(s):\n        while end < len(s) and s[end] != " ":\n            word += s[end]\n            end += 1\n        words.append(word)\n        word = ""\n        start = end = end + 1\n    return " ".join(words[::-1])\n\n\ndef main():\n    s = "the sky is blue"\n    print(reverse_words_in_a_string(s), len(reverse_words_in_a_string(s)))\n    print(reverse_words_in_a_string_ii(s), len(reverse_words_in_a_string_ii(s)))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h4",{id:"notes-1"},"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go over the second approach which is a little bit similar to the first one but I don't need to implement another helper function"),(0,o.kt)("li",{parentName:"ul"},'re.sub(" +", " ", s.strip()) is a key point here to make the solution shorter and more effective.')),(0,o.kt)("h3",{id:"114-flatten-binary-tree-to-linked-list"},"114. Flatten Binary Tree to Linked List"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef flatten_binary_tree(root):\n    current = root\n    while current:\n        if current.left:\n            last = current.left\n            while last.right:\n                last = last.right\n            last.right = current.right\n            current.right = current.left\n            current.left = None\n        current = current.right\n    \n\n")),(0,o.kt)("h4",{id:"notes-2"},"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"I still comtemplate this problem since it's a little bit confusing."),(0,o.kt)("li",{parentName:"ul"},"It requires to do everythin in-place so there's no need to return anything. How can I print out the result? Should I print it as a linked list or a Tree? "),(0,o.kt)("li",{parentName:"ul"},"Basuically, does this exercise requrie to move every node in the left branch to right branch but is there any order that it's looking for? ")),(0,o.kt)("h3",{id:"222-count-complete-tree-nodes"},"222. Count complete tree nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef count_complete_nodes(root):\n    return inorder_traversal_count(root, 0)\n\n\ndef inorder_traversal_count(current, count):\n    if current:\n        count += 1\n        count = inorder_traversal_count(current.left, count)\n        count = inorder_traversal_count(current.right, count)\n    return count\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.left.left = TreeNode(20)\n    root.left.left.left = TreeNode(15)\n    root.left.left.left.left = TreeNode(7)\n    print(count_complete_nodes(root))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h4",{id:"notes-3"},"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"I applied Inorder Traversal since it's count the current node first then move on to its left and right children")),(0,o.kt)("h3",{id:"111-minimum-depth-of-binary-tree"},"111. Minimum depth of binary tree"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef minDepth(root):\n    if not root:\n        return 0\n    if not root.left:\n        return 1 + minDepth(root.right)\n    if not root.right:\n        return 1 + minDepth(root.left)\n    return 1 + min(minDepth(root.left), minDepth(root.right))\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.left.left = TreeNode(20)\n    root.left.left.left = TreeNode(15)\n    root.left.left.left.left = TreeNode(7)\n    print(minDepth(root))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h4",{id:"notes-4"},"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When I first tried to solve this problem, I forgot to consider if the left branch or the right branch is None. Therefore, if it falls to that case, my function always return 1 because of the root is counted as 1 and it's the minimum "),(0,o.kt)("li",{parentName:"ul"},"I tried to improve and set the edge case for empty left branch or right branch")),(0,o.kt)("h3",{id:"404-sum-of-left-leaves"},"404. Sum of left leaves"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef sumOfLeftLeaves(root):\n    return helper(root, False)\n\n\ndef helper(current, isLeft):\n    if not current:\n        return 0\n    if not current.left and not current.right and isLeft:\n        return current.val\n    return helper(current.left, True) + helper(current.right, False)\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.right.left = TreeNode(15)\n    root.right.right = TreeNode(7)\n    print(sumOfLeftLeaves(root))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h4",{id:"notes-5"},"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The main key for the solution is to check if it's the left node or not")))}p.isMDXComponent=!0}}]);