"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1319],{7900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=n(5893),a=n(1151);const r={title:"Oct 29"},o=void 0,l={id:"learning-journal/2023/October/oct_29_23",title:"Oct 29",description:"What I did today",source:"@site/docs/learning-journal/2023/October/oct_29_23.md",sourceDirName:"learning-journal/2023/October",slug:"/learning-journal/2023/October/oct_29_23",permalink:"/my-website/docs/learning-journal/2023/October/oct_29_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Oct 29"},sidebar:"tutorialSidebar",previous:{title:"Oct 22",permalink:"/my-website/docs/learning-journal/2023/October/oct_22_23"},next:{title:"Oct 30",permalink:"/my-website/docs/learning-journal/2023/October/oct_30_23"}},s={},d=[{value:"What I did today",id:"what-i-did-today",level:3},{value:"Django Library Project",id:"django-library-project",level:4},{value:"API",id:"api",level:5}];function c(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",h5:"h5",li:"li",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"what-i-did-today",children:"What I did today"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Update README file for Django To Do List App Project: ",(0,i.jsx)(t.a,{href:"https://github.com/quynhnle135/django-todolist-project",children:"https://github.com/quynhnle135/django-todolist-project"})]}),"\n",(0,i.jsxs)(t.li,{children:["Reviewed and made a small project Library to remember all Django application and API I've learned: ",(0,i.jsx)(t.a,{href:"https://github.com/quynhnle135/django-library-project",children:"https://github.com/quynhnle135/django-library-project"})]}),"\n",(0,i.jsx)(t.li,{children:"What I liked about this is the search function I learned and added to. User can search by author, title, date publication, or rating."}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"django-library-project",children:"Django Library Project"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Built myself a small application and API where I can add all the books I've read with my rating and reviews."}),"\n",(0,i.jsx)(t.li,{children:"Implemented basic operations: create/add, update, delelete, view details"}),"\n",(0,i.jsx)(t.li,{children:"Need to finish by added style and add search/filter function for API"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="base/models.py"',children:"from django.db import models\n\n\n# Create your models here.\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n    publication_date = models.DateField()\n    summary = models.TextField(blank=True, null=True)\n    review = models.TextField(blank=True, null=True)\n    rating = models.DecimalField(max_digits=2, decimal_places=1)\n\n    def __str__(self):\n        return self.title\n\n\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="base/views.py"',children:'from django.views import generic\nfrom .models import Book\nfrom django.urls import reverse_lazy\n\n\n# Create your views here.\nclass BookListView(generic.ListView):\n    model = Book\n    context_object_name = "books"\n    template_name = "base/book_list.html"\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n\n        title = self.request.GET.get("title")\n        author = self.request.GET.get("author")\n        min_rating = self.request.GET.get("min_rating")\n        publication_date = self.request.GET.get("publication_date")\n\n        if title:\n            queryset = queryset.filter(title__icontains=title)\n        if author:\n            queryset = queryset.filter(author__icontains=author)\n        if min_rating:\n            queryset = queryset.filter(rating__gte=min_rating)\n        if publication_date:\n            queryset = queryset.filter(publication_date=publication_date)\n\n        return queryset\n\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context["count"] = context["books"].count()\n        # context["search-area"] = self.request.GET.get("search-area")\n        return context\n\n\nclass BookDetailView(generic.DetailView):\n    model = Book\n    template_name = "base/book_detail.html"\n\n\nclass BookAddView(generic.CreateView):\n    model = Book\n    fields = "__all__"\n    template_name = "base/book_form.html"\n    success_url = reverse_lazy("book-list")\n\n\nclass BookUpdateView(generic.UpdateView):\n    model = Book\n    fields = "__all__"\n    template_name = "base/book_update_form.html"\n    success_url = reverse_lazy("book-list")\n\n\nclass BookDeleteView(generic.DeleteView):\n    model = Book\n    template_name = "base/book_confirm_delete_form.html"\n    success_url = reverse_lazy("book-list")\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="base/urls.py"',children:'from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path("books/", views.BookListView.as_view(), name="book-list"),\n    path("books/<int:pk>/", views.BookDetailView.as_view(), name="book-detail"),\n    path("books/add/", views.BookAddView.as_view(), name="book-add"),\n    path("books/<int:pk>/update/", views.BookUpdateView.as_view(), name="book-update"),\n    path("books/<int:pk>/delete/", views.BookDeleteView.as_view(), name="book-delete"),\n]\n'})}),"\n",(0,i.jsx)(t.h5,{id:"api",children:"API"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="libraryapi/serializers.py"',children:'from rest_framework import serializers\nfrom base.models import Book\n\n\nclass BookSerializer(serializers.ModelSerializer):\n    title = serializers.CharField(max_length=255)\n    author = serializers.CharField(max_length=255)\n    publication_date = serializers.DateField()\n    summary = serializers.CharField(allow_blank=True, allow_null=True)\n    review = serializers.CharField(allow_blank=True, allow_null=True)\n    rating = serializers.DecimalField(max_digits=2, decimal_places=1)\n\n    class Meta:\n        model = Book\n        fields = "__all__"\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="libraryapi/views.py"',children:"from base.models import Book\nfrom .serializers import BookSerializer\nfrom rest_framework import generics\n\n\n# Create your views here.\nclass BookListAPIView(generics.ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n\nclass BookRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="libraryapi/urls.py"',children:"from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path('books/', views.BookListAPIView.as_view()),\n    path('books/<int:pk>/', views.BookRetrieveUpdateDestroyAPIView.as_view()),\n]\n"})})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var i=n(7294);const a={},r=i.createContext(a);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);