"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1023],{3905:(e,r,t)=>{t.d(r,{Zo:()=>f,kt:()=>c});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},f=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",_={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),u=d(t),p=o,c=u["".concat(s,".").concat(p)]||u[p]||_[p]||l;return t?n.createElement(c,a(a({ref:r},f),{},{components:t})):n.createElement(c,a({ref:r},f))}));function c(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var d=2;d<l;d++)a[d]=t[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},538:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>_,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=t(7462),o=(t(7294),t(3905));const l={title:"Aug 17",description:"Thu, Aug 17"},a=void 0,i={unversionedId:"leetcode-grinding/2023/August/aug_17_23",id:"leetcode-grinding/2023/August/aug_17_23",title:"Aug 17",description:"Thu, Aug 17",source:"@site/docs/leetcode-grinding/2023/August/aug_17_23.md",sourceDirName:"leetcode-grinding/2023/August",slug:"/leetcode-grinding/2023/August/aug_17_23",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_17_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode-grinding/2023/August/aug_17_23.md",tags:[],version:"current",frontMatter:{title:"Aug 17",description:"Thu, Aug 17"},sidebar:"tutorialSidebar",previous:{title:"Aug 16",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_16_23"},next:{title:"Aug 20",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_20_23"}},s={},d=[{value:"Binary Tree Review",id:"binary-tree-review",level:3},{value:"Height of Tree",id:"height-of-tree",level:3},{value:"Python Deque",id:"python-deque",level:3},{value:"Binary Tree Level Order Traversal",id:"binary-tree-level-order-traversal",level:3}],f={toc:d},u="wrapper";function _(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"binary-tree-review"},"Binary Tree Review"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def inorder_traversal(self, root):\n        return self._inorder_traversal(root=root, traversal=[])\n\n    def _inorder_traversal(self, root, traversal):\n        if root:\n            self._inorder_traversal(root.left, traversal)\n            traversal.append(root.value)\n            self._inorder_traversal(root.right, traversal)\n        return traversal\n\n    def preorder_traversal(self, root):\n        return self._preorder_traversal_recursive(root=root, traversal=[])\n\n    def _preorder_traversal_recursive(self, root, traversal):\n        if root:\n            traversal.append(root.value)\n            self._preorder_traversal_recursive(root.left, traversal)\n            self._preorder_traversal_recursive(root.right, traversal)\n        return traversal\n\n    def postorder_traversal(self, root):\n        return self._postorder_traversal(root=root, traversal=[])\n\n    def _postorder_traversal(self, root, traversal):\n        if root:\n            self._postorder_traversal(root.left, traversal)\n            self._postorder_traversal(root.right, traversal)\n            traversal.append(root.value)\n        return traversal\n\n\ndef main():\n    tree = BinaryTree(1)\n    tree.root.left = Node(2)\n    tree.root.right = Node(3)\n    tree.root.left.left = Node(4)\n    tree.root.left.right = Node(5)\n    tree.root.right.left = Node(6)\n    tree.root.right.right = Node(7)\n    print(tree.preorder_traversal(root=tree.root))  # 1 2 4 5 3 6 7\n    print(tree.inorder_traversal(root=tree.root))  # 4 2 5 1 6 3 7\n    print(tree.postorder_traversal(root=tree.root))  # 4 5 2 6 7 3 1\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h3",{id:"height-of-tree"},"Height of Tree"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import collections\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass BinaryTree:\n    def __init__(self, root: Node):\n        self.root = root\n\n    # BFS\n    def find_max_height_bfs(self):\n        pass\n\n    # DFS Recursive\n    def find_max_height_dfs(self, root):\n        if not root:\n            return 0\n        return max(self.find_max_height_dfs(root.left), self.find_max_height_dfs(root.right)) + 1\n\n\ndef main():\n    root = Node(1)  # 1st level\n    root.left = Node(2)  # 2nd level\n    root.right = Node(3)\n    root.left.left = Node(3)  # 3rd level\n    root.left.right = Node(5)\n    root.left.left.left = Node(4)  # 4th level\n\n    tree = BinaryTree(root=root)\n    print(tree.find_max_height_dfs(root=tree.root))  # 4\n\n    another_root = Node(1)  # 1st level\n    another_root.left = Node(2)  # 2nd level\n    another_root.right = Node(3)\n    another_root.right.left = Node(4)  # 3rd level\n\n    another_tree = BinaryTree(root=another_root)\n    print(another_tree.find_max_height_dfs(root=another_tree.root))  # 3\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h3",{id:"python-deque"},"Python Deque"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import collections\n\n\ndef main():\n    my_queue = collections.deque()\n    my_queue.appendleft(1)\n    my_queue.appendleft(2)\n    my_queue.appendleft(3)\n    my_queue.appendleft(4)\n    # my_queue.append(1)\n    # my_queue.append(2)\n    # my_queue.append(3)\n\n    while my_queue:\n        print(my_queue.pop())\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h3",{id:"binary-tree-level-order-traversal"},"Binary Tree Level Order Traversal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import collections\n\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def level_order_traversal(self):\n        result = []\n        q = collections.deque()\n        q.append(self.root.value)\n\n        while q:\n            level = []\n            q_length = len(q)\n            for i in range(q_length):\n                node = q.popleft()\n                if node:\n                    level.append(node.value)\n                    q.append(node.left)\n                    q.append(node.right)\n            if level:\n                result.append(level)\n        return result\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    tree = BinaryTree(root=root)\n    # tree.left = Node(2)\n    # tree.left.left = Node(4)\n    # tree.left.left.left = Node(7)\n    # tree.left.left.right = Node(8)\n    # tree.right = Node(3)\n    # tree.right.left = Node(5)\n    # tree.right.right = Node(6)\n    # tree.right.left.right = Node(9)\n    # tree.right.left.left = Node(10)\n    # tree.right.right.left = Node(11)\n    # tree.right.right.right = Node(12)\n\n    print(tree.level_order_traversal())\n\n\nif __name__ == "__main__":\n    main()\n')))}_.isMDXComponent=!0}}]);