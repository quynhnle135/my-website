"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3791],{5265:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=r(5893),t=r(1151);const l={title:"Feb 18, 2024"},s="Coding Journal: Feb 18, 2024",o={id:"learning-journal/2024/February/20240218",title:"Feb 18, 2024",description:"- Continued with Data Structures for Coding Interview in JavaScript (Graph review):",source:"@site/docs/learning-journal/2024/February/20240218.md",sourceDirName:"learning-journal/2024/February",slug:"/learning-journal/2024/February/20240218",permalink:"/docs/learning-journal/2024/February/20240218",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feb 18, 2024"},sidebar:"tutorialSidebar",previous:{title:"Feb 17, 2024",permalink:"/docs/learning-journal/2024/February/20240217"},next:{title:"Feb 19, 2024",permalink:"/docs/learning-journal/2024/February/20240219"}},a={},d=[{value:"Adjacency list traversal",id:"adjacency-list-traversal",level:4},{value:"BFS",id:"bfs",level:4},{value:"DFS",id:"dfs",level:4},{value:"Number of islands",id:"number-of-islands",level:4},{value:"Number of provinces",id:"number-of-provinces",level:4},{value:"Detect cycle",id:"detect-cycle",level:4}];function c(n){const e={code:"code",h1:"h1",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"coding-journal-feb-18-2024",children:"Coding Journal: Feb 18, 2024"}),"\n",(0,i.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Continued with Data Structures for Coding Interview in JavaScript (Graph review):","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Adjacency list traversal"}),"\n",(0,i.jsx)(e.li,{children:"BFS"}),"\n",(0,i.jsx)(e.li,{children:"DFS"}),"\n",(0,i.jsx)(e.li,{children:"Number of islands"}),"\n",(0,i.jsx)(e.li,{children:"Number of provinces"}),"\n",(0,i.jsx)(e.li,{children:"Detect cycle in a graph"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"2-questions-i-had-today",children:"2. Questions I Had Today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"I didn't have any question for today."}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"3-what-i-found-challenging-today",children:"3. What I Found Challenging Today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"I didn't find anything challenging today."}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,i.jsx)(e.h4,{id:"adjacency-list-traversal",children:"Adjacency list traversal"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'var adj_list = {\n    "A": ["B", "C"],\n    "B": ["C", "D"],\n    "C": ["A", "E", "G"],\n    "D": ["B", "F"],\n    "F": ["D"]\n};\n\nconsole.log("Adjency List Traversal")\nfor (let node in adj_list) {\n    console.log(node, ": ", adj_list[node]);\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"bfs",children:"BFS"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function breadthFirstSearch(graph) {\n    let visited = new Set();\n    let traversal = [];\n    let queue = [];\n    let firstNode = Object.keys(graph)[0];\n    queue.push(firstNode);\n    visited.add(firstNode);\n    while (queue.length !== 0) {\n        let curNode = queue.shift();\n        traversal.push(curNode);\n        var neighbors = graph[curNode];\n        for (let neighbor of neighbors) {\n            if (visited.has(neighbor)) continue;\n            else {\n                visited.add(neighbor);\n                queue.push(neighbor);\n            }\n        }\n    }\n    return traversal;\n}\n\nvar adj_list = {\n    "A": ["B", "D"],\n    "B": ["A","C", "E"],\n    "C": ["B"],\n    "D": ["A", "E"],\n    "E": ["B", "D", "F"],\n    "F": ["E"],\n};\n\nconsole.log(breadthFirstSearch(adj_list)); // ABDCEF\n'})}),"\n",(0,i.jsx)(e.h4,{id:"dfs",children:"DFS"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function depthFirstSearch(adj_list) {\n    let stack = [];\n    let visited = new Set();\n    let traversal = [];\n    stack.push(Object.keys(adj_list)[0]);\n    visited.add(Object.keys(adj_list)[0]);\n    while (stack.length !== 0) {\n        let curNode = stack.pop();\n        traversal.push(curNode);\n        for (let neighbor of adj_list[curNode]) {\n            if (!visited.has(neighbor)) {\n                stack.push(neighbor);\n                visited.add(neighbor);\n            }\n        }\n    }\n    return traversal;\n}\n\nvar adj_list = {\n    "A": ["B", "D"],\n    "B": ["A","C", "E"],\n    "C": ["B"],\n    "D": ["A", "E"],\n    "E": ["B", "D", "F"],\n    "F": ["E"],\n};\n\nconsole.log(depthFirstSearch(adj_list)); // A D E F B C\n'})}),"\n",(0,i.jsx)(e.h4,{id:"number-of-islands",children:"Number of islands"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function numberOfIslands(grid) {\n    let islands = 0;\n    for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[0].length; col++) {\n            if (grid[row][col] == "1") {\n                islands++;\n                dfs(row, col, grid);\n            }\n        }\n    }\n    return islands;\n}\n\nfunction dfs(row, col, grid) {\n    if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || grid[row][col] == "0") {\n        return;\n    }\n    grid[row][col] = "0";\n    dfs(row + 1, col, grid);\n    dfs(row - 1, col, grid);\n    dfs(row, col + 1, grid);\n    dfs(row, col - 1, grid);\n}\n\nconsole.log(numberOfIslands(grid = [\n    ["1","1","1","1","0"],\n    ["1","1","0","1","0"],\n    ["1","1","0","0","0"],\n    ["0","0","0","0","0"]\n  ]))\n\nconsole.log(numberOfIslands(grid = [\n    ["1","1","0","0","0"],\n    ["1","1","0","0","0"],\n    ["0","0","1","0","0"],\n    ["0","0","0","1","1"]\n  ]))\n'})}),"\n",(0,i.jsx)(e.h4,{id:"number-of-provinces",children:"Number of provinces"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function numberOfProvinces(graph) {\n    // Convert graph to adjacency list\n    var adj_list = {};\n    for (let row = 0; row < graph.length; row++) {\n        adj_list[parseInt(row)] = [];\n        for (let col = 0; col < graph[0].length; col++) {\n            if (graph[row][col] === 1) {\n                adj_list[row].push(col);\n            }\n        }\n    }\n    let provinces = 0;\n    let visited = new Set();\n    for (let key in adj_list) {\n        if (!visited.has(parseInt(key))) {\n            depthFirstSearch(key, adj_list, visited);\n            provinces++;\n            \n        }\n    }\n    console.log(visited);\n    return provinces;\n}\n\nfunction depthFirstSearch(node, adj_list, visited) {\n    visited.add(node);\n    for (let neighbor of adj_list[node]) {\n        if (!visited.has(neighbor)) {\n            visited.add(neighbor);\n            depthFirstSearch(neighbor, adj_list, visited);\n        }\n    }\n}\n\nconsole.log(numberOfProvinces([[1,1,0],[1,1,0],[0,0,1]])); // 2\nconsole.log(numberOfProvinces([[1,0,0],[0,1,0],[0,0,1]])); // 3\n"})}),"\n",(0,i.jsx)(e.h4,{id:"detect-cycle",children:"Detect cycle"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function detectCycle(graph) {\n    // Convert to adjacency list\n    var adj_list = {};\n    for (let row = 0; row < graph.length; row++) {\n        adj_list[row] = [];\n        for (let col = 0; col < graph[row].length; col++) {\n            if (row !== col) {\n                adj_list[row].push(graph[row][col]);\n            }\n        }\n    }\n    console.log(adj_list);\n    let visited = new Set();\n    for (let node in adj_list) {\n        if (visited.has(node)) return true;\n        else {\n            if(dfs(node, adj_list, visited) === false) return true;\n        }\n    }\n    return false;\n}\n\nfunction dfs(node, adj_list, visited) {\n    visited.add(node);\n    for (let neighbor of adj_list[node]) {\n        if (visited.has(neighbor)) return false;\n        else {\n            dfs(neighbor, adj_list, visited);\n        }\n    }\n}\n\nvar graph = [[0, 2, 1], [], [2, 1, 0]]; // true\nconsole.log(detectCycle(graph));\nvar graph1 = [[1], [2], []]; \nconsole.log(detectCycle(graph1)); // false\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>o,a:()=>s});var i=r(7294);const t={},l=i.createContext(t);function s(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);