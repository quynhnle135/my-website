"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1362],{8818:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>t});var s=a(5893),l=a(1151);const c={title:"Scope and Variables in JavaScript"},r="Scope and Variables in JavaScript",i={id:"tech-blogs/javascript-ramp-up/scope",title:"Scope and Variables in JavaScript",description:"- There are three keywords for declaring variables in JavaScript: var, let, and const",source:"@site/docs/tech-blogs/javascript-ramp-up/scope.md",sourceDirName:"tech-blogs/javascript-ramp-up",slug:"/tech-blogs/javascript-ramp-up/scope",permalink:"/docs/tech-blogs/javascript-ramp-up/scope",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Scope and Variables in JavaScript"},sidebar:"tutorialSidebar",previous:{title:"Hoisting in JavaScript",permalink:"/docs/tech-blogs/javascript-ramp-up/hoisting"},next:{title:"Pythonic Programming Tips",permalink:"/docs/category/pythonic-programming-tips"}},o={},t=[];function d(e){const n={a:"a",code:"code",h1:"h1",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"scope-and-variables-in-javascript",children:"Scope and Variables in JavaScript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["There are three keywords for declaring variables in JavaScript: ",(0,s.jsx)("b",{children:"var"}),", ",(0,s.jsx)("b",{children:"let"}),", and ",(0,s.jsx)("b",{children:"const"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("b",{children:">var"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Before ES6 (JavaScript's latest version), var was the primary way to declare variables."}),"\n",(0,s.jsxs)(n.li,{children:["Variables declared with ",(0,s.jsx)("b",{children:"var"})," are function-scoped or globally scoped."]}),"\n",(0,s.jsxs)(n.li,{children:["These ",(0,s.jsx)("b",{children:"var"})," variables can be re-declared and udpated."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var name = "John Doe";\n// console.log(name);\nvar name = "Quinn Le"; // Re-declaring is allowed\nconsole.log(name);\nname = "Another name"; // Updating is allowed\nconsole.log(name);\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("b",{children:"let"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"let"})," allows you to declare block-level variables."]}),"\n",(0,s.jsxs)(n.li,{children:["Variables declared with ",(0,s.jsx)("b",{children:"let"})," can be updated but not re-declared."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let myName = "Quinn Le";\nconsole.log(myName);\nmyName = "Jane Doe"; // Updating is allowed\nconsole.log(myName);\n// let myName = "Another name"; // Re-declaring is not allowed\nconsole.log(myName);\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("b",{children:"const"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Variables declared with ",(0,s.jsx)("b",{children:"const"})," remain constant, which mean they cannot be updated or re-declared."]}),"\n",(0,s.jsxs)(n.li,{children:["Variables declared with ",(0,s.jsx)("b",{children:"const"})," are block-scoped."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const PI = 3.14;\nconsole.log(PI);\n// PI = 3.14159; // Updating is not allowed\n// console.log(PI)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"There are three main types of scopes in JavaScript:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Global scope: A variable declared outside any function or block becomes globally accessbile from any part of the code."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var globalVar = "This is global variable";\n\nfunction printing(name) {\n   console.log("Global var: " + globalVar);\n   console.log("Greeting " + name);\n}\n\nprinting(name="Quinn");\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Function/Local Scope: Variables declared within a function are local to that function and cannot be accessed from outside."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// function-scoped variable\nfunction myFunction() {\n    let vocalVar = "I am local";\n    console.log(vocalVar);\n}\n\nmyFunction();\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Block scope: Block scope restricts the visbility of a variable to the block in which it's declared such as as if-else conditions, loops, etc."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// block-scoped variable\n   for (let i = 0; i <= 5; i++)  {\n       console.log("Block scope variable: " + i);\n   }\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.w3schools.com/js/js_scope.asp",children:"JavaScript Scope"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>r});var s=a(7294);const l={},c=s.createContext(l);function r(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);