"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8625],{3744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(5893),i=t(1151);const r={title:"Interview Preparation - JavaScript (3)"},o="Interview Preparation - JavaScript (3)",a={id:"tech-blogs/become-fullstack-developer/interview_prep_js_3",title:"Interview Preparation - JavaScript (3)",description:"Synchronous vs Asynchronous Programming",source:"@site/docs/tech-blogs/become-fullstack-developer/interview_prep_js_3.md",sourceDirName:"tech-blogs/become-fullstack-developer",slug:"/tech-blogs/become-fullstack-developer/interview_prep_js_3",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_3",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Interview Preparation - JavaScript (3)"},sidebar:"tutorialSidebar",previous:{title:"Interview Preparation - JavaScript (2)",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_2"},next:{title:"Node.js Introduction and Fundamental (1)",permalink:"/docs/tech-blogs/become-fullstack-developer/node1"}},c={},l=[{value:"Synchronous vs Asynchronous Programming",id:"synchronous-vs-asynchronous-programming",level:3},{value:"What is Execution Context (EC)?",id:"what-is-execution-context-ec",level:3},{value:"What is Event Loop in JavaScript?",id:"what-is-event-loop-in-javascript",level:3},{value:"What is REST?",id:"what-is-rest",level:3},{value:"What is HTTP?",id:"what-is-http",level:3},{value:"HTTP Request Methods",id:"http-request-methods",level:3},{value:"HTTP Status Code:",id:"http-status-code",level:3},{value:"AJAX",id:"ajax",level:3}];function h(e){const n={h1:"h1",h3:"h3",hr:"hr",li:"li",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"interview-preparation---javascript-3",children:"Interview Preparation - JavaScript (3)"}),"\n",(0,s.jsx)(n.h3,{id:"synchronous-vs-asynchronous-programming",children:"Synchronous vs Asynchronous Programming"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Synchronous code: executed line-by-line in the order that it is written, and one line of code must finish execution before the next line is executed \u2192",(0,s.jsx)("mark",{children:" Long-running operations will block code execution."})]}),"\n",(0,s.jsxs)(n.li,{children:["Asynchronous code: a line of code doesn't need to finish execution before the next line is executed \u2192",(0,s.jsx)("mark",{children:" Prevents long-running operations from blocking execution"})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"what-is-execution-context-ec",children:"What is Execution Context (EC)?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When you run a JavaScript program, the JavaScript engine (like V8) creates execution contexts manage and execute the code."}),"\n",(0,s.jsxs)(n.li,{children:["When the JavaScript code is run:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The JavaScript engine creates the Global Execution Context first for any code that isn't inside a function"}),"\n",(0,s.jsx)(n.li,{children:"When a function is called, the engine creates a new Execution Context for that function call. This new context is where the function's variables and inner functions live."}),"\n",(0,s.jsx)(n.li,{children:"Each function call gets its own Execution Context, allowing JavaScript to handle nested functions and recursive functions call effectively."}),"\n",(0,s.jsxs)(n.li,{children:["Once a function finishes executing, its Execution Context is removed, and the engine returns to the context of calling function, until all code execution is complete.\n\u2192 ",(0,s.jsx)("mark",{children:"JavaScript Execution Context is the environment in which JavaScript code is executed."})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"what-is-event-loop-in-javascript",children:"What is Event Loop in JavaScript?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Event loop is a runtime model that handles execution of synchronous and asynchronous code using these data structures:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Call stack"}),"\n",(0,s.jsxs)(n.li,{children:["Task queue (aka Callback Queue, Message Queue):","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Macrotask queue (event listener, timeout, interval)"}),"\n",(0,s.jsx)(n.li,{children:"Microtask queue (promises)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Order: synchronous > promises > other callbacks"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"what-is-rest",children:"What is REST?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Representational State Transfer (REST): a software architecture for managing internet communications between applications."}),"\n",(0,s.jsx)(n.li,{children:"Uniform interface: servers should transfer information"}),"\n",(0,s.jsx)(n.li,{children:"Representation: data that is sent in a standard format (can differ from the actual structure)"}),"\n",(0,s.jsx)(n.li,{children:"Server responses should have enough information that describes how the clien should process & manipulate it."}),"\n",(0,s.jsx)(n.li,{children:"Stateless: server sucessfully completes each request independently (doesn't store anything related to previous requests)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"what-is-http",children:"What is HTTP?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hypertext Transfer Protocol (HTTP): a network communication protocol for exchanging information (HTML files, JSON data...) between devices."}),"\n",(0,s.jsx)(n.li,{children:"HTTP Request: what web clients (browsers) send to a server to retrieve or submit data."}),"\n",(0,s.jsx)(n.li,{children:"HTTP Repsonse: what web clients (browsers) receive from a server to confirm that their request was received (may contain the requested data)."}),"\n",(0,s.jsx)(n.li,{children:"Status code: 3-digit codes that indicate whether the request was successfully completed."}),"\n",(0,s.jsxs)(n.li,{children:["HTTP version, destination url, HTTP method:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Headers: contains core information (browser, data type) in key-value pairs"}),"\n",(0,s.jsx)(n.li,{children:"Body (optional): the part of the request or response that contains the data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"http-request-methods",children:"HTTP Request Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"GET: request data from a specifc resource (should not have a body)"}),"\n",(0,s.jsxs)(n.li,{children:["POST: send data to a server to create a resource.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Can be used to send a data body that identifies resources that you want to retrieve"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["PUT: send data to a server to replace a resource (for updating)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Idempotent: sending the same PUT request multiple times always has the same result (no side effects)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"DELETE: send data to a server, telling it what resource(s) to delete"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"http-status-code",children:"HTTP Status Code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"100 - 199: Informational responses"}),"\n",(0,s.jsx)(n.li,{children:"200 - 299: Successful responses"}),"\n",(0,s.jsx)(n.li,{children:"300 - 399: Redirection message"}),"\n",(0,s.jsx)(n.li,{children:"400 - 499: Client error responses"}),"\n",(0,s.jsx)(n.li,{children:"500 - 599: Server error repsonses"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ajax",children:"AJAX"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Asynchronous JavaScript and XML (AJAX): using XMLHttpRequest objects to asynchronously communicate with"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);