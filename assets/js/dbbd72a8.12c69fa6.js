"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3664],{2742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var s=t(5893),o=t(1151);const r={title:"Creational Design Patterns (4) - Prototype"},i="Creational Design Patterns (4) - Prototype",c={id:"tech-blogs/dive-into-design-patterns/post_07",title:"Creational Design Patterns (4) - Prototype",description:"- Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes",source:"@site/docs/tech-blogs/dive-into-design-patterns/post_07.md",sourceDirName:"tech-blogs/dive-into-design-patterns",slug:"/tech-blogs/dive-into-design-patterns/post_07",permalink:"/docs/tech-blogs/dive-into-design-patterns/post_07",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Creational Design Patterns (4) - Prototype"},sidebar:"tutorialSidebar",previous:{title:"Creational Design Patterns (3) - Builder",permalink:"/docs/tech-blogs/dive-into-design-patterns/post_06"},next:{title:"Creational Design Patterns (5) - Singleton",permalink:"/docs/tech-blogs/dive-into-design-patterns/post_08"}},l={},a=[{value:"Applicability:",id:"applicability",level:2},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"creational-design-patterns-4---prototype",children:"Creational Design Patterns (4) - Prototype"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes"}),"\n",(0,s.jsxs)(n.li,{children:["This interface lets you clone an object without coupling your code to the class of that object. Usually, such an interface contains just a single ",(0,s.jsx)(n.code,{children:"clone"})," method"]}),"\n",(0,s.jsx)(n.li,{children:"An object that supports cloning is called a prototype. When you objects have dozens of fields and hundreds of possible configurations, cloning them might serve as an alternative to subclassing"}),"\n",(0,s.jsx)(n.li,{children:"Here's how it works: you create a set of objects, configured in various ways. When you need an object like the one you've configured, you just cloned a prototype instead of constructing a new object from scratch"}),"\n",(0,s.jsx)(n.li,{children:"Here's the structure of Prototype:"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Prototype Structure",src:t(123).Z+"",width:"1021",height:"932"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Here's what I coded following along the Pseudocode:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import copy\nfrom abc import ABC, abstractmethod\n\n\nclass Shape(ABC):\n    def __init__(self, source=None):\n        if source:\n            self.x = source.x\n            self.y = source.y\n            self.color = source.color\n        else:\n            self.x = 0\n            self.y = 0\n            self.color = "White"\n\n    def clone(self):\n        return copy.deepcopy(self)\n\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\n    def __str__(self):\n        return f"{self.__class__.__name__}(x: {self.x}, y: {self.y}, color: {self.color})"\n\n\nclass Circle(Shape):\n    def __init__(self, source=None):\n        super().__init__(source)\n        if source:\n            self.radius = source.radius\n        else:\n            self.radius = 1\n\n    def area(self):\n        return (self.radius ** 2) * 3.14\n\n    def perimeter(self):\n        return self.radius * 2 * 3.14\n\n\nclass Rectangle(Shape):\n    def __init__(self, source=None):\n        super().__init__(source)\n        if source:\n            self.width = source.width\n            self.height = source.height\n        else:\n            self.width = 1\n            self.height = 1\n\n    def area(self):\n        return self.width * self.height * 0.5\n\n    def perimeter(self):\n        pass\n\n\n# Usage\ncircle = Circle()\ncircle.x = 5\ncircle.y = 7\ncircle.color = "Blue"\ncircle.radius = 10\n\nrec = Rectangle()\nrec.x = 2\nrec.y = 3\nrec.color = "Red"\nrec.width = 4\nrec.height = 6\n\ncircle_clone = circle.clone()\ncircle_clone.radius = 20\ncircle_clone.color = "Black"\nrec_clone = rec.clone()\nrec_clone.width = 10\nrec_clone.height = 15\nrec_clone.color = "Black"\n\nprint(f"Original circle: {circle}")\nprint(f"Original circle area: {circle.area()}")\nprint(f"Clone circle: {circle_clone}")\nprint(f"Clone circle area: {circle_clone.area()}")\n\nprint(f"Original rectangle: {rec}")\nprint(f"Clone rectangle: {rec_clone}")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"applicability",children:"Applicability:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use the Prototype pattern when your code shouldn't depend on the concrete classes of objects that you need to copy","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This happens a lot when your code works with objects passed to you from 3rd-party code via some interface. The concrete classes of these objects are unknown, and you couldn't depend on them even if you wanted to"}),"\n",(0,s.jsx)(n.li,{children:"The Prototype pattern provides the client code with a general interface for working with all objects that support cloning. This interface makes the client code independent from the concrete classes of objects that it clones"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Use the pattern when you want to reduce the numner of subclasses that only differ in the way they initialize their respective objects.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For example: Shapes can have many subclasses such as Circles, Squares, Pentagon, etc. To reduce this, Shapes can have ",(0,s.jsx)(n.code,{children:"sources"})," as its attributes then have ",(0,s.jsx)(n.code,{children:"clone"})," class to have different shapes that developers can adjust the attributes or add more states to it"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,s.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can clone objects without coupling to their concrete classes"}),"\n",(0,s.jsx)(n.li,{children:"You can get rid of repeated initialization code in favor of cloning pre-built prototypes"}),"\n",(0,s.jsx)(n.li,{children:"You can produce complex objects more conveniently"}),"\n",(0,s.jsx)(n.li,{children:"You get an alternative to inheritance when dealing with configuration presets for complext objects"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cons",children:"Cons"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cloning complex objects that have circular references might be very tricky."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["I also did a small research about ",(0,s.jsx)(n.a,{href:"https://quinnle.io/docs/research-topics/copy_in_python",children:"Shallow Copy vs. Deep Copy"})," when learning about this concept"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},123:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/prototype_structure-3a317b732ad61ee556fbca04d48d095d.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var s=t(7294);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);