"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[493],{1588:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var i=t(5893),s=t(1151);const a={title:"Aug 28",description:"Mon, Aug 28"},d=void 0,l={id:"daily-practice/2023/August/aug_28_23",title:"Aug 28",description:"Mon, Aug 28",source:"@site/docs/daily-practice/2023/August/aug_28_23.md",sourceDirName:"daily-practice/2023/August",slug:"/daily-practice/2023/August/aug_28_23",permalink:"/my-website/docs/daily-practice/2023/August/aug_28_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Aug 28",description:"Mon, Aug 28"},sidebar:"tutorialSidebar",previous:{title:"Aug 24",permalink:"/my-website/docs/daily-practice/2023/August/aug_24_23"},next:{title:"Aug 29",permalink:"/my-website/docs/daily-practice/2023/August/aug_29_23"}},r={},o=[{value:"Fast and slow pointers review",id:"fast-and-slow-pointers-review",level:3},{value:"Find middle node of a linked list",id:"find-middle-node-of-a-linked-list",level:4},{value:"Find maximum twin sum of a linked list",id:"find-maximum-twin-sum-of-a-linked-list",level:4},{value:"Palindrome linked list",id:"palindrome-linked-list",level:4}];function u(n){const e={code:"code",h3:"h3",h4:"h4",pre:"pre",...(0,s.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h3,{id:"fast-and-slow-pointers-review",children:"Fast and slow pointers review"}),"\n",(0,i.jsx)(e.h4,{id:"find-middle-node-of-a-linked-list",children:"Find middle node of a linked list"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n    print()\n\n\ndef find_mid_node(head):\n    fast = head\n    slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    print(slow.val)\n\n\ndef main():\n    head = ListNode(0)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next = ListNode(5)\n    print_list(head)\n    find_mid_node(head)\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.h4,{id:"find-maximum-twin-sum-of-a-linked-list",children:"Find maximum twin sum of a linked list"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef reverse_linkedlist(head):\n    cur = head\n    prev = None\n    while cur:\n        next_node = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next_node\n    return prev\n\n\ndef find_max_sum(head):\n    max_sum = 0\n    fast = slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    fast = head\n    slow = reverse_linkedlist(slow)\n    while fast and slow:\n        cur_sum = fast.val + slow.val\n        max_sum = max(max_sum, cur_sum)\n        fast = fast.next\n        slow = slow.next\n    return max_sum\n\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(10000)\n    # head.next.next = ListNode(2)\n    # head.next.next.next = ListNode(3)\n    print(find_max_sum(head))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.h4,{id:"palindrome-linked-list",children:"Palindrome linked list"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n    print()\n\n\ndef reverse_linkedlist(head):\n    cur = head\n    prev = None\n    while cur:\n        next_node = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next_node\n    return prev\n\n\ndef is_palindrome(head):\n    fast = head\n    slow = head\n    # Traverse the slow node to the middle node of the list\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    fast = head\n    slow = reverse_linkedlist(slow)\n    while fast and slow:\n        if fast.val != slow.val:\n            return False\n        fast = fast.next\n        slow = slow.next\n    return True\n\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(2)\n    head.next.next.next.next = ListNode(2)\n    print_list(head)\n    print(is_palindrome(head))\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function c(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>d});var i=t(7294);const s={},a=i.createContext(s);function d(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:d(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);