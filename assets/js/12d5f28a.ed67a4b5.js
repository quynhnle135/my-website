"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[287],{1032:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var o=t(5893),i=t(1151);const s={title:"Oct 22, 2024"},l="Coding Journal: Oct 22, 2024",r={id:"learning-journal/2024/October/20241022",title:"Oct 22, 2024",description:"- Continued with Task Management System web app with Blazor:",source:"@site/docs/learning-journal/2024/October/20241022.md",sourceDirName:"learning-journal/2024/October",slug:"/learning-journal/2024/October/20241022",permalink:"/docs/learning-journal/2024/October/20241022",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Oct 22, 2024"},sidebar:"tutorialSidebar",previous:{title:"Oct 21, 2024",permalink:"/docs/learning-journal/2024/October/20241021"},next:{title:"Notes",permalink:"/docs/category/notes"}},d={},a=[{value:"Todo Model",id:"todo-model",level:4},{value:"TodoList.razor",id:"todolistrazor",level:4}];function c(n){const e={code:"code",h1:"h1",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"coding-journal-oct-22-2024",children:"Coding Journal: Oct 22, 2024"}),"\n",(0,o.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Continued with Task Management System web app with Blazor:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Created Add Task functionality with EditForm."}),"\n",(0,o.jsx)(e.li,{children:"Intergrated Tailwind CSS to my app."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h1,{id:"2-questions-i-had-today",children:"2. Questions I Had Today"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)("mark",{children:["Why do we need ",(0,o.jsx)(e.code,{children:"{ get; set; }"})," when it comes to setting up a property for a class?"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"To define a property in a class."}),"\n",(0,o.jsxs)(e.li,{children:["If there's no ",(0,o.jsx)(e.code,{children:"{ get; set; }"}),", you just define a field (data member) in a class."]}),"\n",(0,o.jsx)(e.li,{children:"Properties are a way to encapsulate the internal data of an object, allowing for data access while controlling how that data is retrieved or modified."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)("mark",{children:"How to integrate Tailwind CSS to Blazor App?"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Install Tailwind: ",(0,o.jsx)(e.code,{children:"npx tailwindcss init"})]}),"\n",(0,o.jsxs)(e.li,{children:["Configure ",(0,o.jsx)(e.code,{children:"tailwind.config.js"})," file:","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\ncontent: [\"./**/*.{razor, html}\"],\ntheme: {\n    extend: {},\n},\nplugins: [],\n};\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Create a Styles folder and create a ",(0,o.jsx)(e.code,{children:"app.css"})," file:","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Enter ",(0,o.jsx)(e.code,{children:"npx tailwindcss -i ./wwwroot/css/site.css -o ./wwwroot/css/output.css --watch"})," in the terminal \u2192 This is used to compile Tailwind CSS from its source configuration and classes into a single CSS file, and it will watch for any changes in the input CSS file to automatically rebuild the output."]}),"\n",(0,o.jsxs)(e.li,{children:["Add ",(0,o.jsx)(e.code,{children:'<link rel="stylesheet" href="css/app.css" />'})," to ",(0,o.jsx)(e.code,{children:"index.html"})," file."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)("mark",{children:"What's the difference between Blazor Server App and Blazor Web Assembly?"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Blazor has two main hosting models: Blazor Server and Blazor WebAssembly"}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)("b",{children:"Blazor Server:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"How it works:"})," The app runs on the server, and the user interface is updated through a real-time connection (via SignalR). When users interact with the app, their actions are sent to the server, and the server sends back the updated UI."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"Performance:"})," The user experience is fast because the app runs on the server, but it depends on the speed of the server-client connection."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"App Size:"})," The app size is small since it's not downloading the entire app to the client."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"Network Dependency:"})," Requires a constant internet connection to work."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"Blazor WebAssembly"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"How it works:"})," The app runs entirely in the browser using WebAssembly. When a user loads the app, the entire app (including .NET code) is downloaded and runs locally on the user's machine."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"Performance:"})," The initial load can be slower since the whole app is downloaded, but once loaded, it works offline and doesn't require constant communication with the server."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"App Size:"})," The app size can be larger due to the need to download the entire app."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)("b",{children:"Network Dependency:"})," Can work offline after the app has been downloaded, since it runs locally in the browser"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)("mark",{children:["So if I create my Blazor app with ",(0,o.jsx)(e.code,{children:"dotnet new blazor -o BlazorApp"}),", is it Blazor Server app or Blazor WebAssembly app?"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)("b",{children:" It will create Blazor WebAssembly app by default "}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["To create Blazor Server app: ",(0,o.jsx)(e.code,{children:"dotnet new blazorserver -o BlazorApp"})]}),"\n",(0,o.jsxs)(e.li,{children:["To create Blazor WebAssembly app: ",(0,o.jsx)(e.code,{children:"dotnet new blazorwasm -o BlazorApp"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h1,{id:"3-what-i-found-challenging-today",children:"3. What I Found Challenging Today"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Integrate Tailwind CSS to my Blazor app."}),"\n",(0,o.jsx)(e.li,{children:"Understand and know how to use Tailwind."}),"\n"]}),"\n",(0,o.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,o.jsx)(e.h4,{id:"todo-model",children:"Todo Model"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-c#",children:'using System.ComponentModel.DataAnnotations;\n\npublic class Todo {\n    [Required(ErrorMessage = "Title is required.")]\n    public string Title { get; set; }\n\n    [StringLength(500, ErrorMessage = "Description is too long.")]\n    public string Description { get; set; }\n\n    [Required]\n    public TodoStatus Status { get; set; }\n    \n    [Required]\n    public TodoPriority Priority { get; set; }\n\n}\n\npublic enum TodoStatus {\n    Pending, \n    OnGoing,\n    Closed\n}\n\npublic enum TodoPriority {\n    Minor,\n    Major,\n    Urgent\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"todolistrazor",children:"TodoList.razor"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-r",children:'@page "/todos"\n\n<h1 class="text-lg font-extrabold text-red-800">To Do List</h1>\n\n<EditForm Model="@newTodo" OnValidSubmit="HandleValidSubmit">\n    <DataAnnotationsValidator/>\n    <ValidationSummary/>\n\n    <div>\n        <label for="title">Title:</label>\n        <InputText @bind-Value="newTodo.Title"/>\n    </div>\n\n    <div>\n        <label for="description">Description:</label>\n        <InputText @bind-Value="newTodo.Description"/>\n    </div>\n\n    <div>\n        <label for="status">Status:</label>\n        <InputSelect @bind-Value="newTodo.Status">\n        <option value="Pending">Pending</option>\n        <option value="OnGoing">OnGoing</option>\n        <option value="Closed">Closed</option>\n        </InputSelect>\n    </div>\n\n    <div>\n        <label for="priority">Priority</label>\n        <InputSelect @bind-Value="newTodo.Priority">\n            <option value="Minor">Minor</option>\n            <option value="Major">Major</option>\n            <option value="Urgent">Urgent</option>\n        </InputSelect>\n    </div>\n    <button class="" type="submit">Add</button>\n</EditForm>\n\n<h3 class="text-lg font-bold text-gray-800">You have @todos.Count(t => t.Status == TodoStatus.Pending || t.Status == TodoStatus.OnGoing) task(s) to do.</h3>\n<ul>\n        @foreach (var todo in todos) {\n            <li class="flex justify-between items-center py-2">\n               @if(todo.Status == TodoStatus.Closed) {\n                    <span class="line-through text-green-500">@todo.Title</span>\n               } else {\n                    <input type="checkbox" @onclick="()=>MarkAsCompleted(todo)" class="mr-2"/>\n                    <span class="text-sm font-medium @((todo.Status == TodoStatus.Pending) ? "text-red-500" : "text-orange-500")">@todo.Title</span>\n               }\n\n               @if(!string.IsNullOrWhiteSpace(todo.Description)) {\n                    <p class="ml-5 text-sm text-gray-500">@todo.Description</p>\n               }\n               <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded" @onclick="()=>RemoveTodo(todo)">Delete</button>\n            </li>\n            \n        }\n</ul>\n\n@code {\n    public Todo newTodo = new Todo();\n    public List<Todo> todos = new();\n    \n    public void HandleValidSubmit() {\n        todos.Add(new Todo() {\n            Title = newTodo.Title,\n            Description = newTodo.Description, \n            Status = newTodo.Status, \n            Priority = newTodo.Priority\n        });\n    }\n\n    public void MarkAsCompleted(Todo todo) {\n        todo.Status = TodoStatus.Closed;\n    }\n\n    public void RemoveTodo(Todo todo) {\n        todos.Remove(todo);\n    }\n\n\n}\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>l});var o=t(7294);const i={},s=o.createContext(i);function l(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);