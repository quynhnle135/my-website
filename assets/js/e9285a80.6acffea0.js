"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1700],{635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=t(5893),r=t(1151);const i={title:"Sep 28"},a=void 0,l={id:"daily-practice/2023/September/sep_28_23",title:"Sep 28",description:"143, Reorder List",source:"@site/docs/daily-practice/2023/September/sep_28_23.md",sourceDirName:"daily-practice/2023/September",slug:"/daily-practice/2023/September/sep_28_23",permalink:"/my-website/docs/daily-practice/2023/September/sep_28_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 28"},sidebar:"tutorialSidebar",previous:{title:"Sep 26",permalink:"/my-website/docs/daily-practice/2023/September/sep_26_23"},next:{title:"Leetcode 75",permalink:"/my-website/docs/category/leetcode-75"}},o={},d=[{value:"143, Reorder List",id:"143-reorder-list",level:3},{value:"Notes:",id:"notes",level:4},{value:"735. Asteroid Collision",id:"735-asteroid-collision",level:3},{value:"Notes:",id:"notes-1",level:4},{value:"Daily challenge: 905. Sort array by parity",id:"daily-challenge-905-sort-array-by-parity",level:3},{value:"First approach",id:"first-approach",level:4},{value:"Second approach:",id:"second-approach",level:4}];function c(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"143-reorder-list",children:"143, Reorder List"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef reorder_list(head):\n    fast = slow = head\n    # find the mid node\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n\n    # reverse the second half\n    prev = None\n    cur = slow\n    while cur:\n        next_node = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next_node\n\n    # merge two lists\n    first = head\n    second = prev\n\n    while second.next:\n        first.next, first = second, first.next\n        second.next, second = first, second.next\n\n    return head\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n\n\ndef main():\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    # head.next.next.next.next = Node(5)\n    print_list(head=reorder_list(head))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,s.jsx)(n.h4,{id:"notes",children:"Notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We can solve this problem using stack as well, will contemplate on this later"}),"\n",(0,s.jsx)(n.li,{children:"We can solve this problem by thinking back about merging two sorted list problem"}),"\n",(0,s.jsx)(n.li,{children:"Find the middle node, fast and slow pointers are really useful for this problem"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"735-asteroid-collision",children:"735. Asteroid Collision"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def asteroid_collision(asteroids):\n    stack = []\n    for a in asteroids:\n        if not stack or a > 0:\n            stack.append(a)\n        else:\n            while stack and stack[-1] > 0 and stack[-1] < abs(a):\n                stack.pop()\n            if not stack or stack[-1] < 0:\n                stack.append(a)\n            elif stack and stack[-1] == -a:\n                stack.pop()\n    return stack\n\n\ndef main():\n    print(asteroid_collision([5, 10, -5]))\n    print(asteroid_collision([8, -8]))\n    print(asteroid_collision([10, 2, -5]))\n\n\nif __name__ == "__main__":\n    main()\n\n\n\n'})}),"\n",(0,s.jsx)(n.h4,{id:"notes-1",children:"Notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Make the most use of stack and logical if-else statements"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"daily-challenge-905-sort-array-by-parity",children:"Daily challenge: 905. Sort array by parity"}),"\n",(0,s.jsx)(n.h4,{id:"first-approach",children:"First approach"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Append all the even numbers first then add all the odd numbers"}),"\n",(0,s.jsx)(n.li,{children:"Take O(n) space complexity and use two loops"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Solution(object):\n    def sortArrayByParity(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: List[int]\n        """\n        res = []\n        for n in nums:\n            if n % 2 == 0:\n                res.append(n)\n        for n in nums:\n            if n % 2 != 0:\n                res.append(n)\n        return res\n'})}),"\n",(0,s.jsx)(n.h4,{id:"second-approach",children:"Second approach:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"I can improve this by sorting the array in-place to improve space complexity"}),"\n",(0,s.jsx)(n.li,{children:"This problem reminds me of Sort Colors problem"}),"\n",(0,s.jsx)(n.li,{children:"Using two pointers and logical if-else statements"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Solution(object):\n    def sortArrayByParity(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: List[int]\n        """\n        if not nums:\n            return []\n        start = 0\n        end = len(nums) - 1 \n        while start < end:\n            if nums[start] % 2 == 0:\n                start += 1\n            elif nums[end] % 2 != 0:\n                end -= 1\n            else:\n                nums[start], nums[end] = nums[end], nums[start]\n                start += 1\n                end -= 1\n        return nums\n \n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var s=t(7294);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);