"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2544],{6577:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(5893),a=t(1151);const i={title:"Nov 10"},o=void 0,s={id:"learning-journal/2023/November/11_10_23",title:"Nov 10",description:"What I did today:",source:"@site/docs/learning-journal/2023/November/11_10_23.md",sourceDirName:"learning-journal/2023/November",slug:"/learning-journal/2023/November/11_10_23",permalink:"/my-website/docs/learning-journal/2023/November/11_10_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Nov 10"},sidebar:"tutorialSidebar",previous:{title:"November",permalink:"/my-website/docs/category/november"},next:{title:"Nov 11",permalink:"/my-website/docs/learning-journal/2023/November/11_11_23"}},d={},l=[{value:"MD File Generator basic Python program",id:"md-file-generator-basic-python-program",level:3}];function m(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"What I did today:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Learn about Python CLI program"}),"\n",(0,r.jsx)(n.li,{children:"Finish MD File Generator basic Python program"}),"\n",(0,r.jsx)(n.li,{children:"Working on MD File Generatpr Python CLI Program"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When learning new things, you should paste the example code and run it first. Try to figure out what it's doing and then read the documentation"}),"\n",(0,r.jsx)(n.li,{children:"When solving a problem or start a project, if you cannot figure out the main thing, try with the simple/basic step first, yet you still need to things that relevant to the project you're working on to avoit time waste."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"md-file-generator-basic-python-program",children:"MD File Generator basic Python program"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Working with file handling in Python such as create, write, read, and remove files from directory"}),"\n",(0,r.jsx)(n.li,{children:"Working with datetime to make sure that if it's leap year or when it comes to months that have 30 or 31 days, the program will handle correctly."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Practice with datetime"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\n\n\ninput_datetime_1 = "2023/11/20"\ndatetime_1 = datetime.strptime(input_datetime_1, "%Y/%m/%d")\ndate_1 = datetime.strptime(input_datetime_1, "%Y/%m/%d").date()\nprint(input_datetime_1)\nprint(datetime_1)\nprint(date_1)\nprint(type(input_datetime_1))\nprint(type(datetime_1))\nprint(type(date_1))\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"MD Files Generator"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'\nimport os\nimport datetime as d\nfrom datetime import datetime\n\n\ndef md_files_generator(directory):\n    if not os.path.exists(directory):\n        print("Please enter valid directory.")\n\n    today = d.date.today()\n\n    for i in range(1, 8):\n        file_date = today + d.timedelta(days=i)\n        file_name = f"{file_date.strftime(\'%Y%m%d\')}.md"\n        file_path = f"{directory}/{file_name}"\n        with open(file_path, "w") as f:\n            f.write(f"{file_name}")\n\n        print(f"File {file_name} is created successfully at {directory}")\n\n\ndef md_files_generator_by_dates(directory, dates):\n    if not os.path.exists(directory):\n        print("Please enter valid directory.")\n\n    dates = datetime.strptime(dates, "%Y-%m-%d").date()\n    print(dates)\n\n    for i in range(1, 8):\n        file_date = dates + d.timedelta(days=i)\n        file_name = f"{file_date.strftime(\'%Y%m%d\')}.md"\n        print("File name:", file_name)\n        file_path = f"{directory}/{file_name}"\n        with open(file_path, "w") as f:\n            f.write(f"{file_date}")\n        print(f"File {file_name} is created successfully at {directory}")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Menu"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from generator import md_files_generator, md_files_generator_by_dates\n\n\ndef menu():\n    # Greetings line\n    print("--- Welcome to MD Files Generator---")\n    directory = input("Please enter the directory where you want to create your files: ")\n    option = input("Select either of the following options:\\n"\n                   "1. Create files starting from today\\n"\n                   "2. Created files with customized date\\n")\n    if option == "1":\n        md_files_generator(directory)\n    else:\n        dates = input("Please enter the date in the format yyyy-mm-dd")\n        md_files_generator_by_dates(directory, dates)\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Main"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from menu import menu\n\n\ndef main():\n    menu()\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.p,{children:"CLI Python Program"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CLI - Command Line Interface. CLI Python Program is used when you want to create your own your command line to run in terminal to perform certain tasks."}),"\n",(0,r.jsxs)(n.li,{children:["Basic steps to create simple/basic CLI Python program with argparse:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Define functions that you want to perform under certain commandline later."}),"\n",(0,r.jsx)(n.li,{children:"In the main function, start with creating ArgumentParser object to handle commandline arguments"}),"\n",(0,r.jsx)(n.li,{children:"Define arguments by using add_argument method. In this method, you should specify some details such as short command option (one dash), long command option (two dashes), type, help message (when user run program -h)"}),"\n",(0,r.jsx)(n.li,{children:"Implement functionality with parse_args() methods"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Print name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import argparse\n\n\ndef printname(name):\n    print(f"Hello {name}, welcome to my Python CLI program!")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="Welcome to Greeting Program.")\n    parser.add_argument("-p", "--printing", type=str, help="Print out entered name.")\n    args = parser.parse_args()\n\n    printname(args.printing)\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Find Sum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import argparse\n\n\ndef findsum(nums):\n    return sum(nums)\n\n\ndef main():\n    parser = argparse.ArgumentParser("Welcome to Find Sum Program")\n    parser.add_argument("-a", "--add", type=int, nargs="+", help="All the numbers separated by spaces will be added.")\n    args = parser.parse_args()\n    print(findsum(args.add))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Read lines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import argparse\n\n\ndef read_lines(file):\n    with open(file, "r") as f:\n        line = f.read()\n        return line\n\n\ndef main():\n    parser = argparse.ArgumentParser("Welcome to File Handling program.")\n    parser.add_argument("-r", "--read", type=str, help="Read line from file.")\n    args = parser.parse_args()\n    print(read_lines(args.read))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"MD File Generator (not too detail and haven't handle special cases yet)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import argparse\nimport os\nimport datetime\n\n\ndef validate_path(directory):\n    return os.path.exists(directory)\n\n\ndef md_generate(directory):\n    if validate_path(str(directory)):\n        today = datetime.date.today()\n        for i in range(1, 8):\n            file_date = today + datetime.timedelta(days=i)\n            file_name = f"{file_date}.md"\n            file_path = f"{directory}/{file_name}"\n            with open(file_path, "w") as f:\n                f.write(f"{file_date}")\n            print(f"Created {file_name} at {directory}.")\n    else:\n        print("Invalid directory.")\n        quit()\n\n\ndef md_file_generator(directory):\n    today = datetime.date.today()\n    for i in range(1, 8):\n        file_date = today + datetime.timedelta(days=i)\n        file_name = f"{file_date}.md"\n        file_path = os.path.join(directory, file_name)\n        with open(file_path, "w") as f:\n            f.write(f"Created {file_name} at {directory}")\n\n\ndef main():\n    parser = argparse.ArgumentParser("Welcome to MD Files Generator.")\n    parser.add_argument("-c", "--create", type=str, help="Create one new file in the current directory.")\n    parser.add_argument("-g", "--generate", type=str, help="Generate 7 files in the current directory")\n    parser.add_argument("directory", type=str, help="Generate new files.")\n    args = parser.parse_args()\n    # create_file(args.create)\n    # md_generate(args.generate)\n    md_file_generator(args.directory)\n\n\nif __name__ == "__main__":\n    main()\n\n```\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var r=t(7294);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);