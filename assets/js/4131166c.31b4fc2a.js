"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8495],{8012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=t(5893),r=t(1151);const i={title:"Creational Design Patterns (3) - Builder"},l="Creational Design Patterns (3) - Builder",a={id:"learning-journal/dive-into-design-patterns/post_06",title:"Creational Design Patterns (3) - Builder",description:"- Buider is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code",source:"@site/docs/learning-journal/dive-into-design-patterns/post_06.md",sourceDirName:"learning-journal/dive-into-design-patterns",slug:"/learning-journal/dive-into-design-patterns/post_06",permalink:"/docs/learning-journal/dive-into-design-patterns/post_06",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Creational Design Patterns (3) - Builder"},sidebar:"tutorialSidebar",previous:{title:"Creational Design Patterns (2) - Abstract Factory",permalink:"/docs/learning-journal/dive-into-design-patterns/post_05"},next:{title:"Research Topics",permalink:"/docs/category/research-topics"}},o={},c=[{value:"Applicability",id:"applicability",level:2},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"creational-design-patterns-3---builder",children:"Creational Design Patterns (3) - Builder"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Buider is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The Builder pattern suggests that you extract the object construction code out of its own class and move it to separate objects called ",(0,s.jsx)("b",{children:"builders"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Here's the structure of Builder pattern:"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Here's my code when following the structure:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n\nclass Car:\n    def __init__(self, builder):\n        self.seats = builder.seats\n        self.engine = builder.engine\n        self.trip_computer = builder.trip_computer\n        self.GPS = builder.GPS\n\n    def __str__(self):\n        return f"This car has {self.seats} seats, {self.engine} engine, {self.trip_computer} trip computer."\n\n\nclass CarManual:\n    def __init__(self, builder):\n        self.seats = builder.seats\n        self.engine = builder.engine\n        self.trip_computer = builder.trip_computer\n        self.GPS = builder.GPS\n\n    def __str__(self):\n        return f"This is the CAR MANUAL for a car with {self.seats} seats, {self.engine} engine, {self.trip_computer} trip computer."\n\n\nclass Builder(ABC):\n    def __init__(self):\n        self.seats = None\n        self.engine = None\n        self.trip_computer = None\n        self.GPS = None\n\n    @abstractmethod\n    def setSeats(self, seats: int):\n        pass\n\n    @abstractmethod\n    def setEngine(self, engine: str):\n        pass\n\n    @abstractmethod\n    def setTripComputer(self):\n        pass\n\n    @abstractmethod\n    def setGPS(self):\n        pass\n\n\nclass CarBuilder(Builder):\n    def setSeats(self, seats: int):\n        self.seats = seats\n        return self\n\n    def setEngine(self, engine: str):\n        self.engine = engine\n        return self\n\n    def setTripComputer(self):\n        self.trip_computer = "Some trip computer instruction?"\n        return self\n\n    def setGPS(self):\n        self.GPS = "Active GPS"\n        return self\n\n    def get_result(self) -> Car:\n        return Car(self)\n\n\nclass CarManualBuilder(Builder):\n    def setSeats(self, seats: int):\n        self.seats = seats\n        return self\n\n    def setEngine(self, engine: str):\n        self.engine = engine\n        return self\n\n    def setTripComputer(self):\n        self.trip_computer = "Some trip computer instruction for Car Manual"\n        return self\n\n    def setGPS(self):\n        self.GPS = "Active GPS for Car Manual"\n        return self\n\n    def get_result(self) -> CarManual:\n        return CarManual(self)\n\n\ndef main():\n    car_builder = CarBuilder()\n    car = car_builder.setSeats(seats=4).setEngine("V8").setGPS().get_result()\n    print(car)\n    print(car.GPS)\n    car_manual_builder = CarManualBuilder()\n    car_manual = car_manual_builder.setSeats(8).setEngine("V100").setGPS().get_result()\n    print(car_manual)\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"applicability",children:"Applicability"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Use the Builder pattern to get rid of a "telescoping constructor"'}),"\n",(0,s.jsxs)(n.li,{children:["The Builder pattern lets you build onbjects step by step, using only those stesp that you really need.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For example with my code above, I can only set the seats and GPS if I want to, not all attributes are required to be defined."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Use the Builder pattern when you want your code to be able to create different representations of some product"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,s.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can construct objects step by step, defer construction steps or run steps recursively"}),"\n",(0,s.jsx)(n.li,{children:"You can reuse the same construction code when building various representations of products"}),"\n",(0,s.jsx)(n.li,{children:"Single Responsibility Principle. You can isolate complex constructionn code from the business logic of the product."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cons",children:"Cons"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The overall complexity of the code increases since the pattern requires creating multiple new classes"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>l});var s=t(7294);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);