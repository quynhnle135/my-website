"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9964],{9673:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(5893),i=t(1151);const s={title:"Creational Design Patterns - Factory Method vs. Abstract Factory"},o="Factory Method vs. Abstract Factory",r={id:"learning-journal/dive-into-design-patterns/post_09",title:"Creational Design Patterns - Factory Method vs. Abstract Factory",description:"Factory Method",source:"@site/docs/learning-journal/dive-into-design-patterns/post_09.md",sourceDirName:"learning-journal/dive-into-design-patterns",slug:"/learning-journal/dive-into-design-patterns/post_09",permalink:"/docs/learning-journal/dive-into-design-patterns/post_09",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Creational Design Patterns - Factory Method vs. Abstract Factory"},sidebar:"tutorialSidebar",previous:{title:"Creational Design Patterns (5) - Singleton",permalink:"/docs/learning-journal/dive-into-design-patterns/post_08"},next:{title:"A good engineer thinks like a product manager",permalink:"/docs/learning-journal/dive-into-design-patterns/post_10"}},c={},l=[{value:"Factory Method",id:"factory-method",level:2},{value:"Here&#39;s another summary for Factory:",id:"heres-another-summary-for-factory",level:3},{value:"Why can&#39;t I just create a dog instance by calling the Dog() object directly?",id:"why-cant-i-just-create-a-dog-instance-by-calling-the-dog-object-directly",level:3},{value:"Why don&#39;t we use @abstractmethod for speak() function in Animal class?",id:"why-dont-we-use-abstractmethod-for-speak-function-in-animal-class",level:3},{value:"Abstact Factory",id:"abstact-factory",level:2},{value:"Key Differences",id:"key-differences",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"factory-method-vs-abstract-factory",children:"Factory Method vs. Abstract Factory"}),"\n",(0,a.jsx)(n.h2,{id:"factory-method",children:"Factory Method"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Purpose: Create objects without specifying the exact class of object that will be created."}),"\n",(0,a.jsx)(n.li,{children:"Usage: Used when the creation logic of an object might change or can be extended, and when the object creation can be deferred to subclasses"}),"\n",(0,a.jsx)(n.li,{children:"Implementation: A single method (factory method) in a class for creating an object. Subclasses can override this method to change the type of objects will be created"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"heres-another-summary-for-factory",children:"Here's another summary for Factory:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"The Factory design pattern"})," is a creational pattern that ",(0,a.jsx)(n.strong,{children:"centralizes object creation logic"})," in a separate class called a ",(0,a.jsx)(n.strong,{children:'"factory"'}),". This factory then decides which concrete object to create based on specific criteria, instead of the client code directly instantiating the object itself."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Benefits of using Factory:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Encapsulation:"})," Hides the object creation logic, making the code cleaner and more maintainable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Flexibility:"})," Allows for easily adding new types of objects without modifying existing code."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Decoupling:"})," Separates the client code from the creation logic, making it easier to test and reuse."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Single Responsibility Principle:"})," Follows the SRP by focusing the factory solely on object creation."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Imagine a car factory:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"You only need to request a specific model, like a sedan or SUV."}),"\n",(0,a.jsx)(n.li,{children:"The factory handles all the complex steps involved in building that specific car."}),"\n",(0,a.jsx)(n.li,{children:"You don't need to know the details of how each car is built."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Likewise, in software:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"You request a specific type of object from the factory."}),"\n",(0,a.jsx)(n.li,{children:"The factory creates and returns the appropriate object based on your request."}),"\n",(0,a.jsx)(n.li,{children:"You don't need to know the details of how each object is created."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"When to use Factory:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"When you have a superclass with multiple subclasses and need to create objects of different types based on specific conditions."}),"\n",(0,a.jsx)(n.li,{children:"When you want to hide the complexity of object creation from the client code."}),"\n",(0,a.jsx)(n.li,{children:"When you want to increase the flexibility and maintainability of your code."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"In short, Factory makes your code cleaner, more flexible, and easier to maintain."})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Animal:\n    def speak(self):\n        pass\n\n\nclass Dog(Animal):\n    def speak(self):\n        print("WOOF WOOF")\n\n\nclass Cat(Animal):\n    def speak(self):\n        print("MEOW MEOW")\n\n\nclass AnimalFactory:\n     def create_animal(self, animal_type: str):\n        if animal_type == "dog":\n             return Dog()\n        elif animal_type == "cat":\n            return Cat()\n        else:\n            raise ValueError("Unknown animal type")\n\n\nfactory = AnimalFactory()\ndog = factory.create_animal(animal_type="dog")\ndog.speak()\ncat = factory.create_animal(animal_type="cat")\ncat.speak()\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Output:\n>>> WOOF WOOF\n>>> MEOW MEOW\n"})}),"\n",(0,a.jsx)(n.h3,{id:"why-cant-i-just-create-a-dog-instance-by-calling-the-dog-object-directly",children:"Why can't I just create a dog instance by calling the Dog() object directly?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Decoupling code: Factory methods decouple the creation of objects from their usage, which means that the rest of your code doesn't need to know about the concrete classes required to create these objects. As the example above, user doesn't need to know if there're subclasses ",(0,a.jsx)(n.code,{children:"Dog()"})," or ",(0,a.jsx)(n.code,{children:"Cat()"})," or any animal subclass; they're still able to create an Animal subclass by calling ",(0,a.jsx)(n.code,{children:"AnimalFactory()"})]}),"\n",(0,a.jsx)(n.li,{children:"Flexibility and Extensibility: Adding new types or new Animal subclasses become easier and doesn't require changing the client code. You can extend the factory to handle new types, providing greater flexibility and making the codebase more maintainable"}),"\n",(0,a.jsx)(n.li,{children:"Conditional Logic for Object Creation and consistency in Object Creation: Ensuring that all objects of a certain type are created with consistent initialization logical can be crucial in some applications. A factory method centralize this creation logic."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"=> While direct instantiation is simpler and suitable for many cases, the Factory Method pattern offers benefits in term of code maintainability, flexibility, and scalability, especially in complex system or when future extension are anticipated."}),"\n",(0,a.jsx)(n.h3,{id:"why-dont-we-use-abstractmethod-for-speak-function-in-animal-class",children:"Why don't we use @abstractmethod for speak() function in Animal class?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If you're sure that you won't create any instance from Animal object, you can add ",(0,a.jsx)(n.code,{children:"@abstractmethod"})," decorator as well as import Abstract Base Class and mark ",(0,a.jsx)(n.code,{children:"Animal"}),"  as ",(0,a.jsx)(n.code,{children:"abc"})]}),"\n",(0,a.jsxs)(n.li,{children:["However, it's still possible to include ",(0,a.jsx)(n.code,{children:"@abstractmethod"})," in the example above, which makes it clear to anyone reading the code that ",(0,a.jsx)(n.code,{children:"speak()"})," is required for every Animal subclasses and can be overriden."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"abstact-factory",children:"Abstact Factory"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Purpose: Provide an interface for ",(0,a.jsx)("b",{children:"creating families of related or dependent objects"})," without specifying their concrete classes."]}),"\n",(0,a.jsx)(n.li,{children:"Usage: Used when the system needs to be independent of how its products are created, composed, and represented, and when families of related product objects are designed to be used together."}),"\n",(0,a.jsx)(n.li,{children:"Implementation: Involve multiple factory methods, each for creating a different type of object"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n\nclass WidgetFactory(ABC):\n    @abstractmethod\n    def create_button(self):\n        pass\n\n    @abstractmethod\n    def create_checkbox(self):\n        pass\n\n\nclass LightThemeWidgetFactory(WidgetFactory):\n    def create_button(self):\n        return LightThemeButton()\n\n    def create_checkbox(self):\n        return LightThemeCheckbox()\n\n\nclass DarkThemeWidgetFactory(WidgetFactory):\n    def create_button(self):\n        return DarkThemeButton()\n\n    def create_checkbox(self):\n        return DarkThemeCheckbox()\n\n\nclass Button(ABC):\n    @abstractmethod\n    def paint(self):\n        pass\n\n\nclass LightThemeButton(Button):\n    def paint(self):\n        return "Rendering a button in light theme"\n\n\nclass DarkThemeButton(Button):\n    def paint(self):\n        return "Rendering a button in dark theme"\n\n\nclass Checkbox(ABC):\n    @abstractmethod\n    def paint(self):\n        pass\n\n\nclass LightThemeCheckbox(Checkbox):\n    def paint(self):\n        return "Rendering a checkbox in light theme"\n\n\nclass DarkThemeCheckbox(Checkbox):\n    def paint(self):\n        return "Rendering a checkbox in dark theme"\n\n\n# Client code\ndef client_code(factory: WidgetFactory):\n    button = factory.create_button()\n    checkbox = factory.create_checkbox()\n    print(button.paint())\n    print(checkbox.paint())\n\n\ndef main():\n    user_choice = input("Do you want Light Theme or Dark Theme: ")\n    if user_choice == "light":\n        factory = LightThemeWidgetFactory()\n        client_code(factory)\n    else:\n        factory = DarkThemeWidgetFactory()\n        client_code(factory)\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["In this example, there are multiple factories are applied: ",(0,a.jsx)(n.code,{children:"WidgetFactory"}),", ",(0,a.jsx)(n.code,{children:"LightThemeWidgetFactory"}),", and ",(0,a.jsx)(n.code,{children:"DarkThemeFactory"})]}),"\n",(0,a.jsx)(n.li,{children:"By applying the Abstract Method, a set of widget will be produced or returned based on the theme (Light or Dark)"}),"\n",(0,a.jsxs)(n.li,{children:["Another example: You want to make your house as vintage as possible so you should buy vintage furniture set as well. A furniture set may include television, couch, chairs, and tables. By calling the ",(0,a.jsx)(n.code,{children:"VitangeFurnitureFactory"}),", you can easily get the whole set of vintages objects as mentioned previously."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"key-differences",children:"Key Differences"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Scale of abstraction:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Factory method: Operate at a single object level"}),"\n",(0,a.jsx)(n.li,{children:"Abstract Factory: Work with families of related objects"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Method of creation:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Factory method: Involve a single method to create one type of object"}),"\n",(0,a.jsx)(n.li,{children:"Abstract Factory: Use multiple factory methods to create realted objects"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Flexibility:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Factory method: More flexible at the individual object level, as subclasses can override the factory method to change the way objects are created."}),"\n",(0,a.jsx)(n.li,{children:"Abstract Factory: Offers flexibility at the family of related objects level, allowing you to switch between different families of products seamlessly"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var a=t(7294);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);