"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2837],{3905:(n,e,r)=>{r.d(e,{Zo:()=>d,kt:()=>_});var t=r(7294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function a(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function u(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function o(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},a=Object.keys(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var l=t.createContext({}),s=function(n){var e=t.useContext(l),r=e;return n&&(r="function"==typeof n?n(e):u(u({},e),n)),r},d=function(n){var e=s(n.components);return t.createElement(l.Provider,{value:e},n.children)},m="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},c=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,a=n.originalType,l=n.parentName,d=o(n,["components","mdxType","originalType","parentName"]),m=s(r),c=i,_=m["".concat(l,".").concat(c)]||m[c]||p[c]||a;return r?t.createElement(_,u(u({ref:e},d),{},{components:r})):t.createElement(_,u({ref:e},d))}));function _(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=r.length,u=new Array(a);u[0]=c;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o[m]="string"==typeof n?n:i,u[1]=o;for(var s=2;s<a;s++)u[s]=r[s];return t.createElement.apply(null,u)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},8178:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var t=r(7462),i=(r(7294),r(3905));const a={title:"Sep 18",description:"Mon, Sep 18"},u=void 0,o={unversionedId:"coding-journal/2023/September/sep_18_23",id:"coding-journal/2023/September/sep_18_23",title:"Sep 18",description:"Mon, Sep 18",source:"@site/docs/coding-journal/2023/September/sep_18_23.md",sourceDirName:"coding-journal/2023/September",slug:"/coding-journal/2023/September/sep_18_23",permalink:"/my-website/docs/coding-journal/2023/September/sep_18_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding-journal/2023/September/sep_18_23.md",tags:[],version:"current",frontMatter:{title:"Sep 18",description:"Mon, Sep 18"},sidebar:"tutorialSidebar",previous:{title:"Sep 17",permalink:"/my-website/docs/coding-journal/2023/September/sep_17_23"},next:{title:"Sep 19",permalink:"/my-website/docs/coding-journal/2023/September/sep_19_23"}},l={},s=[{value:"Practice Coding Interview on Pramp",id:"practice-coding-interview-on-pramp",level:2},{value:"Array Quadruplet",id:"array-quadruplet",level:5},{value:"Number of Islands",id:"number-of-islands",level:5},{value:"Leetcode grinding",id:"leetcode-grinding",level:2},{value:"Maximum in Sliding Window",id:"maximum-in-sliding-window",level:5},{value:"Repeated DNA sequence",id:"repeated-dna-sequence",level:5},{value:"Find duplicated numnber",id:"find-duplicated-numnber",level:5},{value:"Note:",id:"note",level:2}],d={toc:s},m="wrapper";function p(n){let{components:e,...r}=n;return(0,i.kt)(m,(0,t.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"practice-coding-interview-on-pramp"},"Practice Coding Interview on Pramp"),(0,i.kt)("h5",{id:"array-quadruplet"},"Array Quadruplet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def find_array_quadruplet(nums, target):\n    if len(nums) < 4:\n        return []\n    nums.sort()\n    for i in range(len(nums) - 3):\n        for j in range(i + 1, len(nums) - 2):\n            low = j + 1\n            high = len(nums) - 1\n            s = target - nums[i] - nums[j]\n            while low < high:\n                quadruplet = [nums[i], nums[j], nums[low], nums[high]]\n                cur_sum = nums[high] + nums[low]\n                if cur_sum == s:\n                    return quadruplet\n                elif cur_sum > s:\n                    high -= 1\n                else:\n                    low += 1\n    return []\n\n\ndef main():\n    print(find_array_quadruplet([1, 4, 6, 2, 3, 5], 15))\n    print(find_array_quadruplet([10, 40, 30, 20, 90, 100], 100))\n\n\nif __name__ == "__main__":\n    main()\n\n')),(0,i.kt)("h5",{id:"number-of-islands"},"Number of Islands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def find_num_of_islands(matrix):\n    count = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == "1":\n                traversal(matrix, i, j)\n                count += 1\n    return count\n\n\ndef traversal(matrix, row, col):\n    if col < 0 or row < 0 or row >= len(matrix) or col >= len(matrix[0]) or matrix[row][col] != "1":\n        return\n    matrix[row][col] = "0"\n    traversal(matrix, row + 1, col)\n    traversal(matrix, row - 1, col)\n    traversal(matrix, row, col + 1)\n    traversal(matrix, row, col - 1)\n\n\ndef main():\n    print(find_num_of_islands([\n                                  ["1","1","1","1","0"],\n                                  ["1","1","0","1","0"],\n                                  ["1","1","0","0","0"],\n                                  ["0","0","0","0","0"]\n                              ]))\n\n    print(find_num_of_islands([\n                                  ["1","1","0","0","0"],\n                                  ["1","1","0","0","0"],\n                                  ["0","0","1","0","0"],\n                                  ["0","0","0","1","1"]\n                              ]))\n\n\nif __name__ == "__main__":\n    main()\n\n')),(0,i.kt)("h2",{id:"leetcode-grinding"},"Leetcode grinding"),(0,i.kt)("h5",{id:"maximum-in-sliding-window"},"Maximum in Sliding Window"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import deque\n\n\ndef find_max_in_sliding_window_brute_force(nums, w):\n    if len(nums) < w:\n        return []\n\n    result = []\n    cur_max = float("-inf")\n    for i in range(len(nums) - w + 1):\n        cur_window = nums[i: i + w]\n        for num in cur_window:\n            if num > cur_max:\n                cur_max = num\n        result.append(cur_max)\n        cur_max = float("-inf")\n    return result\n\n\ndef find_max_sliding_window(nums, w):\n    if len(nums) < w:\n        return []\n\n    result = []\n    for start in range(len(nums) - w + 1):\n        sub_list = nums[start: start + w]\n        max_value = max(sub_list)\n        result.append(max_value)\n    return result\n\n\n# Using deque\ndef find_max_in_sliding_window(nums, w):\n    res = []\n    queue = deque()\n\n    for i, num in enumerate(nums):\n        while queue and queue[0] < i - w + 1:\n            queue.popleft()\n\n        while queue and nums[queue[-1]] < num:\n            queue.pop()\n\n        queue.append(i)\n\n        if i >= w - 1:\n            res.append(nums[queue[0]])\n\n    return res\n\n\ndef main():\n    print(find_max_in_sliding_window_brute_force(nums=[-4, 2, -5, 3, 6], w=3))  # [2, 3, 6]\n    print(find_max_sliding_window(nums=[-4, 2, -5, 3, 6], w=3))  # [2, 3, 6]\n\n    print(find_max_in_sliding_window_brute_force(nums=[-4, 2, -5, 3, 6], w=2))  # [2, 2, 3, 6]\n    print(find_max_sliding_window(nums=[-4, 2, -5, 3, 6], w=2))\n\n    print(find_max_in_sliding_window_brute_force(nums=[-4, 2, -5, 3, 6], w=1))  # [-4, 2, -5, 3, 6]\n    print(find_max_sliding_window(nums=[-4, 2, -5, 3, 6], w=1))  # [-4, 2, -5, 3, 6]\n\n    print(find_max_in_sliding_window_brute_force(nums=[1, 2, 3, 4, 5], w=3))  # [3, 4, 5]\n    print(find_max_sliding_window(nums=[1, 2, 3, 4, 5], w=3))  # [3, 4, 5]\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h5",{id:"repeated-dna-sequence"},"Repeated DNA sequence"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def find_repeated_dna_sequences(s):\n    if len(s) < 10:\n        return []\n    seen = set()\n    repeated = set()\n    for i in range(len(s) - 9):\n        sequence = s[i: i + 10]\n        if sequence in seen:\n            repeated.add(sequence)\n        else:\n            seen.add(sequence)\n    return list[repeated]\n\n\ndef main():\n    print(find_repeated_dna_sequences("AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"))\n    print(find_repeated_dna_sequences("AAAAAAAAAAAA"))\n\n\nif __name__ == "__main__":\n    main()\n\n\n')),(0,i.kt)("h5",{id:"find-duplicated-numnber"},"Find duplicated numnber"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def find_duplicate_number(nums):\n    fast = slow = nums[0]\n\n    while True:\n        fast = nums[nums[fast]]\n        slow = nums[slow]\n        if fast == slow:\n            break\n    slow = nums[0]\n    while fast != slow:\n        slow = nums[slow]\n        fast = nums[fast]\n    return fast\n\n\ndef main():\n    print(find_duplicate_number([2, 3, 1, 2]))\n    print(find_duplicate_number([3, 2, 1, 1]))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h2",{id:"note"},"Note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Should time when interviewing other people and vice versa"),(0,i.kt)("li",{parentName:"ul"},"Should work more on graph, dfs, and bfs"),(0,i.kt)("li",{parentName:"ul"},"Should work on recursion and pay attention to base case")))}p.isMDXComponent=!0}}]);