"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2583],{3298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=n(5893),a=n(1151);const i={title:"Aug 28",description:"Mon, Aug 28"},l="Practice class-based views and form in Django",r={id:"learning-journal/2023/August/aug_28_23",title:"Aug 28",description:"Mon, Aug 28",source:"@site/docs/learning-journal/2023/August/aug_28_23.md",sourceDirName:"learning-journal/2023/August",slug:"/learning-journal/2023/August/aug_28_23",permalink:"/my-website/docs/learning-journal/2023/August/aug_28_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Aug 28",description:"Mon, Aug 28"},sidebar:"tutorialSidebar",previous:{title:"Aug 27",permalink:"/my-website/docs/learning-journal/2023/August/aug_27_23"},next:{title:"Aug 29",permalink:"/my-website/docs/learning-journal/2023/August/aug_29_23"}},o={},d=[{value:"To Do List app",id:"to-do-list-app",level:3}];function c(e){const t={code:"code",h1:"h1",h3:"h3",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"practice-class-based-views-and-form-in-django",children:"Practice class-based views and form in Django"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="myproject/settings.py"',children:"INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todolist.apps.TodolistConfig',\n    'introduce.apps.IntroduceConfig',\n]\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="myproject/urls.py"',children:"from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tasks/', include('todolist.urls')),\n    path('people/', include('introduce.urls'))\n]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"to-do-list-app",children:"To Do List app"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="todolist/models.py"',children:"from django.db import models\n\n# Create your models here.\nclass Task(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    completed = models.BooleanField(default=False)\n\n    def __str__(self) -> str:\n        return self.title\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="todolist/admin.py"',children:"from django.contrib import admin\nfrom .models import Task\n\n# Register your models here.\nadmin.site.register(Task)\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="todolist/views.py"',children:"from django.shortcuts import render\nfrom django.views import generic\nfrom .models import Task\nfrom django.urls import reverse_lazy\n\n# Create your views here.\nclass TaskList(generic.ListView):\n    model = Task\n    context_object_name = \"tasks\"\n\n\nclass TaskDetail(generic.DetailView):\n    model = Task\n\n\nclass TaskCreate(generic.CreateView):\n    model = Task\n    fields = \"__all__\"\n    success_url = reverse_lazy('tasks')\n\n\nclass TaskDelete(generic.DeleteView):\n    model = Task\n    success_url = reverse_lazy('tasks')\n\n\nclass TaskUpdate(generic.UpdateView):\n    model = Task\n    fields = \"__all__\"\n    success_url = reverse_lazy('tasks')\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="todolist/urls.py"',children:"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('tasks/', views.TaskList.as_view(), name=\"tasks\"),\n    path('tasks/<int:pk>/', views.TaskDetail.as_view(), name=\"task\"),\n    path('tasks/create', views.TaskCreate.as_view(), name=\"task-create\"),\n    path('tasks/<int:pk>/delete', views.TaskDelete.as_view(), name=\"task-delete\"),\n    path('tasks/<int:pk>/update', views.TaskUpdate.as_view(), name=\"task-update\"),\n]\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:'title="todolist/templates/todolist/task_confirm_delete.html"',children:'<form method="POST">\n    {% csrf_token %}\n    <p>Are you you sure you want to delete task <span>{{task.title}}</span>?</p>\n    <input type="submit" value="Confirm">\n</form>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:'title="todolist/templates/todolist/task_detail.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Task Detail</title>\n</head>\n<body>\n    <h1>Task Detail</h1>\n    <h3>{{task.title}}</h3>\n    <p>{{task.description}}</p>\n\n    <a href="{% url \'tasks\' %}">Go back?</a>\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:'title="todolist/templates/todolist/task_form.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Create Task</title>\n</head>\n<body>\n    <h1>Let\'s create new task!</h1>\n    <form method="POST">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type="submit">Create Task</button>\n    </form>\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:'title="todolist/templates/todolist/task_list.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Tasks</title>\n</head>\n<body>\n    <h1>All tasks</h1>\n    <ul>\n        {% for task in tasks %}\n        <li>{{task.title}}</li>\n        <a href="{% url \'task\' task.id %}">View</a>\n        <a href="{% url \'task-delete\' task.id %}">Delete</a>\n        <a href="{% url \'task-update\' task.id %}">Update</a>\n        {% endfor %}\n    </ul>\n    \n    <br>\n    <a href="{% url \'task-create\' %}">Create new task?</a>\n    \n    \n</body>\n</html>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:'title="todolist/templates/todolist/task_update_form.html"',children:'<form method="POST">\n    {% csrf_token %}\n    {{form.as_p}}\n    <input type="submit" value="Update">\n</form>\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>l});var s=n(7294);const a={},i=s.createContext(a);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);