"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2209],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>d});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function u(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?u(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},u=Object.keys(e);for(t=0;t<u.length;t++)r=u[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(t=0;t<u.length;t++)r=u[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=t.createContext({}),o=function(e){var n=t.useContext(m),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=o(e.components);return t.createElement(m.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,u=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=o(r),f=a,d=l["".concat(m,".").concat(f)]||l[f]||p[f]||u;return r?t.createElement(d,i(i({ref:n},c),{},{components:r})):t.createElement(d,i({ref:n},c))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var u=r.length,i=new Array(u);i[0]=f;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var o=2;o<u;o++)i[o]=r[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2189:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>u,metadata:()=>s,toc:()=>o});var t=r(7462),a=(r(7294),r(3905));const u={title:"Aug 24",description:"Thu, Aug 24"},i=void 0,s={unversionedId:"daily-practice/2023/August/aug_24_23",id:"daily-practice/2023/August/aug_24_23",title:"Aug 24",description:"Thu, Aug 24",source:"@site/docs/daily-practice/2023/August/aug_24_23.md",sourceDirName:"daily-practice/2023/August",slug:"/daily-practice/2023/August/aug_24_23",permalink:"/my-website/docs/daily-practice/2023/August/aug_24_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Aug 24",description:"Thu, Aug 24"},sidebar:"tutorialSidebar",previous:{title:"Aug 23",permalink:"/my-website/docs/daily-practice/2023/August/aug_23_23"},next:{title:"Aug 28",permalink:"/my-website/docs/daily-practice/2023/August/aug_28_23"}},m={},o=[{value:"Minimum Subarray Sum",id:"minimum-subarray-sum",level:3},{value:"Maximum Average Subarray",id:"maximum-average-subarray",level:3}],c={toc:o},l="wrapper";function p(e){let{components:n,...r}=e;return(0,a.kt)(l,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"minimum-subarray-sum"},"Minimum Subarray Sum"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def find_min_subarray(nums, target):\n    start = 0\n    res = float('inf')\n    cur_sum = 0\n    for end in range(len(nums)):\n        cur_sum += nums[end]\n        while cur_sum >= target:\n            cur_window_len = end + start - 1\n            res = min(res, cur_window_len)\n            cur_sum -= nums[start]\n\n    if res != float('inf'):\n        return res\n\n    return 0\n\n\ndef main():\n    print(find_min_subarray(nums=[2, 3, 1, 2, 4, 3], target=7))\n    print(find_min_subarray(nums=[2, 3, 4, 5, 9], target=9))\n    print(find_min_subarray(nums=[1, 1, 1, 1, 1], target=11))\n    print(find_min_subarray(nums=[10, 10, 10, 10, 10], target=9))\n\n\nif __name__ == \"__main__\":\n    main()\n")),(0,a.kt)("h3",{id:"maximum-average-subarray"},"Maximum Average Subarray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def find_max_sub(nums, k):\n    start = 0\n    res = float('-inf')\n    cur_sum = 0\n    for end in range(len(nums)):\n        cur_sum += nums[end]\n        if (end - start + 1) == k:\n            res = max(res, cur_sum)\n            cur_sum -= nums[start]\n            start += 1\n    return float(res) / k\n\n\ndef main():\n    print(find_max_sub(nums=[1, 12, -5, -6, 50, 3], k=4))  # 12.75\n    print(find_max_sub(nums=[5], k=1))  # 5\n\n\nif __name__ == \"__main__\":\n    main()\n")))}p.isMDXComponent=!0}}]);