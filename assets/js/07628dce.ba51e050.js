"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5381],{8599:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=o(5893),t=o(1151);const s={title:"Creational Design Patterns (2) - Abstract Factory"},i="Creational Design Patterns (2) - Abstract Factory",l={id:"tech-blogs/dive-into-design-patterns/post_05",title:"Creational Design Patterns (2) - Abstract Factory",description:"Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes",source:"@site/docs/tech-blogs/dive-into-design-patterns/post_05.md",sourceDirName:"tech-blogs/dive-into-design-patterns",slug:"/tech-blogs/dive-into-design-patterns/post_05",permalink:"/docs/tech-blogs/dive-into-design-patterns/post_05",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Creational Design Patterns (2) - Abstract Factory"},sidebar:"tutorialSidebar",previous:{title:"Creational Design Patterns (1) - Factory Method",permalink:"/docs/tech-blogs/dive-into-design-patterns/post_04"},next:{title:"Creational Design Patterns (3) - Builder",permalink:"/docs/tech-blogs/dive-into-design-patterns/post_06"}},a={},c=[{value:"Applicability",id:"applicability",level:2},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"creational-design-patterns-2---abstract-factory",children:"Creational Design Patterns (2) - Abstract Factory"}),"\n",(0,r.jsx)(e.p,{children:"Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes"}),"\n",(0,r.jsx)(e.h2,{id:"applicability",children:"Applicability"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use the Abstract Factory when your code needs to work with various families of related products, but you don't want it to depend on the concrete classes of those products - they might be unknown beforehand or you simply want to allow for future extensibility"}),"\n",(0,r.jsx)(e.li,{children:"Consider implementing Abstract Factory when you have a class with a set of Factory Methods that blur its primary responsibility"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,r.jsx)(e.h3,{id:"pros",children:"Pros:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"You can be sure that the products you're getting from a factory are compatible with each other"}),"\n",(0,r.jsx)(e.li,{children:"You avoid tight coupling between Concrete Products and client code"}),"\n",(0,r.jsx)(e.li,{children:"Single Responsibility Principle. You can extract the product creation code into one place, making the code easier to support"}),"\n",(0,r.jsx)(e.li,{children:"Open and Closed Principle. You can introduce new variants of products without breaking existing client code"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"cons",children:"Cons:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"The code may become more complicated than it should be since a lot of new interfaces and classes are introduced along with the pattern"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Here's an example of applying Abstract Factory"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n\nclass Television(ABC):\n    def __init__(self, brand: str, model: str, color: str, price: float, size: int):\n        self.brand = brand\n        self.model = model\n        self.color = color\n        self.price = price\n        self.size = size\n\n    @abstractmethod\n    def display_info(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_on(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_off(self) -> None:\n        pass\n\n\nclass ModernTelevision(Television):\n    def display_info(self) -> None:\n        print("---Modern Television Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {str(self.price)}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on MODERN TELEVISION...")\n\n    def turn_off(self) -> None:\n        print("Turning off MODERN TELEVISION...")\n\n\nclass VintageTelevision(Television):\n    def display_info(self) -> None:\n        print("---Vintage Television Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {str(self.price)}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on VINTAGE TELEVISION...")\n\n    def turn_off(self) -> None:\n        print("Turning off VINTAGE TELEVISION...")\n\n\nclass Cooker(ABC):\n    def __init__(self, brand: str, model: str, color: str, price: float, size: int):\n        self.brand = brand\n        self.model = model\n        self.color = color\n        self.price = price\n        self.size = size\n\n    @abstractmethod\n    def display_info(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_on(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_off(self) -> None:\n        pass\n\n\nclass ModernCooker(Cooker):\n    def display_info(self) -> None:\n        print("---Modern Cooker Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {str(self.price)}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on MODERN Cooker...")\n\n    def turn_off(self) -> None:\n        print("Turning off MODERN Cooker...")\n\n\nclass VintageCooker(Cooker):\n    def display_info(self) -> None:\n        print("---Vintage Cooker Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {self.price}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on VINTAGE Cooker...")\n\n    def turn_off(self) -> None:\n        print("Turning off VINTAGE Cooker...")\n\n\nclass ApplianceFactory(ABC):\n    @abstractmethod\n    def produce_television(self, brand: str, model: str, color: str, price: float, size: int) -> Television:\n        pass\n\n    @abstractmethod\n    def produce_cooker(self, brand: str, model: str, color: str, price: float, size: int):\n        pass\n\n\nclass ModernApplianceFactory(ApplianceFactory):\n    def produce_television(self, brand: str, model: str, color: str, price: float, size: int) -> ModernTelevision:\n        return ModernTelevision(brand=brand, model=model, color=color, price=price, size=size)\n\n    def produce_cooker(self, brand: str, model: str, color: str, price: float, size: int) -> ModernCooker:\n        return ModernCooker(brand=brand, model=model, color=color, price=price, size=size)\n\n\nclass VintageApplianceFactory(ApplianceFactory):\n    def produce_television(self, brand: str, model: str, color: str, price: float, size: int) -> VintageTelevision:\n        return VintageTelevision(brand=brand, model=model, color=color, price=price, size=size)\n\n    def produce_cooker(self, brand: str, model: str, color: str, price: float, size: int) -> VintageCooker:\n        return VintageCooker(brand=brand, model=model, color=color, price=price, size=size)\n\n\ndef client_code(factory: ApplianceFactory):\n    tv = factory.produce_television(brand="LG", model="2023", color="white", price=100, size=10)\n    cooker = factory.produce_cooker(brand="LG", model="2023", color="white", price=100, size=10)\n    tv.display_info()\n    cooker.display_info()\n\n\nif __name__ == "__main__":\n    modern = ModernApplianceFactory()\n    client_code(modern)\n'})}),"\n",(0,r.jsx)(e.p,{children:"However, I want user interact with the program by providing inputs so here's another version"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n\nclass Television(ABC):\n    def __init__(self, brand: str, model: str, color: str, price: float, size: int):\n        self.brand = brand\n        self.model = model\n        self.color = color\n        self.price = price\n        self.size = size\n\n    @abstractmethod\n    def display_info(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_on(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_off(self) -> None:\n        pass\n\n\nclass ModernTelevision(Television):\n    def display_info(self) -> None:\n        print("---Modern Television Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {str(self.price)}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on MODERN TELEVISION...")\n\n    def turn_off(self) -> None:\n        print("Turning off MODERN TELEVISION...")\n\n\nclass VintageTelevision(Television):\n    def display_info(self) -> None:\n        print("---Vintage Television Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {str(self.price)}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on VINTAGE TELEVISION...")\n\n    def turn_off(self) -> None:\n        print("Turning off VINTAGE TELEVISION...")\n\n\nclass Cooker(ABC):\n    def __init__(self, brand: str, model: str, color: str, price: float, size: int):\n        self.brand = brand\n        self.model = model\n        self.color = color\n        self.price = price\n        self.size = size\n\n    @abstractmethod\n    def display_info(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_on(self) -> None:\n        pass\n\n    @abstractmethod\n    def turn_off(self) -> None:\n        pass\n\n\nclass ModernCooker(Cooker):\n    def display_info(self) -> None:\n        print("---Modern Cooker Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {str(self.price)}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on MODERN Cooker...")\n\n    def turn_off(self) -> None:\n        print("Turning off MODERN Cooker...")\n\n\nclass VintageCooker(Cooker):\n    def display_info(self) -> None:\n        print("---Vintage Cooker Info---\\n"\n              f"Brand: {self.brand}\\n"\n              f"Model: {self.model}\\n"\n              f"Color: {self.color}\\n"\n              f"Price: {self.price}\\n"\n              f"Size: {str(self.size)}")\n\n    def turn_on(self) -> None:\n        print("Turning on VINTAGE Cooker...")\n\n    def turn_off(self) -> None:\n        print("Turning off VINTAGE Cooker...")\n\n\nclass ApplianceFactory(ABC):\n    @abstractmethod\n    def produce_television(self, brand: str, model: str, color: str, price: float, size: int) -> Television:\n        pass\n\n    @abstractmethod\n    def produce_cooker(self, brand: str, model: str, color: str, price: float, size: int):\n        pass\n\n\nclass ModernApplianceFactory(ApplianceFactory):\n    def produce_television(self, brand: str, model: str, color: str, price: float, size: int) -> ModernTelevision:\n        return ModernTelevision(brand=brand, model=model, color=color, price=price, size=size)\n\n    def produce_cooker(self, brand: str, model: str, color: str, price: float, size: int) -> ModernCooker:\n        return ModernCooker(brand=brand, model=model, color=color, price=price, size=size)\n\n\nclass VintageApplianceFactory(ApplianceFactory):\n    def produce_television(self, brand: str, model: str, color: str, price: float, size: int) -> VintageTelevision:\n        return VintageTelevision(brand=brand, model=model, color=color, price=price, size=size)\n\n    def produce_cooker(self, brand: str, model: str, color: str, price: float, size: int) -> VintageCooker:\n        return VintageCooker(brand=brand, model=model, color=color, price=price, size=size)\n\n\ndef get_appliance_detail():\n    brand = input("Enter brand name: ")\n    model = input("Enter model name: ")\n    color = input("Enter color: ")\n    price = float(input("Enter price: "))\n    size = int(input("Enter size: "))\n\n    return brand, model, color, price, size\n\n\ndef choose_factory():\n    choice = input("Enter factory type (modern/vintage): ").lower()\n    if choice == "modern":\n        return ModernApplianceFactory()\n    else:\n        return VintageApplianceFactory()\n\n\ndef client_code(factory: ApplianceFactory):\n    brand, model, color, price, size = get_appliance_detail()\n    tv = factory.produce_television(brand, model, color, price, size)\n    cooker = factory.produce_cooker(brand, model, color, price, size)\n    tv.turn_on()\n    tv.display_info()\n    tv.turn_off()\n\n    cooker.turn_on()\n    cooker.display_info()\n    cooker.turn_off()\n\n\nif __name__ == "__main__":\n    factory = choose_factory()\n    client_code(factory)\n'})})]})}function f(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},1151:(n,e,o)=>{o.d(e,{Z:()=>l,a:()=>i});var r=o(7294);const t={},s=r.createContext(t);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);