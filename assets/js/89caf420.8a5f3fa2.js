"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8833],{1489:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var t=i(5893),a=i(1151);const r={title:"Interview Preparation - JavaScript (1)"},s="Interview Preparation - JavaScript (1)",l={id:"tech-blogs/become-fullstack-developer/interview_prep_js_1",title:"Interview Preparation - JavaScript (1)",description:"What is JavaScript?",source:"@site/docs/tech-blogs/become-fullstack-developer/interview_prep_js_1.md",sourceDirName:"tech-blogs/become-fullstack-developer",slug:"/tech-blogs/become-fullstack-developer/interview_prep_js_1",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_1",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Interview Preparation - JavaScript (1)"},sidebar:"tutorialSidebar",previous:{title:"Interview Preparation - HTML and CSS",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_html"},next:{title:"Interview Preparation - JavaScript (2)",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_2"}},c={},o=[{value:"What is JavaScript?",id:"what-is-javascript",level:3},{value:"What is JavaScript engine?",id:"what-is-javascript-engine",level:3},{value:"What is Just-In-Time compilation? What&#39;s the difference between JIT compilation and interpretation?",id:"what-is-just-in-time-compilation-whats-the-difference-between-jit-compilation-and-interpretation",level:3},{value:"What is REPL?",id:"what-is-repl",level:3},{value:"When is the biggest JavaScript release? What are some new features of ES6?",id:"when-is-the-biggest-javascript-release-what-are-some-new-features-of-es6",level:3},{value:"What is dynamic typing? What&#39;s the difference bewteen dynamic typing and static typing?",id:"what-is-dynamic-typing-whats-the-difference-bewteen-dynamic-typing-and-static-typing",level:3},{value:"What are primitive data types in JavaScript?",id:"what-are-primitive-data-types-in-javascript",level:3},{value:"What are reference data types in JavaScript?",id:"what-are-reference-data-types-in-javascript",level:3},{value:"What are the differences between Object and Map in JavaScript?",id:"what-are-the-differences-between-object-and-map-in-javascript",level:3},{value:"What is coercion? What is conversion? What is the difference between coercion and conversion?",id:"what-is-coercion-what-is-conversion-what-is-the-difference-between-coercion-and-conversion",level:3},{value:"What is short circuting in JavaScript?",id:"what-is-short-circuting-in-javascript",level:3},{value:"What are 3 ways to declare a function?",id:"what-are-3-ways-to-declare-a-function",level:3},{value:"What are 3 ways to iterate an array?",id:"what-are-3-ways-to-iterate-an-array",level:3},{value:"What are the differences between Set and Array?",id:"what-are-the-differences-between-set-and-array",level:3},{value:"What is the difference between == and ===?",id:"what-is-the-difference-between--and-",level:3},{value:"What is the DOM? How do you select an HTML element using JS?",id:"what-is-the-dom-how-do-you-select-an-html-element-using-js",level:3},{value:"What is DOM Event?",id:"what-is-dom-event",level:3},{value:"What is event propagation? What is event delegation?",id:"what-is-event-propagation-what-is-event-delegation",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"interview-preparation---javascript-1",children:"Interview Preparation - JavaScript (1)"}),"\n",(0,t.jsx)(n.h3,{id:"what-is-javascript",children:"What is JavaScript?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"JavaScript is a high-level progrmaming language that ECMAScript (which is a standardized specification for scripting language like language syntaxes and semantics)"}),"\n",(0,t.jsxs)(n.li,{children:["Some features of JavaScript we should know:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Just-in-time compilation"}),"\n",(0,t.jsx)(n.li,{children:"Dynamic typing"}),"\n",(0,t.jsx)(n.li,{children:"First-class functions"}),"\n",(0,t.jsx)(n.li,{children:"Multi-paradigm programming like imperative, declarative, functional, and OOP."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-javascript-engine",children:"What is JavaScript engine?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"JavaScript engine is a software component that executes JavaScript code. For example: V8, Spider Monkey, JavaScriptCore, and Chakra, etc."}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("i",{children:"Example: Chrome V8 is a JavaScript engine, which means that it executes JavaScript code. Originally, JavaScript was written to be executed by web browsers. V8 can execute JavaScript code either within or outside a browser, which makes server-side scripting possible."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-just-in-time-compilation-whats-the-difference-between-jit-compilation-and-interpretation",children:"What is Just-In-Time compilation? What's the difference between JIT compilation and interpretation?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Just-in-time compilation: during runtime, entire code is converted to machine code, then executed immedately, which allows for runtime opitmizations."}),"\n",(0,t.jsx)(n.li,{children:"Interpretation: during runtime, interpreter parses the source code and executes instructions line by line."}),"\n"]}),"\n",(0,t.jsx)("mark",{children:" \u2192 Interpretation translates and executes code on the fly without producing a standablone executable, leading to slower execution. JIT compilation compiles code to machine-level instructions during execution to speed up the process."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-repl",children:"What is REPL?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Read-Evaluate-Print-Loop is a programming language environment that accepts user input and output the result to the console after execution."}),"\n",(0,t.jsx)(n.li,{children:"REPL is used to test basic syntax and operations."}),"\n",(0,t.jsx)(n.li,{children:"For example: Terminal (typing node to start coding in JS) or Browser (right click inspect and move to Console)."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"when-is-the-biggest-javascript-release-what-are-some-new-features-of-es6",children:"When is the biggest JavaScript release? What are some new features of ES6?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"In 2015, ES6 is the biggest JavaScript release with many new featurs and updates."}),"\n",(0,t.jsxs)(n.li,{children:["Some new features of ES6:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"let"})," and ",(0,t.jsx)(n.code,{children:"const"})," variables"]}),"\n",(0,t.jsx)(n.li,{children:"Arrow functions"}),"\n",(0,t.jsx)(n.li,{children:"Template literals"}),"\n",(0,t.jsx)(n.li,{children:"Map, Set, and Array"}),"\n",(0,t.jsx)(n.li,{children:"Spread and Rest operators (...)"}),"\n",(0,t.jsx)(n.li,{children:"Default function paramters"}),"\n",(0,t.jsx)(n.li,{children:"Promises, Async/Await"}),"\n",(0,t.jsx)(n.li,{children:"Classes"}),"\n",(0,t.jsx)(n.li,{children:"Modules"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-dynamic-typing-whats-the-difference-bewteen-dynamic-typing-and-static-typing",children:"What is dynamic typing? What's the difference bewteen dynamic typing and static typing?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Dynamic typing: When declaring new varaibles, users don't need specify data type. Variable's data type will be assigned based on the value at runtime (using ",(0,t.jsx)("b",{children:"typeof"})," in JS to know variable's data type)"]}),"\n",(0,t.jsx)(n.li,{children:"In statically typed language, data types are defined during compile time and cannot change during runtime, which means that it's required to specify data type when declaring a new variable."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-are-primitive-data-types-in-javascript",children:"What are primitive data types in JavaScript?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"There are 7 primitive data types in JavaScript: string, number, boolean, null, undefined, symbol, and bigint."}),"\n"]}),"\n",(0,t.jsx)("mark",{children:"\u2192 All primitive data types are immutable."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-are-reference-data-types-in-javascript",children:"What are reference data types in JavaScript?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"There is only one reference data type which is Object."}),"\n",(0,t.jsxs)(n.li,{children:["Object is ",(0,t.jsx)("mark",{children:"mutable"})," keyed collection of properties; they store a collection of data instead of single value."]}),"\n",(0,t.jsxs)(n.li,{children:["For example: ",(0,t.jsx)(n.code,{children:'let myObject = { myAge: 22, myName: "Quinn", myHomeTown: "Sai Gon" };'})]}),"\n",(0,t.jsxs)(n.li,{children:["To declare an object variable, you can either use ",(0,t.jsx)(n.code,{children:"{}"})," or ",(0,t.jsx)(n.code,{children:"new Object()"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-are-the-differences-between-object-and-map-in-javascript",children:"What are the differences between Object and Map in JavaScript?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Object has default key but Map doesn't (Map has to set key-value manually)"}),"\n",(0,t.jsx)(n.li,{children:"Object's key type can only be string or symbol while Map's key can be any data type."}),"\n",(0,t.jsx)(n.li,{children:"Object's key-value pairs aren't ordered, while Map's order is based on insertion."}),"\n",(0,t.jsxs)(n.li,{children:["To find Object's size, you need to iterate through it, but  you can find Map's size easily with ",(0,t.jsx)(n.code,{children:".size"})]}),"\n",(0,t.jsx)(n.li,{children:"Object is not iterable (using for...of to get pairs) while Map is."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-coercion-what-is-conversion-what-is-the-difference-between-coercion-and-conversion",children:"What is coercion? What is conversion? What is the difference between coercion and conversion?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Coercion: when a variable's data type is ",(0,t.jsx)("mark",{children:"IMPLICITLY"})," chaned to another data type."]}),"\n",(0,t.jsxs)(n.li,{children:["Conversion: which is also known as type casting, is when a variable's data type is ",(0,t.jsx)("mark",{children:"EXPLICITLY"})," changed to another data type. For example: ",(0,t.jsx)(n.code,{children:"String()"}),", ",(0,t.jsx)(n.code,{children:"Boolean()"}),", and ",(0,t.jsx)(n.code,{children:"Number()"}),", etc.\n",(0,t.jsx)("mark",{children:"\u2192 The difference between coercion and conversion is that coercion changes a variable's data type IMPLICITLY while conversion does it EXPLICITLY."})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-short-circuting-in-javascript",children:"What is short circuting in JavaScript?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"In JS, short circuiting is a feature of the logical operators OR (||) and AND (&&), which allows them to return a value without evaluating the whole expression."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-are-3-ways-to-declare-a-function",children:"What are 3 ways to declare a function?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"There are three ways to declare a function:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Function declaration"}),"\n",(0,t.jsx)(n.li,{children:"Function expression"}),"\n",(0,t.jsx)(n.li,{children:"Arrow function"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// Function declaration\nfunction myFunc() {\n  console.log("This is my function");\n}\n\n// Function expression\nlet anotherFunc = function () {\n  console.log("This is another function");\n};\n\n// Arrow function\nlet arrowFunc = () => {\n  console.log("This is arrow function");\n};\n\nmyFunc();\nanotherFunc();\narrowFunc();\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-are-3-ways-to-iterate-an-array",children:"What are 3 ways to iterate an array?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// Iterate arrays\nlet myArr = [1, 2, 3, 4, 5];\nconsole.log("Using for loop:");\nfor (let i = 0; i < myArr.length; i++) {\n  console.log(myArr[i]);\n}\nconsole.log();\n// Using for...of\nconsole.log("Using for..of");\nfor (let num of myArr) {\n  console.log(num);\n}\n\n// Using forEach()\nconsole.log();\nconsole.log("Using forEach()");\nmyArr.forEach((element) => {\n  console.log(element);\n});\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-are-the-differences-between-set-and-array",children:"What are the differences between Set and Array?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Array is ordered based each element's index while set is not ordered."}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("mark",{children:"Array can have duplicated values while set can only unique values. "}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-the-difference-between--and-",children:"What is the difference between == and ===?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\"==\" is used to compare the value of the variables and it doesn't care about variables' data types. For example: ",(0,t.jsx)(n.code,{children:' console.log("5" == 5); // true'})]}),"\n",(0,t.jsxs)(n.li,{children:['"===" is used to strictly compare both values and types of variables. For examples: ',(0,t.jsx)(n.code,{children:'console.log("5" === 5); // false'})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-the-dom-how-do-you-select-an-html-element-using-js",children:"What is the DOM? How do you select an HTML element using JS?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["DOM -",(0,t.jsx)("mark",{children:" Document Object Model"}),", is a programming interface for web documents. It represents the page with a tree structure as nodes so that programming languages like JavaScript can change/manipulate the document's structure, style, and content."]}),"\n",(0,t.jsxs)(n.li,{children:["JavaScript can select HTML elements by:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Query Selector: using CSS selector. For example: ",(0,t.jsx)(n.code,{children:'let el = document.querySelector(".myclass");'})]}),"\n",(0,t.jsx)(n.li,{children:"Get element by ID, class name, tag name, etc."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"what-is-dom-event",children:"What is DOM Event?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["DOM events are actions or occurences on the webpage that your code listens for and responds to by using event handlers (",(0,t.jsx)(n.code,{children:".addEventListener(eventName, function)"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Some event types: ",(0,t.jsx)("b",{children:(0,t.jsx)("i",{children:"click, focus, blur, keypress, submit, etc."})})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"what-is-event-propagation-what-is-event-delegation",children:"What is event propagation? What is event delegation?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)("b",{children:"Event propagation"})," is how events travel throughout the DOM and trigger event handlers, which consists three phrases: ",(0,t.jsx)("mark",{children:"capturing, target, bubbling"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)("b",{children:"Event delegation"})," is an optimization technique for when you have multiple event handlers that do the same things."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Written on Mar 31, 2024."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>s});var t=i(7294);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);