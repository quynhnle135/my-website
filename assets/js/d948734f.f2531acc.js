"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3166],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),f=a,m=u["".concat(c,".").concat(f)]||u[f]||s[f]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={title:"Oct 18"},i=void 0,l={unversionedId:"coding-journal/2023/October/oct_18_23",id:"coding-journal/2023/October/oct_18_23",title:"Oct 18",description:"Leetcode and DSA",source:"@site/docs/coding-journal/2023/10 - October/oct_18_23.md",sourceDirName:"coding-journal/2023/10 - October",slug:"/coding-journal/2023/October/oct_18_23",permalink:"/my-website/docs/coding-journal/2023/October/oct_18_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Oct 18"},sidebar:"tutorialSidebar",previous:{title:"Oct 9",permalink:"/my-website/docs/coding-journal/2023/October/oct_09_23"},next:{title:"Oct 19",permalink:"/my-website/docs/coding-journal/2023/October/oct_19_23"}},c={},d=[{value:"Leetcode and DSA",id:"leetcode-and-dsa",level:3},{value:"Graph BFS traversal",id:"graph-bfs-traversal",level:6},{value:"Graph DFS traversal",id:"graph-dfs-traversal",level:6},{value:"Docusaurus",id:"docusaurus",level:3}],p={toc:d},u="wrapper";function s(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"leetcode-and-dsa"},"Leetcode and DSA"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Did and reviewed some problem in Leetcode 75. "),(0,a.kt)("li",{parentName:"ul"},"My goal is to go over every data structures and algorithms by the end of October"),(0,a.kt)("li",{parentName:"ul"},"Graph review")),(0,a.kt)("h6",{id:"graph-bfs-traversal"},"Graph BFS traversal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def BFS(graph):\n    queue = []\n    visited = []\n    traversal = []\n    for vertex in graph:\n        if vertex not in visited:\n            queue.append(vertex)\n            while queue:\n                node = queue.pop(0)\n                if node not in visited:\n                    visited.append(node)\n                    traversal.append(node)\n\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n    return traversal\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['D'],\n        'C': [],\n        'D': ['E'],\n        'E': []\n    }\n    print(BFS(graph))\n\n\nif __name__ == \"__main__\":\n    main()\n\n")),(0,a.kt)("h6",{id:"graph-dfs-traversal"},"Graph DFS traversal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def DFS(graph):\n    stack = []\n    visited = []\n    traversal = []\n    for vertex in graph:\n        if vertex not in visited:\n            stack.append(vertex)\n            while stack:\n                node = stack.pop()\n                if node not in visited:\n                    visited.append(node)\n                    traversal.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            stack.append(neighbor)\n    return traversal\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['D'],\n        'C': [],\n        'D': ['E'],\n        'E': []\n    }\n    print(DFS(graph))\n\n\nif __name__ == \"__main__\":\n    main()\n")),(0,a.kt)("h3",{id:"docusaurus"},"Docusaurus"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Updated color theme and got rid of unnecessary files & folders"),(0,a.kt)("li",{parentName:"ul"},"Updated footers by including my Github and LinkedIn"),(0,a.kt)("li",{parentName:"ul"},"What I need to do:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Continue updating footer and header"),(0,a.kt)("li",{parentName:"ul"},"Reformat earlier posts (code block)"),(0,a.kt)("li",{parentName:"ul"},"Add journal and document my projects")))))}s.isMDXComponent=!0}}]);