"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4032],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(a,".").concat(m)]||p[m]||c[m]||l;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const l={title:"Oct 20"},i=void 0,s={unversionedId:"learning-journal/2023/October/oct_20_23",id:"learning-journal/2023/October/oct_20_23",title:"Oct 20",description:"What I did today",source:"@site/docs/learning-journal/2023/10 - October/oct_20_23.md",sourceDirName:"learning-journal/2023/10 - October",slug:"/learning-journal/2023/October/oct_20_23",permalink:"/my-website/docs/learning-journal/2023/October/oct_20_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Oct 20"},sidebar:"tutorialSidebar",previous:{title:"Oct 19",permalink:"/my-website/docs/learning-journal/2023/October/oct_19_23"},next:{title:"Oct 22",permalink:"/my-website/docs/learning-journal/2023/October/oct_22_23"}},a={},u=[{value:"What I did today",id:"what-i-did-today",level:3},{value:"Flaskr project",id:"flaskr-project",level:3},{value:"Continue working on blueprints for the applications",id:"continue-working-on-blueprints-for-the-applications",level:4},{value:"Auth file is used to implement functions for user authentication, registeration, login, logout functions",id:"auth-file-is-used-to-implement-functions-for-user-authentication-registeration-login-logout-functions",level:5},{value:"Blop file is used to implement functions for blog posts",id:"blop-file-is-used-to-implement-functions-for-blog-posts",level:5},{value:"Templates",id:"templates",level:3}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"what-i-did-today"},"What I did today"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Finished Leetcode 75 Array/String exercises"),(0,o.kt)("li",{parentName:"ul"},"Almost done with Flaskr project tutorial")),(0,o.kt)("h3",{id:"flaskr-project"},"Flaskr project"),(0,o.kt)("h4",{id:"continue-working-on-blueprints-for-the-applications"},"Continue working on blueprints for the applications"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Wrote fucntions for register, login, logout, create, update, and delete post"),(0,o.kt)("li",{parentName:"ul"},"Created templates"),(0,o.kt)("li",{parentName:"ul"},"However, I was only able to run and get result for Register, Login, and Logout functions. The functions work with posts haven't been able to work out yet. Will try to fix these problems first things tomorrow.")),(0,o.kt)("h5",{id:"auth-file-is-used-to-implement-functions-for-user-authentication-registeration-login-logout-functions"},"Auth file is used to implement functions for user authentication, registeration, login, logout functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="flaskr/auth.py"',title:'"flaskr/auth.py"'},"import functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\n\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n\n\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == \"POST\":\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required'\n        elif not password:\n            error = 'Password is required'\n\n        if error is None:\n            try:\n                db.execute(\n                    \"INSERT INTO user (username, password) VALUES (?, ?)\",\n                    (username, generate_password_hash(password)),\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for(\"auth.login\"))\n\n        flash(error)\n\n    return render_template('auth/register.html')\n\n\n@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == \"POST\":\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = \"Incorrect username.\"\n        elif not check_password_hash(user['password'], password):\n            error = \"Incorrect password.\"\n\n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n\n        flash(error)\n\n    return render_template('auth/login.html')\n\n\n@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        )\n\n\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n\n\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n\n        return view(**kwargs)\n\n    return wrapped_view\n\n")),(0,o.kt)("h5",{id:"blop-file-is-used-to-implement-functions-for-blog-posts"},"Blop file is used to implement functions for blog posts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="flaskr/blog.py"',title:'"flaskr/blog.py"'},"from flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\n\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n\n\n@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n\n\n@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/create.html')\n\n\ndef get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f\"Post id {id} doesn't exist.\")\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n\n    return post\n\n\n@bp.route('/<int:id>/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/update.html', post=post)\n\n\n@bp.route('/<int:id>/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n\n")),(0,o.kt)("h3",{id:"templates"},"Templates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="flaskr/templates/auth/login.html"',title:'"flaskr/templates/auth/login.html"'},'{% extends \'base.html\' %}\n\n{% block header %}\n  <h1>{% block title %}Log In{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method="post">\n    <label for="username">Username</label>\n    <input name="username" id="username" required>\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" required>\n    <input type="submit" value="Log In">\n  </form>\n{% endblock %}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="flaskr/templates/auth/register.html"',title:'"flaskr/templates/auth/register.html"'},'{% extends \'base.html\' %}\n\n{% block header %}\n  <h1>{% block title %}Register{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method="post">\n    <label for="username">Username</label>\n    <input name="username" id="username" required>\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" required>\n    <input type="submit" value="Register">\n  </form>\n{% endblock %}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="flaskr/templates/blog/create.html"',title:'"flaskr/templates/blog/create.html"'},'{% extends \'base.html\' %}\n\n{% block header %}\n  <h1>{% block title %}New Post{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method="post">\n    <label for="title">Title</label>\n    <input name="title" id="title" value="{{ request.form[\'title\'] }}" required>\n    <label for="body">Body</label>\n    <textarea name="body" id="body">{{ request.form[\'body\'] }}</textarea>\n    <input type="submit" value="Save">\n  </form>\n{% endblock %}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="faslkr/templates/blog/index.html"',title:'"faslkr/templates/blog/index.html"'},"{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Posts{% endblock %}</h1>\n  {% if g.user %}\n    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    <article class=\"post\">\n      <header>\n        <div>\n          <h1>{{ post['title'] }}</h1>\n          <div class=\"about\">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>\n        </div>\n        {% if g.user['id'] == post['author_id'] %}\n          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>\n        {% endif %}\n      </header>\n      <p class=\"body\">{{ post['body'] }}</p>\n    </article>\n    {% if not loop.last %}\n      <hr>\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="flaskr/templates/blog/update.html"',title:'"flaskr/templates/blog/update.html"'},'{% extends \'base.html\' %}\n\n{% block header %}\n  <h1>{% block title %}Edit "{{ post[\'title\'] }}"{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method="post">\n    <label for="title">Title</label>\n    <input name="title" id="title"\n      value="{{ request.form[\'title\'] or post[\'title\'] }}" required>\n    <label for="body">Body</label>\n    <textarea name="body" id="body">{{ request.form[\'body\'] or post[\'body\'] }}</textarea>\n    <input type="submit" value="Save">\n  </form>\n  <hr>\n  <form action="{{ url_for(\'blog.delete\', id=post[\'id\']) }}" method="post">\n    <input class="danger" type="submit" value="Delete" onclick="return confirm(\'Are you sure?\');">\n  </form>\n{% endblock %}\n')))}c.isMDXComponent=!0}}]);