"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6175],{1003:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var r=t(5893),i=t(1151);const s={title:"Sep 17, 2023"},a="Coding Journal: Sep 17, 2023",d={id:"learning-journal/September/20230917",title:"Sep 17, 2023",description:"Go over Two Pointer coding pattern",source:"@site/docs/learning-journal/September/20230917.md",sourceDirName:"learning-journal/September",slug:"/learning-journal/September/20230917",permalink:"/docs/learning-journal/September/20230917",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 17, 2023"},sidebar:"tutorialSidebar",previous:{title:"Sep 16, 2023",permalink:"/docs/learning-journal/September/20230916"},next:{title:"Sep 18, 2023",permalink:"/docs/learning-journal/September/20230918"}},l={},o=[{value:"Go over Two Pointer coding pattern",id:"go-over-two-pointer-coding-pattern",level:2},{value:"Valid Palindrome",id:"valid-palindrome",level:5},{value:"Valid Palindrome II",id:"valid-palindrome-ii",level:5},{value:"Sum of three values",id:"sum-of-three-values",level:5},{value:"Sort Colors",id:"sort-colors",level:5},{value:"Reverse words in a string",id:"reverse-words-in-a-string",level:5},{value:"Remove Nth node from the end of the list",id:"remove-nth-node-from-the-end-of-the-list",level:5},{value:"Go over Fast And Slow Pointers coding pattern",id:"go-over-fast-and-slow-pointers-coding-pattern",level:2},{value:"Middle node of linkedlist",id:"middle-node-of-linkedlist",level:5},{value:"LinkedList Cycle",id:"linkedlist-cycle",level:5},{value:"Palindrome Linkedlist",id:"palindrome-linkedlist",level:5},{value:"Happy Number",id:"happy-number",level:5},{value:"Notes",id:"notes",level:2},{value:"Two Pointers approach",id:"two-pointers-approach",level:3},{value:"Fast And Slow Pointers approach",id:"fast-and-slow-pointers-approach",level:3}];function _(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h5:"h5",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"coding-journal-sep-17-2023",children:"Coding Journal: Sep 17, 2023"}),"\n",(0,r.jsx)(e.h2,{id:"go-over-two-pointer-coding-pattern",children:"Go over Two Pointer coding pattern"}),"\n",(0,r.jsx)(e.h5,{id:"valid-palindrome",children:"Valid Palindrome"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def check_valid_palindrome(s):\n    start = 0\n    end = len(s) - 1\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\n# If case-sensitive and may have leading/trailing spaces\ndef check_valid_palindrome_sensitive(s):\n    s = s.strip().lower()\n    start = 0\n    end = len(s) - 1\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\ndef main():\n    print(check_valid_palindrome("hannah"))\n    print(check_valid_palindrome_sensitive("    haNnAH   "))\n\n    print(check_valid_palindrome("abba"))\n    print(check_valid_palindrome_sensitive("   aBA    "))\n\n    print(check_valid_palindrome("abcd"))\n    print(check_valid_palindrome_sensitive("       aBCcd"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"valid-palindrome-ii",children:"Valid Palindrome II"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def check_valid_palindrome_ii(word):\n    removed = False\n    start = 0\n    end = len(word) - 1\n    while start < end:\n        if (word[start] != word[end]) and (not removed):\n            removed = True\n            end -= 1\n        elif (word[start] != word[end]) and removed:\n            return False\n        else:\n            start += 1\n            end -= 1\n    return True\n\n\ndef main():\n    print(check_valid_palindrome_ii(word="DEEAD"))  # true\n    print(check_valid_palindrome_ii(word="RACECAR"))  # true\n    print(check_valid_palindrome_ii(word="ABCEBA"))  # true\n    print(check_valid_palindrome_ii(word="RACEACAT"))  # false\n\n    print(check_valid_palindrome_ii(word="madame"))  # true\n    print(check_valid_palindrome_ii(word="tebbem"))  # false\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"sum-of-three-values",children:"Sum of three values"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def find_sum_of_three(nums, target):\n    nums.sort()\n    for i in range(len(nums) - 2):\n        start = i + 1\n        end = len(nums) - 1\n        while start < end:\n            cur_sum = nums[i] + nums[start] + nums[end]\n            if cur_sum == target:\n                return True\n            elif cur_sum < target:\n                start += 1\n            else:\n                end -= 1\n    return False\n\n\ndef main():\n    print(find_sum_of_three(nums=[3, 7, 1, 2, 8, 4, 5], target=20))\n    print(find_sum_of_three(nums=[3, 7, 1, 2, 8, 4, 5], target=10))\n    print(find_sum_of_three(nums=[3, 7, 1, 2, 8, 4, 5], target=14))\n    print(find_sum_of_three(nums=[3, 7, 1, 2, 8, 4, 5], target=50))\n    print(find_sum_of_three(nums=[3, 7, 1, 2, 8, 4, 5], target=100))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"sort-colors",children:"Sort Colors"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def sort_color(colors):\n    white = red = 0\n    blue = len(colors) - 1\n    while white <= blue:\n        if colors[white] == 0:\n            if colors[red] != 0:\n                colors[red], colors[white] = colors[white], colors[red]\n            red += 1\n            white += 1\n        elif colors[white] == 1:\n            white += 1\n        elif colors[white] == 2:\n            if colors[blue] != 2:\n                colors[white], colors[blue] = colors[blue], colors[white]\n            blue -= 1\n    return colors\n\n\ndef main():\n    print(sort_color([2, 2, 1, 1, 0]))\n    print(sort_color([0, 0, 2, 1, 2, 2]))\n    print(sort_color([1, 1, 2, 0, 0, 2]))\n    print(sort_color([0, 1, 0]))\n    print(sort_color([1, 1, 2, 0, 0, 2]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"reverse-words-in-a-string",children:"Reverse words in a string"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import re\n\n\ndef reverse_words_in_a_string_i(s):\n    s = s.split()\n    reversed_list = s[::-1]\n    return " ".join(reversed_list)\n\n\ndef reverse_words_in_a_string_two_pointers(sentence):\n    sentence = re.sub(" +", " ", sentence.strip())\n\n    sentence = list(sentence)\n    sentence_len = len(sentence)\n\n    reverse_helper(sentence, 0, sentence_len - 1)\n    start = end = 0\n    while start < sentence_len:\n        while (end < sentence_len) and (sentence[end] != " "):\n            end += 1\n        reverse_helper(sentence, start, end - 1)\n        start = end = end + 1\n    return "".join(sentence)\n\n\ndef reverse_helper(s, start, end):\n    while start < end:\n        # swap elements\n        s[start], s[end] = s[end], s[start]\n        start += 1\n        end -= 1\n\n\ndef main():\n    print(reverse_words_in_a_string_i(s="the sky is blue"))\n    print(reverse_words_in_a_string_two_pointers(sentence="the sky is blue"))\n\n    print(reverse_words_in_a_string_i(s="  hello world  "))\n    print(reverse_words_in_a_string_two_pointers(sentence="  hello world  "))\n\n    print(reverse_words_in_a_string_i(s="a good    example"))\n    print(reverse_words_in_a_string_two_pointers(sentence="a good    example"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"remove-nth-node-from-the-end-of-the-list",children:"Remove Nth node from the end of the list"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'\nclass ListNode:\n    def __init__(self, data=0, next=None):\n        self.data = data\n        self.next = next\n\n\ndef print_list(head):\n    cur = head\n    while cur and cur.next:\n        print(cur.data, end=" -> ")\n        cur = cur.next\n    if cur:\n        print(cur.data, end=" -> null ")\n    print()\n\n\ndef remove_nth_node(head, n):\n    cur = head\n    prev = None\n    count = 0\n    list_len = 0\n\n    # Count the length of linked list\n    while cur:\n        list_len += 1\n        cur = cur.next\n\n    # If n = length of linked list -> Remove head\n    if n == list_len:\n        head = head.next\n        return head\n    cur = head\n    while cur and count < list_len - n:\n        prev = cur\n        cur = cur.next\n        count += 1\n\n    if cur:\n        prev.next = cur.next\n\n    return head\n\n\ndef remove_nth_node_two_pointers(head, n):\n    left = right = head\n    for i in range(n):\n        right = right.next\n    if not right:\n        return head.next\n    while right.next:\n        right = right.next\n        left = left.next\n    left.next = left.next.next\n    return head\n    \n\n\ndef main():\n    head = ListNode(23)\n    head.next = ListNode(28)\n    head.next.next = ListNode(10)\n    head.next.next.next = ListNode(5)\n    head.next.next.next.next = ListNode(67)\n    head.next.next.next.next.next = ListNode(39)\n    head.next.next.next.next.next.next = ListNode(70)\n\n    # print_list(head=remove_nth_node(head=head, n=3))\n    # print_list(head=remove_nth_node(head=head, n=7))\n    # print_list(head=remove_nth_node(head=head, n=1))\n\n    # print_list(head=remove_nth_node_two_pointers(head=head, n=3))\n    # print_list(head=remove_nth_node(head=head, n=7))\n    print_list(head=remove_nth_node_two_pointers(head, n=7))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(e.h2,{id:"go-over-fast-and-slow-pointers-coding-pattern",children:"Go over Fast And Slow Pointers coding pattern"}),"\n",(0,r.jsx)(e.h5,{id:"middle-node-of-linkedlist",children:"Middle node of linkedlist"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'\nclass ListNode:\n    def __init__(self, data=0, next=None):\n        self.data = data\n        self.next = next\n\n\ndef find_middle_node(head):\n    fast = slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    return slow.data\n\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(4)\n    head.next.next = ListNode(6)  # middle node\n    head.next.next.next = ListNode(8)\n    head.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next = ListNode(11)\n\n    print(find_middle_node(head))\n\n\nif __name__ == "__main__":\n    main()\n    \n'})}),"\n",(0,r.jsx)(e.h5,{id:"linkedlist-cycle",children:"LinkedList Cycle"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def check_valid_palindrome(s):\n    start = 0\n    end = len(s) - 1\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\n# If case-sensitive and may have leading/trailing spaces\ndef check_valid_palindrome_sensitive(s):\n    s = s.strip().lower()\n    start = 0\n    end = len(s) - 1\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\ndef main():\n    print(check_valid_palindrome("hannah"))\n    print(check_valid_palindrome_sensitive("    haNnAH   "))\n\n    print(check_valid_palindrome("abba"))\n    print(check_valid_palindrome_sensitive("   aBA    "))\n\n    print(check_valid_palindrome("abcd"))\n    print(check_valid_palindrome_sensitive("       aBCcd"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"palindrome-linkedlist",children:"Palindrome Linkedlist"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, data=0, next=None):\n        self.data = data\n        self.next = next\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.data, end=" -> ")\n        cur = cur.next\n    print(cur.next)\n    print()\n\n\ndef check_palindrome_linked_list(head):\n    fast = slow = head\n    # traverse to the middle node\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    # now slow reaches the middle node\n    slow = reverse_linked_list(slow)\n    fast = head\n\n    # compare value\n    while fast and slow:\n        if fast.data != slow.data:\n            return False\n        fast = fast.next\n        slow = slow.next\n    return True\n\n\ndef reverse_linked_list(head):\n    cur = head\n    prev = ListNode()\n    while cur:\n        next_node = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next_node\n    return prev\n\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(2)\n    head.next.next.next.next = ListNode(1)\n    # head.next.next.next.next.next = ListNode(1)\n\n    print(check_palindrome_linked_list(head))\n    # print_list(head=reverse_linked_list(head))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"happy-number",children:"Happy Number"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def check_happy_number_using_set(num):\n    seen = set()\n    while num != 1 and num not in seen:\n        seen.add(num)\n        num = sum(int(i) ** 2 for i in str(num))\n    return num == 1\n\n\ndef get_next(n):\n    return sum(int(i) ** 2 for i in str(n))\n\n\ndef check_happy_number(n):\n    fast = get_next(n)\n    slow = n\n    while fast != 1 and fast != slow:\n        fast = get_next(get_next(fast))\n        slow = get_next(slow)\n    return fast == 1\n\n\ndef main():\n    print(check_happy_number_using_set(num=10))\n    print(check_happy_number(n=10))\n\n    print(check_happy_number_using_set(num=7))\n    print(check_happy_number(n=7))\n\n    print(check_happy_number_using_set(num=19))\n    print(check_happy_number(n=19))\n\n    print(check_happy_number_using_set(num=2))\n    print(check_happy_number(n=2))\n\n    print(check_happy_number_using_set(num=28))\n    print(check_happy_number(n=28))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsx)(e.h3,{id:"two-pointers-approach",children:"Two Pointers approach"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Suitable scenarios: sorted array, palindrome checking, min/max condition, subarray, or sliding windonw problems"}),"\n",(0,r.jsx)(e.li,{children:"We may apply Two Pointers approach if given array or linked list, ordered/sorted/symmetry input"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"fast-and-slow-pointers-approach",children:"Fast And Slow Pointers approach"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"May apply to linked list problems to reach the optimal solution"}),"\n",(0,r.jsx)(e.li,{children:"Suitabole scenarios: find middle node, check linked list's cycle"}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(_,{...n})}):_(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>d,a:()=>a});var r=t(7294);const i={},s=r.createContext(i);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);