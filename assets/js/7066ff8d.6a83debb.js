"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[845],{4004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var s=t(5893),r=t(1151);const i={title:"Feb 17, 2024"},l="Coding Journal: Feb 17, 2024",a={id:"learning-journal/2024/February/20240217",title:"Feb 17, 2024",description:"- Continued with Data Structures for Coding Interview in JavaScript (Stack - Queue review):",source:"@site/docs/learning-journal/2024/February/20240217.md",sourceDirName:"learning-journal/2024/February",slug:"/learning-journal/2024/February/20240217",permalink:"/docs/learning-journal/2024/February/20240217",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feb 17, 2024"},sidebar:"tutorialSidebar",previous:{title:"Feb 16, 2024",permalink:"/docs/learning-journal/2024/February/20240216"},next:{title:"Notes",permalink:"/docs/category/notes"}},c={},o=[{value:"Stack Implementation",id:"stack-implementation",level:4},{value:"Queue Implementation",id:"queue-implementation",level:4},{value:"Reverse First K Elements",id:"reverse-first-k-elements",level:4},{value:"Check Balanced Parentheses",id:"check-balanced-parentheses",level:4},{value:"Evaluate Postfix Expression",id:"evaluate-postfix-expression",level:4},{value:"Min Stack",id:"min-stack",level:4},{value:"Next Greater Elements",id:"next-greater-elements",level:4},{value:"Find Binary Numbers",id:"find-binary-numbers",level:4},{value:"Sort Values In A Stack",id:"sort-values-in-a-stack",level:4}];function u(e){const n={code:"code",h1:"h1",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"coding-journal-feb-17-2024",children:"Coding Journal: Feb 17, 2024"}),"\n",(0,s.jsx)(n.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Continued with Data Structures for Coding Interview in JavaScript (Stack - Queue review):","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stack implementation"}),"\n",(0,s.jsx)(n.li,{children:"Queue implementation"}),"\n",(0,s.jsx)(n.li,{children:"Reverse first k element"}),"\n",(0,s.jsx)(n.li,{children:"Check balanced parentheses"}),"\n",(0,s.jsx)(n.li,{children:"Evaluate postfix expression"}),"\n",(0,s.jsx)(n.li,{children:"Min stack"}),"\n",(0,s.jsx)(n.li,{children:"Next greater element using Stack"}),"\n",(0,s.jsx)(n.li,{children:"Find binary number"}),"\n",(0,s.jsx)(n.li,{children:"Sort values in a stack"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"2-question-i-had-today",children:"2. Question I Had Today"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["How to convert string to int in JavaScript? \u2192 ",(0,s.jsx)("b",{children:"Use parseInt() function"})]}),"\n",(0,s.jsxs)(n.li,{children:["Is there built-in data structure Stack and Queue in JavaScript?  \u2192 ",(0,s.jsx)("b",{children:" No, you need to implement or use slicing in array"})]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"3-what-i-found-challenging-today",children:"3. What I Found Challenging Today"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"I didn't find anything challenging today"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,s.jsx)(n.h4,{id:"stack-implementation",children:"Stack Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export class Stack {\n    constructor() {\n        this.items = [];\n        this.top = null;\n    }\n    \n    isEmpty() {\n        if (this.items.length === 0) return true;\n        return false;\n    }\n\n    getTop() {\n        if (this.isEmpty()) return null;\n        return this.top;\n    }\n\n    size() {\n        return this.items.length;\n    }\n    \n    push(value) {\n        this.items.push(value);\n        this.top = value;\n    }\n\n    pop() {\n        // If Stack is not empty\n        if (this.items.length !== 0) {\n            // If Stack has 1 element\n            if (this.items.length === 1) {\n                this.top = null;\n                return this.items.pop();\n            }\n            else {\n                this.top = this.items[this.items.length - 2];\n                return this.items.pop();\n            }\n        // If Stack is empty\n        } else {\n            return null;\n        }\n    }\n}\n\n// var myStack = new Stack();\n\n// console.log("You have successfully created a Stack of size: " + myStack.size());\n// console.log("Is stack empty? " + myStack.isEmpty());\n// console.log("top: " + myStack.getTop());\n\n// for (let i = 1; i <= 5; i++) {\n//     myStack.push(i);\n// }\n\n// console.log(myStack.items);\n// console.log("Pop " + myStack.pop());\n// console.log("Pop " + myStack.pop());\n// console.log("Pop " + myStack.pop());\n// console.log("Current TOP " + myStack.getTop());\n'})}),"\n",(0,s.jsx)(n.h4,{id:"queue-implementation",children:"Queue Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export class Queue {\n    constructor() {\n        this.items = [];\n        this.frontIndex = 0;\n        this.backIndex = 0;\n    }\n\n    isEmpty() {\n        if (this.items.length === 0) return true;\n        return false;\n    }\n\n    size() {\n        return this.items.length;\n    }\n\n    enqueue(element) {\n        this.items[this.backIndex] = element;\n        this.backIndex++;\n    }\n\n    dequeue() {\n        let item = this.items[this.frontIndex];\n        delete this.items[this.frontIndex];\n        frontIndex++;\n        return item;\n    }\n\n    getFront() {\n        if (this.isEmpty()) return null;\n        return this.items[this.frontIndex];\n    }\n}\n\n// let myQueue = new Queue();\n// console.log("You have successfully created a Stack of size: " + myQueue.size());\n// console.log("Is stack empty? " + myQueue.isEmpty());\n// console.log("top: " + myQueue.getFront());\n\n// myQueue.enqueue(1);\n// myQueue.enqueue(2);\n// myQueue.enqueue(3);\n// myQueue.enqueue(4);\n// myQueue.enqueue(5);\n\n// console.log("My Queue: " + myQueue.items);\n// console.log("Enqueue " + myQueue.enqueue());\n// console.log("Enqueue " + myQueue.enqueue());\n// console.log("Enqueue " + myQueue.enqueue());\n// console.log("My Queue after enqueued 3 times: " + myQueue.items);\n// console.log("Front: " + myQueue.getFront());\n'})}),"\n",(0,s.jsx)(n.h4,{id:"reverse-first-k-elements",children:"Reverse First K Elements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Using a stack\nfunction reverseFirstKElementStack(arr, k) {\n    let stack = [];\n    for (let i = 0; i < k; i++) {\n        stack.push(arr[i]);\n    }\n\n    for (let i = 0; i < k; i++) {\n        arr[i] = stack.pop();\n    }\n    return arr;\n}\n \n\n// Two pointers\nfunction reverseFirstKElementTwoPointers(arr, k) {\n    let start = 0;\n    let end = k - 1;\n    while (start < end) {\n        let temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n    return arr;\n}\n\n\nconsole.log(reverseFirstKElementStack([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\nconsole.log(reverseFirstKElementTwoPointers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\n"})}),"\n",(0,s.jsx)(n.h4,{id:"check-balanced-parentheses",children:"Check Balanced Parentheses"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'function checkBalancedParentheses(parentheses) {\n    let openings = [];\n    for (let p of parentheses) {\n        if (p == "(" || p == "{" || p == "[") {\n            openings.push(p);\n        } else {\n            if (openings.lengths === 0) return false;\n            else {\n                let top = openings.pop();\n                if (top === "(" && p !== ")") return false;\n                if (top === "[" && p !== "]") return false;\n                if (top === "{" && p !== "}") return false;\n            }\n        }\n    }\n    if (openings.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\nconsole.log(checkBalancedParentheses("()"))  // true\nconsole.log(checkBalancedParentheses("()[]{}")) // true\nconsole.log(checkBalancedParentheses("[)"))  // false\n'})}),"\n",(0,s.jsx)(n.h4,{id:"evaluate-postfix-expression",children:"Evaluate Postfix Expression"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'function evaluatePostfixExpression(expression) {\n    let stack = [];\n    let result = 0;\n    for (let i = 0; i < expression.length; i++) {\n        let cur = expression[i];\n        if ("+-*/".indexOf(cur) !== -1) {\n            let secondNum = stack.pop();\n            let firstNum = stack.pop(); \n            if (cur === "+") {\n                stack.push(firstNum + secondNum); \n            } else if (cur === "-") {\n                stack.push(firstNum - secondNum);\n            } else if (cur === "*") {\n                stack.push(firstNum * secondNum);\n            } else {\n                stack.push(Math.floor(firstNum / secondNum));\n            }\n        } else {\n            stack.push(parseInt(cur));\n        }\n    }\n    return stack[0];\n}\n\nconsole.log(evaluatePostfixExpression("921*-8-4+")); // 3\n\n'})}),"\n",(0,s.jsx)(n.h4,{id:"min-stack",children:"Min Stack"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class MinStack {\n    constructor() {\n        this.stack = [];\n        this.minStack = [];\n    }\n\n    pop() {\n        if (this.stack.length === 0) {\n            console.log("Stack is empty");\n            return null;\n        }\n        let res = this.stack.pop();\n        if (res === this.minStack[this.minStack.length - 1]) {\n            this.minStack.pop();\n        }\n        return res;\n    }\n\n    push(value) {\n        this.stack.push(value);\n        if (this.minStack.length === 0 || value < this.minStack[this.minStack.length - 1]) {\n            this.minStack.push(value);\n        }\n    }\n\n    min() {\n        return this.minStack[this.minStack.length - 1];\n    }\n}\n\nlet myStack = new MinStack();\nmyStack.push(4);\nmyStack.push(2);\nmyStack.push(3);\nmyStack.push(1);\nmyStack.push(5);\n\nconsole.log("Current min value: " + myStack.min());\nmyStack.pop();\nmyStack.pop();\nconsole.log("Current min value: " + myStack.min());\n\n// let myArr = [1, 2, 3, 4, 5];\n// console.log(myArr[myArr.length - 1]);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"next-greater-elements",children:"Next Greater Elements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function nextGreaterElement(arr) {\n    let stack = [];\n    let res = [];\n    var top;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        let cur = arr[i];\n        if (stack.length > 0) {\n            top = stack[stack.length - 1];\n            while (top <= cur) {\n                if (stack.length === 0) {\n                    break;\n                }\n                stack.pop();\n                top = stack[stack.length - 1];\n            }\n            // stack.push(top);\n        }\n        if (stack.length == 0) {\n            res[i] = -1;\n        } else {\n            res[i] = stack[stack.length - 1];\n        }\n        stack.push(cur);\n    }\n    return res;\n}\n\nconsole.log(nextGreaterElement([4, 6, 3, 2, 8, 1])) // 6, 8, 8, 8, -1, -1\n"})}),"\n",(0,s.jsx)(n.h4,{id:"find-binary-numbers",children:"Find Binary Numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'function findBin(num) {\n    let queue = [];\n    queue.push("1");\n    let res = [];\n    while (res.length < num) {\n        res.push(queue[0]);\n        let num1 = res[res.length - 1] + "0";\n        let num2 = res[res.length - 1] + "1";\n        queue.push(num1);\n        queue.push(num2);\n        queue = queue.slice(1, queue.length);\n    }\n    return res;\n}\n\nconsole.log(findBin(5)); // 1 10 11 100 101\nconsole.log(findBin(10)); // 1 10 11 100 101 110 111 1000 1001 1010 \n'})}),"\n",(0,s.jsx)(n.h4,{id:"sort-values-in-a-stack",children:"Sort Values In A Stack"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// import { MyStack } from "./MyStack.js";\n\nfunction sortValues(stack) {\n    let res = [];\n    var temp;\n    while (stack.length !== 0) {\n        if (res.length === 0) {\n            res.push(stack.pop());\n        } else {\n            temp = stack.pop();\n            if (temp < res[res.length - 1]) {\n                res.push(temp);\n            } else {\n                while (res.length !== 0 && temp >= res[res.length - 1]) {\n                    stack.push(res.pop());\n                }\n                res.push(temp);\n            }\n        }\n    }\n    return res;\n}\n\nvar myStack = [];\nmyStack.push(23);\nmyStack.push(2);\nmyStack.push(97);\nmyStack.push(4);\nmyStack.push(42);\nmyStack.push(12);\nmyStack.push(60);\nconsole.log(myStack);\nconsole.log(sortValues(myStack));\n// console.log(myStack.items);\n// console.log(myStack.getTop());\n// console.log(sortValues(myStack.items));\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>l});var s=t(7294);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);