"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5985],{5383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(5893),i=t(1151);const r={title:"Dec 13, 2023"},s="Coding Journal: Dec 13, 2023",l={id:"learning-journal/2023/December/20231213",title:"Dec 13, 2023",description:"- Read and summarized Tips to use Github as your Portfolio",source:"@site/docs/learning-journal/2023/December/20231213.md",sourceDirName:"learning-journal/2023/December",slug:"/learning-journal/2023/December/20231213",permalink:"/docs/learning-journal/2023/December/20231213",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Dec 13, 2023"},sidebar:"tutorialSidebar",previous:{title:"Dec 12, 2023",permalink:"/docs/learning-journal/2023/December/20231212"},next:{title:"Dive Into Design Patterns",permalink:"/docs/category/dive-into-design-patterns"}},o={},d=[{value:"What is a linear data structure?",id:"what-is-a-linear-data-structure",level:3},{value:"What is a non-linear data structure?",id:"what-is-a-non-linear-data-structure",level:3},{value:"What I will do tomorrow:",id:"what-i-will-do-tomorrow",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"coding-journal-dec-13-2023",children:"Coding Journal: Dec 13, 2023"}),"\n",(0,a.jsx)(n.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Read and summarized ",(0,a.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_27",children:"Tips to use Github as your Portfolio"})]}),"\n",(0,a.jsxs)(n.li,{children:["Read and summarized (only half-way done) ",(0,a.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_28",children:"Data Structures Handbook - The Key to Scalable Software"})]}),"\n",(0,a.jsxs)(n.li,{children:["Read and summarized ",(0,a.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_29",children:"Effective Strategies for Improving Communication with Your Manager"})]}),"\n",(0,a.jsxs)(n.li,{children:["Read and summarized ",(0,a.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_30",children:"5 ways to gain your team's trust"})]}),"\n",(0,a.jsxs)(n.li,{children:["Read and summarized ",(0,a.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_31",children:"The Hidden Superpower of Software Engineers: Communicating Through Writing"})]}),"\n",(0,a.jsxs)(n.li,{children:["Read and summarized ",(0,a.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_32",children:"6 skills required to be a senior software engineer"})]}),"\n"]}),"\n",(0,a.jsx)(n.h1,{id:"2-questions-i-have",children:"2. Questions I Have?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"What is linear data structure?"}),"\n",(0,a.jsx)(n.li,{children:"What is non-linear data structure?"}),"\n",(0,a.jsx)(n.li,{children:"What is hierarchical data structure?"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"what-is-a-linear-data-structure",children:"What is a linear data structure?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Linear data structure is a type of data structure where the arrangement of the data follows a linear trend"}),"\n",(0,a.jsxs)(n.li,{children:["The data elements are arranged linearly such that the element is ",(0,a.jsx)("b",{children:"directly linked to its previous and the next elements"})]}),"\n",(0,a.jsx)(n.li,{children:"If the size of the data structure increases, the time complexity of the data structure increases as well"}),"\n",(0,a.jsxs)(n.li,{children:["Some examples of linear data structure: ",(0,a.jsx)("b",{children:"array, queue, stack, linked list"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"what-is-a-non-linear-data-structure",children:"What is a non-linear data structure?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Non-linear data structure is a type of data structure in which data elements are not arranged in a sequential order."}),"\n",(0,a.jsxs)(n.li,{children:["In non-linear data structure, elements are connected to multiple elements, ",(0,a.jsx)("b",{children:"forming a hierarchical or multi-level arrangement"})]}),"\n",(0,a.jsx)(n.li,{children:"Some examples of non-linear data structure: Trees and graphs"}),"\n"]}),"\n",(0,a.jsx)("b",{children:(0,a.jsx)("i",{children:"Hash Tables can be implemented in linear manner, their behavior is non-linear. Because they store data in an associative manner, where each value is defined by a unique key"})}),"\n",(0,a.jsx)(n.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Trying to solve this small project where I can apply 5 concepts of creational design pattern: Factory method, Abstract Factory, Builder, Prototype, and Singleton"}),"\n"]}),"\n",(0,a.jsx)(n.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,a.jsx)(n.p,{children:"Applied Singleton when creating zoo management system because there should be only one management system the zoo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="zoo_management_system.py"',children:"class ZooManagementSystem:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(ZooManagementSystem, cls).__new__(cls)\n        return cls._instance\n\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create Factory for animal"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="zoo.py"',children:'from abc import ABC, abstractmethod\n\n\nclass Animal(ABC):\n    @abstractmethod\n    def make_sound(self):\n        pass\n\n    @abstractmethod\n    def drink(self):\n        pass\n\n    @abstractmethod\n    def eat(self):\n        pass\n\n\nclass Lion(Animal):\n    def make_sound(self):\n        print("ROAR...")\n\n    def drink(self):\n        print("Lion is drinking water...")\n\n    def eat(self):\n        print("Lion is eating...")\n\n\nclass Elephant(Animal):\n    def make_sound(self):\n        print("Making elephant sound...")\n\n    def drink(self):\n        print("Elephant is drinking water...")\n\n    def eat(self):\n        print("Elephant is eating...")\n\n\nclass AnimalFactory():\n    def create_animal(self):\n        pass\n\n\nclass LionFactory(AnimalFactory):\n    def create_animal(self):\n        return Lion()\n\n\nclass ElephantFactory(AnimalFactory):\n    def create_animal(self):\n        return Elephant()\n\n\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"Start with Habitat builder but I haven't finished it yet, will continue with this small project first thing in the morning:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="habitat_builder.py"',children:'from zoo import Lion, Elephant\n\n\nclass Habitat:\n    def description(self):\n        pass\n\n\nclass Savannah(Habitat):\n    def description(self):\n        return "Savannah habitat..."\n\n\nclass Jungle(Habitat):\n    def description(self):\n        return "Jungle habitat..."\n\n\nclass HabitatFactory:\n    def create_habitat(self):\n        pass\n\n    def create_animal(self):\n        pass\n\n\nclass SavannahFactory(HabitatFactory):\n    def create_habitat(self):\n        return Savannah()\n\n    def create_animal(self):\n        return Lion()\n\n\nclass JungleFactory(HabitatFactory):\n    def create_habitat(self):\n        return Jungle()\n\n    def create_animal(self):\n        return Elephant()\n\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"what-i-will-do-tomorrow",children:"What I will do tomorrow:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Finish the Zoo management project applying creation desing patterns"}),"\n",(0,a.jsx)(n.li,{children:"Finish two posts which are still half-way done (data structures and skills required to be a senior swe)"}),"\n",(0,a.jsx)(n.li,{children:"Read 3 more artcles in todolist"}),"\n",(0,a.jsx)(n.li,{children:"Summarize the concepts of builder, prototype, and singleton"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var a=t(7294);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);