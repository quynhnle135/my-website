"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2040],{5739:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>m,toc:()=>o});var r=i(5893),t=i(1151);const s={title:"Feb 04, 2024"},a="Coding Journal: Feb 04, 2024",m={id:"learning-journal/2024/February/20240204",title:"Feb 04, 2024",description:"- Reviewed and practiced solving coding problems:",source:"@site/docs/learning-journal/2024/February/20240204.md",sourceDirName:"learning-journal/2024/February",slug:"/learning-journal/2024/February/20240204",permalink:"/docs/learning-journal/2024/February/20240204",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feb 04, 2024"},sidebar:"tutorialSidebar",previous:{title:"Javascript Ramp Up",permalink:"/docs/category/javascript-ramp-up"},next:{title:"Feb 05, 2024",permalink:"/docs/learning-journal/2024/February/20240205"}},l={},o=[{value:"Hash map",id:"hash-map",level:4},{value:"Array/String",id:"arraystring",level:4},{value:"IBM OA preparation",id:"ibm-oa-preparation",level:3}];function d(n){const e={code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"coding-journal-feb-04-2024",children:"Coding Journal: Feb 04, 2024"}),"\n",(0,r.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Reviewed and practiced solving coding problems:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Hash map: Group anagrams + Letter combinations of a phone number"}),"\n",(0,r.jsxs)(e.li,{children:["Array/String:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Jump game I + II"}),"\n",(0,r.jsx)(e.li,{children:"Length of last word"}),"\n",(0,r.jsx)(e.li,{children:"Majority element"}),"\n",(0,r.jsx)(e.li,{children:"Merged sorted array"}),"\n",(0,r.jsx)(e.li,{children:"Rotate array"}),"\n",(0,r.jsx)(e.li,{children:"Time to buy and sell stock I + II"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Solved some more problems to prepare for IBM OA:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Get equal substring within budget"}),"\n",(0,r.jsx)(e.li,{children:"Integer to roman"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h1,{id:"2-question-i-had",children:"2. Question I Had"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"I don't have any question for today."}),"\n"]}),"\n",(0,r.jsx)(e.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"I don't find anything challenging for today."}),"\n"]}),"\n",(0,r.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,r.jsx)(e.h4,{id:"hash-map",children:"Hash map"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Groups anagrams"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef group_anagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = {}\n    for s in strs:\n        sorted_s = "".join(sorted(s))\n        if sorted_s in anagrams:\n            anagrams[sorted_s].append(s)\n        else:\n            anagrams[sorted_s] = [s]\n    return list(anagrams.values())\n\n\ndef main():\n    print(group_anagrams(strs=["eat","tea","tan","ate","nat","bat"]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Letter combinations of a phone number"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef findCombinations(digits: str) -> List[str]:\n    map = {\n        "2": "abc",\n        "3": "def",\n        "4": "ghi",\n        "5": "jkl",\n        "6": "mno",\n        "7": "pqrs",\n        "8": "tuv",\n        "9": "wxyz"\n    }\n    combinations = []\n    if len(digits) > 0:\n        backtrack(start_idx=0, cur_str="", digits=digits, map=map, combinations=combinations)\n    return combinations\n\n\ndef backtrack(start_idx, cur_str, digits, map, combinations):\n    if len(cur_str) == len(digits):\n        combinations.append(cur_str)\n        return\n\n    for ch in map[digits[start_idx]]:\n        backtrack(start_idx=start_idx + 1, cur_str=cur_str + ch, digits=digits, map=map, combinations=combinations)\n\n\ndef main():\n    print(findCombinations(digits="23"))\n    print(findCombinations(digits="2"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h4,{id:"arraystring",children:"Array/String"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Jump game I"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef canJump(nums: List[int]) -> bool:\n    furthest_reach = 0\n    for i in range(len(nums) - 1):\n        furthest_reach = max(furthest_reach, nums[i] + i)\n        if furthest_reach >= len(nums) - 1:\n            return True\n    return furthest_reach >= len(nums) - 1\n\n\ndef main():\n    print(canJump(nums=[2, 3, 1, 1, 4]))\n    print(canJump(nums=[3, 2, 1, 0, 4]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Jump game II"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef minimumJump(nums: List[int]) -> bool:\n    jump = 0\n    furthest = 0\n    cur_end = 0\n    for i in range(len(nums)):\n        furthest = max(furthest, nums[i] + i)\n        if i == cur_end:\n            jump += 1\n            cur_end = furthest\n            if cur_end >= len(nums) - 1:\n                break\n    return jump\n\n\ndef main():\n    print(minimumJump(nums=[2, 3, 1, 1, 4]))  # 2\n    print(minimumJump(nums=[2, 3, 0, 1, 4]))  # 2\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Length of last word"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef minimumJump(nums: List[int]) -> bool:\n    jump = 0\n    furthest = 0\n    cur_end = 0\n    for i in range(len(nums)):\n        furthest = max(furthest, nums[i] + i)\n        if i == cur_end:\n            jump += 1\n            cur_end = furthest\n            if cur_end >= len(nums) - 1:\n                break\n    return jump\n\n\ndef main():\n    print(minimumJump(nums=[2, 3, 1, 1, 4]))  # 2\n    print(minimumJump(nums=[2, 3, 0, 1, 4]))  # 2\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Majority element"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef find_majority_element(nums: List[int]) -> int:\n    map = {}\n    for num in nums:\n        if num in map:\n            map[num] += 1\n        else:\n            map[num] = 1\n    n = len(nums) // 2\n    for key in map:\n        if map[key] > n:\n            return key\n\n\ndef find_majority_element_i(nums: List[int]) -> int:\n    if len(nums) == 1:\n        return nums[0]\n\n    nums.sort()\n    n = len(nums) // 2\n    return nums[n + 1]\n\n\ndef main():\n    print(find_majority_element(nums=[3, 2, 3]))\n    print(find_majority_element_i(nums=[3, 2, 3]))\n    print(find_majority_element(nums=[2, 2, 1, 1, 1, 2, 2]))\n    print(find_majority_element_i(nums=[2, 2, 1, 1, 1, 2, 2]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Merged sorted array"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef merge_sorted_array(nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n    first = m - 1\n    second = n - 1\n    index = len(nums1) - 1\n    while first >= 0 and second >= 0:\n        if nums1[first] < nums2[second]:\n            nums1[index] = nums2[second]\n            second -= 1\n        else:\n            nums1[index] = nums1[first]\n            first -= 1\n        index -= 1\n\n    while second >= 0:\n        nums1[index] = nums2[second]\n        second -= 1\n        index -= 1\n    return nums1\n\n\ndef main():\n    nums1 = [7, 9, 0, 0, 0, 0]\n    m = 2\n    nums2 = [2, 4, 5, 6]\n    n = 4\n    print(merge_sorted_array(nums1, m, nums2, n))  # [1, 2, 3, 5, 6]\n    print(merge_sorted_array(nums1=[1], m=0, nums2=[], n=0))  # 1\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Rotate array"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef rotateArray(arr: List[int], k: int):\n    k = k % len(arr)\n    if k == 0:\n        return arr\n    reverseArray(arr=arr, start=0, end=len(arr) - 1)\n    reverseArray(arr=arr, start=0, end=k - 1)\n    reverseArray(arr=arr, start=k, end=len(arr) - 1)\n    return arr\n\n\ndef reverseArray(arr: List[int], start: int, end: int):\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n\ndef main():\n    print(rotateArray(arr=[1, 2, 3, 4, 5, 6, 7], k=3))\n    print(rotateArray(arr=[-1, -100, 3, 99], k=2))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time to buy and sell stock I"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef best_time_to_buy_and_sell_stock(prices: List[int]) -> int:\n    profit = 0\n    cur_min = float("inf")\n    for price in prices:\n        cur_min = min(cur_min, price)\n        profit = max(profit, price - cur_min)\n    return profit\n\n\ndef main():\n    print(best_time_to_buy_and_sell_stock(prices=[7, 1, 5, 3, 6, 4]))\n    print(best_time_to_buy_and_sell_stock(prices=[7, 6, 4, 3, 1]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time to buy and sell stock II"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef best_time_to_buy_and_sell_stock_ii(prices: List[int]) -> int:\n    profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            profit += prices[i] - prices[i - 1]\n    return profit\n\n\ndef bestTimeToBuyAndSellStock(prices: List[int]) -> int:\n    profit = 0\n    i = 0\n    while i < len(prices) - 1:\n        while i < len(prices) - 1 and prices[i] >= prices[i + 1]:\n            i += 1\n        valley = prices[i]\n        while i < len(prices) - 1 and prices[i] <= prices[i + 1]:\n            i += 1\n        peak = prices[i]\n        profit += peak - valley\n\n    return profit\n\n\ndef main():\n    prices1 = [7, 1, 5, 3, 6, 4]\n    prices2 = [1, 2, 3, 4, 5]\n    print(best_time_to_buy_and_sell_stock_ii(prices1))\n    print(bestTimeToBuyAndSellStock(prices1))\n\n    print(best_time_to_buy_and_sell_stock_ii(prices2))\n    print(bestTimeToBuyAndSellStock(prices2))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ibm-oa-preparation",children:"IBM OA preparation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Get equal substring within budget"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def get_equal_substring(s: str, t: str, maxCost: int) -> int:\n    max_len = 0\n    start = 0\n    cur_val = 0\n    for end in range(len(s)):\n        cur_val += abs(ord(s[end]) - ord(t[end]))\n        while cur_val > maxCost:\n            cur_val -= abs(ord(s[start]) - ord(t[start]))\n            start += 1\n        max_len = max(max_len, end - start + 1)\n    return max_len\n\n\ndef main():\n    print(get_equal_substring(s="abcd", t="bcdf", maxCost=3))  # 3\n    print(get_equal_substring(s="abcd", t="cdef", maxCost=3))  # 1\n    print(get_equal_substring(s="abcd", t="acde", maxCost=0))  # 1\n    print(get_equal_substring(s="krrgw", t="zjxss", maxCost=19))  # 2\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Integer to roman"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def integer_to_roman(num: int):\n    roman = ""\n    symbols_list = [\n        ["I", 1],\n        ["IV", 4],\n        ["V", 5],\n        ["IX", 9],\n        ["X", 10],\n        ["XL", 40],\n        ["L", 50],\n        ["XC", 90],\n        ["C", 100],\n        ["CD", 400],\n        ["D", 500],\n        ["CM", 900],\n        ["M", 1000]\n    ]\n\n    for sym, val in reversed(symbols_list):\n        if num // val:\n            count = num // val\n            roman += (sym * count)\n            num %= val\n    return roman\n\n\ndef main():\n    print(integer_to_roman(3))\n    print(integer_to_roman(58))\n    print(integer_to_roman(1994))\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function c(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>m,a:()=>a});var r=i(7294);const t={},s=r.createContext(t);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function m(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);