"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8293],{5417:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=t(5893),s=t(1151);const l={title:"11 Python Magic Methods Every Programmer Should Know"},i="11 Python Magic Methods Every Programmer Should Know",o={id:"tech-blogs/notes/post_7",title:"11 Python Magic Methods Every Programmer Should Know",description:"- Magic methods, which are also known as dunder methods, help you emulate (imitate or copy) the behavior of built-in functions in  your Python classes.",source:"@site/docs/tech-blogs/notes/post_7.md",sourceDirName:"tech-blogs/notes",slug:"/tech-blogs/notes/post_7",permalink:"/docs/tech-blogs/notes/post_7",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"11 Python Magic Methods Every Programmer Should Know"},sidebar:"tutorialSidebar",previous:{title:"It's harder than ever to be a good software engineer",permalink:"/docs/tech-blogs/notes/post_6"},next:{title:"Boost Your Career in Software Development with These 10 Essential Soft Skills",permalink:"/docs/tech-blogs/notes/post_8"}},c={},d=[{value:"1. _<em>init</em>_",id:"1-_init_",level:2},{value:"2. _<em>repr</em>_",id:"2-_repr_",level:2},{value:"3. _<em>str</em>_",id:"3-_str_",level:2},{value:"4. _<em>eq</em>_",id:"4-_eq_",level:2},{value:"5. _<em>len</em>_",id:"5-_len_",level:2},{value:"6. _<em>add</em>_",id:"6-_add_",level:2},{value:"7. _<em>sub</em>_",id:"7-_sub_",level:2},{value:"8. _<em>mul</em>_",id:"8-_mul_",level:2},{value:"9. _<em>getitem</em>_",id:"9-_getitem_",level:2},{value:"10. _<em>call</em>_",id:"10-_call_",level:2},{value:"11. _<em>getattr</em>_",id:"11-_getattr_",level:2},{value:"Here&#39;s my final code snippet I wrote while reading this article",id:"heres-my-final-code-snippet-i-wrote-while-reading-this-article",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"11-python-magic-methods-every-programmer-should-know",children:"11 Python Magic Methods Every Programmer Should Know"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Magic methods, which are also known as ",(0,r.jsx)("b",{children:"dunder methods"}),", help you emulate (imitate or copy) the behavior of built-in functions in  your Python classes."]}),"\n",(0,r.jsx)(n.li,{children:"These methods have leading and trailing double underscores (__)"}),"\n",(0,r.jsx)(n.li,{children:"In this article, it shows you hw magic methods are used in an example Vector2D class."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"1-_init_",children:["1. _",(0,r.jsx)(n.em,{children:"init"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This function is used to initialize a class. When we creat4e an object of a class, the method is automatically applied and defines the object's inital behavior"}),"\n",(0,r.jsxs)(n.li,{children:["If you don't define the _",(0,r.jsx)(n.em,{children:"init"}),"_ method, you can instantiate an object after creating a class, you can add atrributes like ",(0,r.jsx)(n.code,{children:"obj_name.attribute_name=value"}),". However, this manual way doesn't guarantee the consistency of your objects."]}),"\n",(0,r.jsx)(n.li,{children:"For the Vector2D class, I want every object has x and y values"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nv = Vector(x=5, y=10)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"2-_repr_",children:["2. _",(0,r.jsx)(n.em,{children:"repr"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When you want to inspect or print out the object you instantiated, you'll see that you don't get any helpful information:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"v = Vector2D(3, 5)\nprint(v)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> <__main__.Vector2D object at 0x7d2fcfaf0ac0>\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is why you should add a representation string for the object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})\n\nv = Vector2D(3, 5)\nprint(v)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> Vector2D(x=3, y=5)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"3-_str_",children:["3. _",(0,r.jsx)(n.em,{children:"str"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This method is used to add a string representation for the object as well."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\nv = Vector2D(3, 5)\nprint(v)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> Vector2D(x=3, y=5)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["What is the difference between _",(0,r.jsx)(n.em,{children:"repr"}),"_ and _",(0,r.jsx)(n.em,{children:"str"}),"_?","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Answer: The _",(0,r.jsx)(n.em,{children:"str"}),"_ method is user-friendly which means that it displays a string that any person can read and understand, meanwhile the _",(0,r.jsx)(n.em,{children:"repr"}),"_ function is developer-friend which means that display a srting showcasing the real structure of the object. For example:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from datetime import datetime\n\ndef main():\n    today_date = datetime.today()\n    print(str(today_date))\n    print(repr(today_date))\n\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"2023-12-03 16:51:36.967512\ndatetime.datetime(2023, 12, 3, 16, 51, 36, 967512)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"4-_eq_",children:["4. _",(0,r.jsx)(n.em,{children:"eq"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This method is used to check for equality of any two objects."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nv1 = Vector2D(3, 5)\nv2 = Vector2D(3, 5)\nprint(v1 == v2)\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> True\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If we don't modify this method, by default v1 and v2 wouldn't be equal because the default comparison checks for the objects IDs in memory"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"5-_len_",children:["5. _",(0,r.jsx)(n.em,{children:"len"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python\u2019s built-in len() function helps you compute the length of built-in iterables. Let\u2019s say, for a vector, length should return the number of elements that the vector contains."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __len__(self):\n        return 2\n\nv = Vector2D(3, 5)\nprint(len(v))\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> 2\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"6-_add_",children:["6. _",(0,r.jsx)(n.em,{children:"add"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["With the class Vector2D, we cannot add two vector objects directly, therefore it's necessary to have an _",(0,r.jsx)(n.em,{children:"add"}),"_ method:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __add__(self, other):\n        return Vector2D(self.x + other.x, self.y + other.y)\n\n\nv1 = Vector2D(3, 5)\nv2 = Vector2D(1, 2)\nresult = v1 + v2\nprint(result)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> Vector2D(x=4, y=7)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"7-_sub_",children:["7. _",(0,r.jsx)(n.em,{children:"sub"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Just like the _",(0,r.jsx)(n.em,{children:"add"}),"_ method above, we need to have _",(0,r.jsx)(n.em,{children:"sub"}),"_ method to calculate the difference between any two vector objects"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __sub__(self, other):\n        return Vector2D(self.x - other.x, self.y - other.y)\n\nv1 = Vector2D(3, 5)\nv2 = Vector2D(1, 2)\nresult = v1 - v2\nprint(result)\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> Vector2D(x=2, y=3)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"8-_mul_",children:["8. _",(0,r.jsx)(n.em,{children:"mul"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We can also define a _",(0,r.jsx)(n.em,{children:"mul"}),"_ method to define multiplication between two vector objects"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __mul__(self, other):\n        # Scalar multiplication\n        if isinstance(other, (int, float)):\n            return Vector2D(self.x * other, self.y * other)\n        # Dot product\n        elif isinstance(other, Vector2D):\n            return self.x * other.x + self.y * other.y\n        else:\n            raise TypeError("Unsupported operand type for *")\n\nv1 = Vector2D(3, 5)\nv2 = Vector2D(1, 2)\n\n# Scalar multiplication\nresult1 = v1 * 2\nprint(result1)  \n# Dot product\nresult2 = v1 * v2\nprint(result2)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>>\n\nVector2D(x=6, y=10)\n13\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"9-_getitem_",children:["9. _",(0,r.jsx)(n.em,{children:"getitem"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The _",(0,r.jsx)(n.em,{children:"getitem"}),"_ magic method allows you to index into the objects and access attributes ir slice of attributes using the familiar square-bracket [] syntax"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __getitem__(self, key):\n        if key == 0:\n            return self.x\n        elif key == 1:\n            return self.y\n        else:\n            raise IndexError("Index out of range")\n\nv = Vector2D(3, 5)\nprint(v[0])  \nprint(v[1])\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>>\n\n3\n5\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"10-_call_",children:["10. _",(0,r.jsx)(n.em,{children:"call"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"With an implementation of the __call__method, you can call objects as if they were functions"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n \t \n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __call__(self, scalar):\n        return Vector2D(self.x * scalar, self.y * scalar)\n\nv = Vector2D(3, 5)\nresult = v(3)\nprint(result)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> Vector2D(x=9, y=15)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"11-_getattr_",children:["11. _",(0,r.jsx)(n.em,{children:"getattr"}),"_"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The _",(0,r.jsx)(n.em,{children:"getattr"}),"_ method is used to get the values of specific attributes of the objects"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __getattr__(self, name):\n        if name == "magnitude":\n            return (self.x ** 2 + self.y ** 2) ** 0.5\n        else:\n            raise AttributeError(f"\'Vector2D\' object has no attribute \'{name}\'")\n\nv = Vector2D(3, 4)\nprint(v.magnitude)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Output >>> 5.0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"heres-my-final-code-snippet-i-wrote-while-reading-this-article",children:"Here's my final code snippet I wrote while reading this article"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __str__(self):\n        return f"Vector2D(x={self.x}, y={self.y})"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __len__(self):\n        return 2\n\n    def __add__(self, other):\n        return Vector2D(x=self.x + other.x, y=self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2D(x=self.x - other.x, y=self.y - other.y)\n\n    def __mul__(self, other):\n        if isinstance(other, (int, float)):\n            return Vector2D(x=self.x * other, y=self.y * other)\n        elif isinstance(other, Vector2D):\n            return self.x * other.x + self.y * other.y\n        else:\n            raise TypeError("Unsupported operand type for *")\n\n    def __getitem__(self, item):\n        if item == 0:\n            return self.x\n        elif item == 1:\n            return self.y\n        else:\n            raise IndexError("Index out of range")\n\n    def __call__(self, scalar):\n        return Vector2D(self.x * scalar, self.y * scalar)\n\n    def __getattr__(self, item):\n        if item == "magnitude":\n            return (self.x ** 2 + self.y ** 2) ** 0.5\n        else:\n            raise AttributeError(f"Vector2D object has no attribute {item}")\n\n\nv = Vector2D(3, 5)\nprint(v)\nprint(len(v))\nprint(v[0])\nprint(v[1])\nresult = v(3)\nprint(result)\nprint(v.magnitude)\n\nv1 = Vector2D(10, 20)\nv2 = Vector2D(10, 20)\nprint(v1 == v2)\nprint(v1 + v2)\nprint(v1 - v2)\nprint(v1 * 2)\nprint(v1 * v2)\n\n\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["You can read the full article ",(0,r.jsx)(n.a,{href:"https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know?utm_source=rss&utm_medium=rss&utm_campaign=11-python-magic-methods-every-programmer-should-know&ref=dailydev",children:"here"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var r=t(7294);const s={},l=r.createContext(s);function i(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);