"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4606],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>v});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(r),f=i,v=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return r?t.createElement(v,o(o({ref:n},d),{},{components:r})):t.createElement(v,o({ref:n},d))}));function v(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6237:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=r(7462),i=(r(7294),r(3905));const a={title:"Oct 2"},o=void 0,c={unversionedId:"learning-journal/2023/October/oct_02_23",id:"learning-journal/2023/October/oct_02_23",title:"Oct 2",description:"Breadth first search review",source:"@site/docs/learning-journal/2023/10 - October/oct_02_23.md",sourceDirName:"learning-journal/2023/10 - October",slug:"/learning-journal/2023/October/oct_02_23",permalink:"/my-website/docs/learning-journal/2023/October/oct_02_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Oct 2"},sidebar:"tutorialSidebar",previous:{title:"Oct 1",permalink:"/my-website/docs/learning-journal/2023/October/oct_01_23"},next:{title:"Oct 3",permalink:"/my-website/docs/learning-journal/2023/October/oct_03_23"}},s={},l=[{value:"Breadth first search review",id:"breadth-first-search-review",level:3},{value:"Depth first search review",id:"depth-first-search-review",level:3},{value:"Number of provinces",id:"number-of-provinces",level:3},{value:"Detect cycle in a directed graph",id:"detect-cycle-in-a-directed-graph",level:3}],d={toc:l},p="wrapper";function u(e){let{components:n,...r}=e;return(0,i.kt)(p,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"breadth-first-search-review"},"Breadth first search review"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def breadth_first_search(graph):\n    queue = []\n    visited = set()\n    result = []\n    for key in graph:\n        if key not in visited:\n            queue.append(key)\n            while queue:\n                node = queue.pop(0)\n                if node not in visited:\n                    visited.add(node)\n                    result.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n    return result\n")),(0,i.kt)("h3",{id:"depth-first-search-review"},"Depth first search review"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def depth_first_search(graph):\n    stack = []\n    visited = set()\n    result = []\n    for vertex in graph:\n        if vertex not in visited:\n            stack.append(vertex)\n            while stack:\n                node = stack.pop()\n                if node not in visited:\n                    visted.add(node)\n                    result.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            stack.append(neighbor)\n    return result\n")),(0,i.kt)("h3",{id:"number-of-provinces"},"Number of provinces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def countProvinces(provinces):\n    count = 0\n    n = len(provinces)\n    visited = [0] * n\n    queue = []\n    for i in range(n):\n        if visited[i] == 0:\n            count += 1\n            queue.append(i)\n            while queue:\n                node = queue.pop(0)\n                visited[node] = 1\n                for j in range(n):\n                    if provinces[node][j] == 1 and visited[j] == 0:\n                        queue.append(j)\n    return count\n\n\ndef main():\n    provinces1 = [[1, 0, 0, 1],\n                  [0, 1, 1, 0],\n                  [0, 1, 1, 1],\n                  [1, 0, 1, 1]]\n\n    provinces2 = [[1, 0, 0,  0],\n                 [0, 1, 1, 0],\n                 [0, 1, 1, 0],\n                 [0, 0, 0, 1]]\n\n    print(countProvinces(provinces1))\n    print(countProvinces(provinces2))\n\nif __name__ == "__main__":\n    main()\n\n\n')),(0,i.kt)("h3",{id:"detect-cycle-in-a-directed-graph"},"Detect cycle in a directed graph"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n\n    def addEdge(self, v, w):\n        self.graph[v].append(w)\n        self.graph[w].append(v)\n\n    def isCyclic(self):\n        visited = [False] * self.V\n        for i in range(self.V):\n            if visited[i] == False:\n                if self.isCyclicUtil(i, visited, -1) == True:\n                    return True\n        return False\n\n    def isCyclicUtil(self, v, visited, parent):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                if self.isCyclicUtil(i, visited, v):\n                    return True\n            elif parent != i:\n                return True\n        return False\n\n\ndef main():\n    g = Graph(5)\n    g.addEdge(1, 0)\n    g.addEdge(1, 2)\n    g.addEdge(2, 0)\n    g.addEdge(0, 3)\n    g.addEdge(3, 4)\n    print(g.graph)\n\n\nif __name__ == "__main__":\n    main()\n')))}u.isMDXComponent=!0}}]);