"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8533],{3314:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var i=t(5893),d=t(1151);const s={title:"Feb 15, 2024"},o="Coding Journal: Feb 15, 2024",l={id:"learning-journal/2024/February/20240215",title:"Feb 15, 2024",description:"- Continued with Data Structures for Coding Interview in JavaScript (LinkedList review):",source:"@site/docs/learning-journal/2024/February/20240215.md",sourceDirName:"learning-journal/2024/February",slug:"/learning-journal/2024/February/20240215",permalink:"/docs/learning-journal/2024/February/20240215",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feb 15, 2024"},sidebar:"tutorialSidebar",previous:{title:"Feb 14, 2024",permalink:"/docs/learning-journal/2024/February/20240214"},next:{title:"Feb 16, 2024",permalink:"/docs/learning-journal/2024/February/20240216"}},r={},a=[{value:"Singly LinkedList Implementation",id:"singly-linkedlist-implementation",level:4},{value:"Reverse LinkedList",id:"reverse-linkedlist",level:4},{value:"Remove Duplicates",id:"remove-duplicates",level:4},{value:"Remove Nth Node From The End",id:"remove-nth-node-from-the-end",level:4},{value:"Find Middle Node Of A LinkedList",id:"find-middle-node-of-a-linkedlist",level:4},{value:"Detect Loop",id:"detect-loop",level:4}];function L(n){const e={code:"code",h1:"h1",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,d.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"coding-journal-feb-15-2024",children:"Coding Journal: Feb 15, 2024"}),"\n",(0,i.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Continued with Data Structures for Coding Interview in JavaScript (LinkedList review):","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Singly linkedlist implementation"}),"\n",(0,i.jsx)(e.li,{children:"Reverse linkedlist"}),"\n",(0,i.jsx)(e.li,{children:"Remove duplicates"}),"\n",(0,i.jsx)(e.li,{children:"Remove Nth node from the end"}),"\n",(0,i.jsx)(e.li,{children:"Find middle node of a linked list"}),"\n",(0,i.jsx)(e.li,{children:"Detect loop"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"2-question-i-had-today",children:"2. Question I Had Today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"I didn't have any question for today."}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"I didn't find anything challenging for today."}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,i.jsx)(e.h4,{id:"singly-linkedlist-implementation",children:"Singly LinkedList Implementation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",metastring:'title="singly-linkedlist.js"',children:'class Node {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this.head = null;\n    }\n\n    isEmpty() {\n        if (this.head === null) {\n            return true;\n        }\n        return false;\n    }\n\n    printList() {\n        let cur = this.head;\n        while (cur !== null) {\n            console.log(cur.data);\n            cur = cur.next;\n        }\n        return this;\n    }\n\n    insertAtTail(data) {\n        if (this.isEmpty()) {\n            this.head = new Node(data=data);\n            return this;\n        }\n        // traverse to tail\n        let cur = this.head;\n        while (cur.next !== null) {\n            cur = cur.next;\n        }\n        cur.next = new Node(data=data);\n        return this;\n    }\n\n    insertAtHead(data) {\n        if (this.isEmpty()) {\n            this.head = new Node(data=data);\n            return this;\n        }\n        let newNode = new Node(data=data);\n        newNode.next = this.head;\n        this.head = newNode;\n        return this;\n    }\n\n    search(data) {\n        if (this.isEmpty()) return false;\n        let cur = this.head;\n        while (cur !== null) {\n            if (cur.data === data) {\n                return true;\n            }\n            cur = cur.next;\n        }\n        return false;\n    }\n\n    deleteAtHead() {\n        if (this.isEmpty()) return this;\n        this.head = this.head.next;\n    }\n\n    delete(data) {\n        if (this.isEmpty()) return;\n        let cur = this.head;\n        while (cur !== null) {\n            if (cur.next.data === data) {\n                cur.next = cur.next.next;\n                return this;\n            }\n            cur = cur.next;\n        }\n        return this;\n    }\n    \n}\n\n\nvar myLinkedList = new LinkedList();\nconsole.log(myLinkedList.isEmpty())\nmyLinkedList.head = new Node(1);\nmyLinkedList.head.next = new Node(2);\nmyLinkedList.head.next.next = new Node(3);\nmyLinkedList.head.next.next.next = new Node(4);\nmyLinkedList.head.next.next.next.next = new Node(5);\nconsole.log(myLinkedList.isEmpty())\nmyLinkedList.printList()\nconsole.log("Insert 2 more nodes");\nmyLinkedList.insertAtTail(10);\nmyLinkedList.insertAtHead(20);\nmyLinkedList.printList();\nconsole.log(myLinkedList.search(10));  // true\nconsole.log(myLinkedList.search(3)); // true\nconsole.log(myLinkedList.search(100)); // false\nconsole.log("Delete at head");\nmyLinkedList.deleteAtHead();\nmyLinkedList.printList();\nconsole.log("Delete node 5");\nmyLinkedList.delete(5);\nconsole.log("Delete node 10");\nmyLinkedList.delete(10);\nmyLinkedList.printList();\n'})}),"\n",(0,i.jsx)(e.h4,{id:"reverse-linkedlist",children:"Reverse LinkedList"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",metastring:'title="reverse-linkedlist.js"',children:'import { Node } from "./Node.js";\nimport { LinkedList } from "./LinkedList.js";\n\nfunction reverseLinkedList(head) {\n    let cur = head;\n    let prev = null;\n    while (cur !== null) {\n        let nextNode = cur.next;\n        cur.next = prev;\n        prev = cur;\n        cur = nextNode;\n    }\n    return prev;\n}\n\nlet myLinkedList = new LinkedList();\nmyLinkedList.head = new Node(1);\nmyLinkedList.head.next = new Node(2);\nmyLinkedList.head.next.next = new Node(3);\nmyLinkedList.head.next.next.next = new Node(4);\nmyLinkedList.head.next.next.next.next = new Node(5);\nmyLinkedList.printList(myLinkedList.head);\nconsole.log("Reverse Linked List")\nmyLinkedList.printList(reverseLinkedList(myLinkedList.head));\n'})}),"\n",(0,i.jsx)(e.h4,{id:"remove-duplicates",children:"Remove Duplicates"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",metastring:'title="remove-duplicates.js"',children:'import { Node } from "./Node.js";\nimport { LinkedList } from "./LinkedList.js";\n\nfunction removeDuplicate(head) {\n    let cur = head;\n    let dummyHead = cur;\n    while (cur !== null && cur.next !== null) {\n        if (cur.data === cur.next.data) {\n            cur.next = cur.next.next;\n        } else {\n            cur = cur.next;\n        }\n    }\n    return dummyHead;\n}\n\nlet myLinkedList = new LinkedList();\nmyLinkedList.head = new Node(1);\nmyLinkedList.head.next = new Node(2);\nmyLinkedList.head.next.next = new Node(2);\nmyLinkedList.head.next.next.next = new Node(3);\nmyLinkedList.head.next.next.next.next = new Node(3);\nmyLinkedList.head.next.next.next.next.next = new Node(3);\nmyLinkedList.head.next.next.next.next.next.next = new Node(4);\nmyLinkedList.head.next.next.next.next.next.next.next = new Node(4);\n\n\nmyLinkedList.printList(myLinkedList.head);\nconsole.log("Remove duplicates")\nmyLinkedList.printList(removeDuplicate(myLinkedList.head));\n'})}),"\n",(0,i.jsx)(e.h4,{id:"remove-nth-node-from-the-end",children:"Remove Nth Node From The End"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",metastring:'title="remove-nth-node-from-the-end.js"',children:'import { Node } from "./Node.js";\nimport { LinkedList } from "./LinkedList.js";\n\nfunction findLength(head) {\n    let count = 0;\n    let cur = head;\n    while (cur !== null) {\n        count++;\n        cur = cur.next;\n    }\n    return count;\n}\n\nfunction removeNthNodeFromTheEnd(head, n) {\n    let listLen = findLength(head);\n    let index = listLen - n;\n    let cur = head;\n    let count = 0;\n    while (cur !== null && count < index) {\n        count++;\n        cur = cur.next;\n    }\n    return cur.data;\n}\n\nfunction removeNthNodeFromTheEndTwoPointers(head, n) {\n    let fast = head;\n    let slow = head;\n    let count = 0;\n    while (fast !== null && count < n) {\n        count++;\n        fast = fast.next;\n    }\n\n    while (fast !== null) {\n        slow = slow.next;\n        fast = fast.next;\n    }\n    return slow.data;\n}\n\nlet myLinkedList = new LinkedList();\nmyLinkedList.head = new Node(1);\nmyLinkedList.head.next = new Node(2);\nmyLinkedList.head.next.next = new Node(3);\nmyLinkedList.head.next.next.next = new Node(4);\nmyLinkedList.head.next.next.next.next = new Node(5);\n\nconsole.log(removeNthNodeFromTheEnd(myLinkedList.head, 3)); // 3\nconsole.log(removeNthNodeFromTheEnd(myLinkedList.head, 2)); // 4\nconsole.log(removeNthNodeFromTheEndTwoPointers(myLinkedList.head, 3)); // 3\nconsole.log(removeNthNodeFromTheEndTwoPointers(myLinkedList.head, 2)); // 4\n'})}),"\n",(0,i.jsx)(e.h4,{id:"find-middle-node-of-a-linkedlist",children:"Find Middle Node Of A LinkedList"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",metastring:'title="find-middle-node.js"',children:'import { Node } from "./Node.js";\nimport { LinkedList } from "./LinkedList.js";\n\nfunction findLength(head) {\n    let count = 0;\n    let cur = head;\n    while (cur !== null) {\n        count++;\n        cur = cur.next;\n    }\n    return count;\n}\n\nfunction findMiddleNode(head) {\n    let listLen = findLength(head);\n    let mid = Math.floor(listLen / 2);\n    if (listLen % 2 == 0) {\n        mid--;\n    }\n    let cur = head;\n    let count = 0;\n    while (count < mid) {\n        cur = cur.next;\n        count++;\n    }\n    return cur.data;\n}\n\nfunction findMiddleNodeTwoPointer(head) {\n    let fast = head;\n    let slow = head;\n    while (fast.next !== null && fast.next.next !== null) {\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow.data;\n}\n\n\nlet myLinkedList = new LinkedList();\nmyLinkedList.head = new Node(1);\nmyLinkedList.head.next = new Node(2);\nmyLinkedList.head.next.next = new Node(3);\nmyLinkedList.head.next.next.next = new Node(4);\nmyLinkedList.head.next.next.next.next = new Node(5);\n\nmyLinkedList.printList(myLinkedList.head);\nconsole.log("Middle Node")\nconsole.log(findMiddleNode(myLinkedList.head));\nconsole.log(findMiddleNodeTwoPointer(myLinkedList.head));\n'})}),"\n",(0,i.jsx)(e.h4,{id:"detect-loop",children:"Detect Loop"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",metastring:'title="detect-loop.js"',children:'import { Node } from "./Node.js";\nimport { LinkedList } from "./LinkedList.js";\n\nfunction detectLoop(head) {\n    let fast = head;\n    let slow = head;\n    while (fast !== null && fast.next !== null) {\n        fast = fast.next.next;\n        slow = slow.next;\n        if (fast === slow) return true;\n    }\n    return false;\n}\n\nlet myLinkedList = new LinkedList();\nmyLinkedList.head = new Node(1);\nmyLinkedList.head.next = new Node(2);\nmyLinkedList.head.next.next = new Node(3);\nmyLinkedList.head.next.next.next = new Node(4);\n// myLinkedList.head.next.next.next.next = myLinkedList.head.next;\n\nmyLinkedList.printList(myLinkedList.head);\nconsole.log(detectLoop(myLinkedList.head));\n'})})]})}function c(n={}){const{wrapper:e}={...(0,d.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(L,{...n})}):L(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>o});var i=t(7294);const d={},s=i.createContext(d);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);