"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[427],{7481:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=i(5893),r=i(1151);const s={title:"Day 4"},a=void 0,l={id:"daily-practice/2023/day-4",title:"Day 4",description:"Two Pointers",source:"@site/docs/daily-practice/2023/day-4.md",sourceDirName:"daily-practice/2023",slug:"/daily-practice/2023/day-4",permalink:"/my-website/docs/daily-practice/2023/day-4",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Day 4"},sidebar:"tutorialSidebar",previous:{title:"Day3",permalink:"/my-website/docs/daily-practice/2023/day-3"},next:{title:"Day 5",permalink:"/my-website/docs/daily-practice/2023/day-5"}},o={},c=[{value:"Two Pointers",id:"two-pointers",level:3},{value:"283. Move Zeroes",id:"283-move-zeroes",level:4},{value:"392. Is Subsequence",id:"392-is-subsequence",level:4},{value:"11. Container With the Most Water",id:"11-container-with-the-most-water",level:4},{value:"1679. Max Number of K-Sum Pairs",id:"1679-max-number-of-k-sum-pairs",level:4}];function m(n){const e={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h3,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,t.jsx)(e.h4,{id:"283-move-zeroes",children:"283. Move Zeroes"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"The first solution is:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Create a result array containing all zero values and its length is equal to nums' length."}),"\n",(0,t.jsx)(e.li,{children:"Traverse through every element in the nums array, append the non-zero values to the result array and update the curren index of result array."}),"\n",(0,t.jsx)(e.li,{children:"Time complexity: O(n)"}),"\n",(0,t.jsx)(e.li,{children:"Space complexity: O(n)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"The second solution is:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Have an index zero at the start of the index, if nums[zero] == 0 and current value in the array is not 0, we swap"}),"\n",(0,t.jsx)(e.li,{children:"If the nums[zero] is not 0, we increment the zero index"}),"\n",(0,t.jsx)(e.li,{children:"Time complexity: O(n)"}),"\n",(0,t.jsx)(e.li,{children:"Space complexity: O(1)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def move_zero_i(nums):\n    res = [0] * len(nums)\n    index = 0\n    for num in nums:\n        if num != 0:\n            res[index] = num\n            index += 1\n    return res\n\n\ndef move_zero_ii(nums):\n    zero = 0\n    for i in range(len(nums)):\n        if nums[i] != 0 and nums[zero] == 0:\n            # Swap\n            nums[i], nums[zero] = nums[zero], nums[i]\n            zero += 1\n        if nums[zero] != 0:\n            zero += 1\n    return nums\n\n\ndef main():\n    nums = [0, 1, 0, 3, 12]\n    nums1 = [1, 2, 3, 0, 0, 5]\n    print(move_zero_i(nums))\n    print(move_zero_ii(nums))\n\n    print(move_zero_i(nums1))\n    print(move_zero_ii(nums1))\n\n    print(move_zero_i([0]))\n    print(move_zero_ii([0]))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,t.jsx)(e.h4,{id:"392-is-subsequence",children:"392. Is Subsequence"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"I create two pointers, s_ptr starts at index 0 of s string, and p_ptr starts at index 0 of t string."}),"\n",(0,t.jsx)(e.li,{children:"Compare the value of these two index of s and p strings. If s[s_ptr] == t[t_ptr], we increment both of the index. Else, we increment the t_ptr to traverse every element in t string"}),"\n",(0,t.jsx)(e.li,{children:"Time complexity: O(n), which n is the length of t_string"}),"\n",(0,t.jsx)(e.li,{children:"Space complexity: O(1)"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def isSubsequence(s, t):\n    if not s:\n        return True\n    if not t:\n        return False\n    s_ptr = 0\n    t_ptr = 0\n    while t_ptr < len(t):\n        if t[t_ptr] == s[s_ptr]:\n            s_ptr += 1\n            if s_ptr == len(s):\n                return True\n        t_ptr += 1\n    return s_ptr == len(s)\n\n\ndef main():\n    print(isSubsequence("abc", "ahbgdc"))\n    print(isSubsequence("axc", "ahbgdc"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(e.h4,{id:"11-container-with-the-most-water",children:"11. Container With the Most Water"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"To find the max area, we need to have the maximum width and length. The maximum width we can have is the length between the first indedx and the last index. Therefore, it's the best to have to pointers and each starts at the other end of the array"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def contain_most_water_i(height):\n    maxArea = 1\n    for i in range(len(height)):\n        for j in range(i + 1, len(height)):\n            cur_area = (j - i) * (min(height[i], height[j]))\n            maxArea = max(maxArea, cur_area)\n    return maxArea\n\n\ndef contain_most_water_ii(height):\n    maxArea = 0\n    i = 0\n    j = len(height) - 1\n    while i < j:\n        curArea = (j - i) * (min(height[i], height[j]))\n        maxArea = max(maxArea, curArea)\n        if height[i] < height[j]:\n            i += 1\n        else:\n            j -= 1\n    return maxArea\n\n\ndef main():\n    h1 = [1, 8, 6, 2, 5, 4, 8, 3, 7]\n    print(contain_most_water_i(h1))\n    print(contain_most_water_ii(h1))\n\n    h2 = [1, 1]\n    print(contain_most_water_i(h2))\n    print(contain_most_water_ii(h2))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(e.h4,{id:"1679-max-number-of-k-sum-pairs",children:"1679. Max Number of K-Sum Pairs"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["There are two ways that I can solve thsi problem:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Sort the give array and apply binary search to find the target sum and update the count variable","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Time Complexity: O(nlogn) because we use sort() function"}),"\n",(0,t.jsx)(e.li,{children:"Space Complexity: O(1)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Using default dictionary to store the value and appearance of the values in the array.","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Time complexity: O(n), because we just traverse through every element of the array"}),"\n",(0,t.jsx)(e.li,{children:"Space complexity: O(n), becasue we use defaultdict and may store up to n elements of the give array."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from collections import defaultdict\n\n\ndef find_max_pairs_i(nums, k):\n    left = 0\n    right = len(nums) - 1\n    nums.sort()\n    pairs = 0\n    while left < right:\n        cur_sum = nums[left] + nums[right]\n        if cur_sum == k:\n            pairs += 1\n            left += 1\n            right -= 1\n        elif cur_sum < k:\n            left += 1\n        else:\n            right -= 1\n    return pairs\n\n\n# Using default dict\ndef find_max_pairs_ii(nums, k):\n    d = defaultdict(int)\n    pairs = 0\n    for num in nums:\n        a = k - num\n        if d[a] > 0:\n            d[a] -= 1\n            pairs += 1\n        else:\n            d[num] = +1\n    return pairs\n\n\ndef main():\n    nums1 = [1, 2, 3, 4]\n    k1 = 5\n    nums2 = [3, 1, 3, 4, 3]\n    k2 = 6\n\n    nums3 = [4, 4, 1, 3, 1, 3, 2, 2, 5, 5, 1, 5, 2, 1, 2, 3, 5, 4]\n    k3 = 2\n\n    print(find_max_pairs_i(nums1, k1))  # 2\n    print(find_max_pairs_ii(nums1, k1))\n\n    print(find_max_pairs_i(nums2, k2))  # 1\n    print(find_max_pairs_ii(nums2, k2))\n\n    print(find_max_pairs_i(nums3, k3))  # 2\n    print(find_max_pairs_ii(nums3, k3))\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function u(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>l,a:()=>a});var t=i(7294);const r={},s=t.createContext(r);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);