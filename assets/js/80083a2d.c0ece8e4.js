"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[791],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return r?a.createElement(k,s(s({ref:t},c),{},{components:r})):a.createElement(k,s({ref:t},c))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3885:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const i={title:"Sep 24",description:"Sun, Sep 24"},s=void 0,o={unversionedId:"coding-journal/2023/September/sep_24_23",id:"coding-journal/2023/September/sep_24_23",title:"Sep 24",description:"Sun, Sep 24",source:"@site/docs/coding-journal/2023/September/sep_24_23.md",sourceDirName:"coding-journal/2023/September",slug:"/coding-journal/2023/September/sep_24_23",permalink:"/my-website/docs/coding-journal/2023/September/sep_24_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding-journal/2023/September/sep_24_23.md",tags:[],version:"current",frontMatter:{title:"Sep 24",description:"Sun, Sep 24"},sidebar:"tutorialSidebar",previous:{title:"Sep 23",permalink:"/my-website/docs/coding-journal/2023/September/sep_23_23"},next:{title:"Leetcode Grinding",permalink:"/my-website/docs/category/leetcode-grinding"}},l={},p=[{value:"Question 1:",id:"question-1",level:3},{value:"Working on Django REST Framework for To Do List API",id:"working-on-django-rest-framework-for-to-do-list-api",level:2},{value:"Notes:",id:"notes",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Exploring Frameworks\nGoal: This exercise will help me explore many different Python frameworks to build API"),(0,n.kt)("h3",{id:"question-1"},"Question 1:"),(0,n.kt)("p",null,"There are 5 main HTTP Verbs: GET, POST, PUT, PATCH, DELETE. Explain in details what they are? "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'GET: I understand this verb as "GET INFORMATION". For this case, the API will get the information from MYSQL database that I set up and connect to my project. Everytime new task is added, TODOLIST database will be updated. So whenever a GET request is made, it will retrieve and return the required data. '),(0,n.kt)("li",{parentName:"ul"},'POST: I understand this verb as "POST SOMETHING NEW". For this case, when I add new task, I\'m POSTING. Adding new data/resource to database/server. '),(0,n.kt)("li",{parentName:"ul"},'DELETE: I literally understand as what it\'s called, "DELETE". If a Delete request is made, the required data will be removed from the database/server.'),(0,n.kt)("li",{parentName:"ul"},"PUT & PATCH: Both of these two methods are UPDATE, but they're not similar",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'PUT: Update the current data or create a new if doesn\'t exist. For example, to change the title and remove the description, you can send a PUT request with {title: "somethingnew"}. The absence of the description would signal that it should be removed or reset to default.'),(0,n.kt)("li",{parentName:"ul"},'PATCH: Only update a partial modification to a resource. So to update task\'s title, you only need to send a PATCH request with {title: "somethingnew"} without having to resent the whole entity')))),(0,n.kt)("h2",{id:"working-on-django-rest-framework-for-to-do-list-api"},"Working on Django REST Framework for To Do List API"),(0,n.kt)("p",null,"For this, I can either combine GET, PUT, PATCH, DELETE with generics.RetrieveUpdateDestroyAPIView"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="todolistapi/views.py"',title:'"todolistapi/views.py"'},"from .models import Task\nfrom .serializers import TaskSerializers\nfrom rest_framework import generics\n\n\n# Create your views here.\nclass TaskListView(generics.ListAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n\nclass TaskDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="todolistapi/urls.py"',title:'"todolistapi/urls.py"'},'from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path("tasks/", views.TaskListView.as_view(), name="task-list"),\n    path("tasks/<int:pk>/", views.TaskDetailView.as_view(), name="task-detail"),\n]\n')),(0,n.kt)("p",null,"I can also create seperate view for each function but it will repeate the same format (querryset, serializer_class)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="todolistapi/views.py"',title:'"todolistapi/views.py"'},"from .models import Task\nfrom .serializers import TaskSerializers\nfrom rest_framework import generics\n\n\n# Create your views here.\nclass TaskListView(generics.ListAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n\nclass TaskDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n\nclass TaskCreateView(generics.CreateAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n\nclass TaskDetailView(generics.RetrieveAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n\nclass TaskUpdateView(generics.UpdateAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n\nclass TaskDeleteView(generics.DestroyAPIView):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializers\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="todolistapi/urls.py"',title:'"todolistapi/urls.py"'},'from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path("tasks/", views.TaskListView.as_view(), name="task-list"),\n    path("tasks/create/", views.TaskCreateView.as_view(), name="task-create"),\n    path("tasks/<int:pk>/", views.TaskDetailView.as_view(), name="task-detail"),\n    path("tasks/update/<int:pk>/", views.TaskUpdateView.as_view(), name="task-update"),\n    path("tasks/delete/<int:pk>/",  views.TaskDeleteView.as_view(), name="task-delete"),\n]\n')),(0,n.kt)("h4",{id:"notes"},"Notes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"I prefer to stick with the first way by using generics.RetrieveUpdateDestroyAPIView since it can handle PUT, PATCH, DELETE methods in only class-based view. DRY principle is applied by not repeating code through out the whole program"),(0,n.kt)("li",{parentName:"ul"},"There may be confusing if I create seperate function for each method since REST principles lean more on HTTP verb than url"),(0,n.kt)("li",{parentName:"ul"},"I need to rearrnage the urlpatterns because the urls for PUT, PATCH, DELETE are like the one for GET method."),(0,n.kt)("li",{parentName:"ul"},"We can also write CRUD functions using APIView but I'll work on it later. "),(0,n.kt)("li",{parentName:"ul"},"Testing endpoints and HTTP Verb using curl in Terminal is a good way to make sure that your API works properly.")))}d.isMDXComponent=!0}}]);