"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6124],{8851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var i=t(5893),d=t(1151);const s={title:"Linked List"},l=void 0,a={id:"daily-practice/leetcode75/linked_list",title:"Linked List",description:"Delete the Middle Node of a Linked List",source:"@site/docs/daily-practice/leetcode75/linked_list.md",sourceDirName:"daily-practice/leetcode75",slug:"/daily-practice/leetcode75/linked_list",permalink:"/docs/daily-practice/leetcode75/linked_list",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Linked List"},sidebar:"tutorialSidebar",previous:{title:"Binary Tree - DFS",permalink:"/docs/daily-practice/leetcode75/dfs"},next:{title:"Prefix Sum",permalink:"/docs/daily-practice/leetcode75/prefix_sum"}},r={},o=[{value:"Delete the Middle Node of a Linked List",id:"delete-the-middle-node-of-a-linked-list",level:3},{value:"Odd Even Linked List",id:"odd-even-linked-list",level:3},{value:"Reverse Linked List",id:"reverse-linked-list",level:3},{value:"Maximum Twin Sum of a Linked List",id:"maximum-twin-sum-of-a-linked-list",level:3}];function x(e){const n={code:"code",h3:"h3",pre:"pre",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"delete-the-middle-node-of-a-linked-list",children:"Delete the Middle Node of a Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n    print()\n\n\ndef delete_node_in_middle_list(head):\n    if not head or not head.next:\n        return head\n\n    # Traverse to the middle node\n    fast = head\n    slow = head\n    prev = None\n    while fast and fast.next:\n        fast = fast.next.next\n        prev = slow\n        slow = slow.next\n    prev.next = slow.next\n    return head\n\n\ndef main():\n    h = ListNode(1)\n    h.next = ListNode(2)\n    h.next.next = ListNode(3)\n    h.next.next.next = ListNode(4)\n    print_list(delete_node_in_middle_list(head=h))\n\n    h1 = ListNode(1)\n    h1.next = ListNode(2)\n    h1.next.next = ListNode(3)\n    h1.next.next.next = ListNode(4)\n    h1.next.next.next.next = ListNode(5)\n    print_list(delete_node_in_middle_list(h1))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"odd-even-linked-list",children:"Odd Even Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n    print()\n\n\ndef odd_even_list(head):\n    if not head:\n        return\n\n    odd = head\n    even = head.next\n    evenHead = even\n\n    while even and even.next:\n        odd.next = odd.next.next\n        even.next = even.next.next\n        odd = odd.next\n        even = even.next\n    odd.next = evenHead\n    return head\n\n\ndef main():\n    h = ListNode(1)\n    h.next = ListNode(2)\n    h.next.next = ListNode(3)\n    h.next.next.next = ListNode(4)\n    h.next.next.next.next = ListNode(5)\n\n    print_list(head=h)\n    print_list(head=odd_even_list(h))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reverse-linked-list",children:"Reverse Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef reverse_linkedlist(head):\n    prev = None\n    cur = head\n    while cur:\n        next_node = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next_node\n    return prev\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n\n\ndef main():\n    h = ListNode(1)\n    h.next = ListNode(2)\n    h.next.next = ListNode(3)\n    h.next.next.next = ListNode(4)\n\n    print_list(head=reverse_linkedlist(h))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"maximum-twin-sum-of-a-linked-list",children:"Maximum Twin Sum of a Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef pairSum(head):\n    fast = slow = head\n\n    # Traverse slow pointer to the middle node\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n\n    # Reverse the second half\n    prev = None\n    while slow:\n        next_node = slow.next\n        slow.next = prev\n        prev = slow\n        slow = next_node\n    slow = prev\n    fast = head\n    max_sum = float("-inf")\n    while fast and slow:\n        cur_sum = fast.val + slow.val\n        max_sum = max(max_sum, cur_sum)\n        fast = fast.next\n        slow = slow.next\n    return max_sum\n\n\ndef reverse_linkedlist(head):\n    prev = ListNode()\n    while head:\n        next_node = head.next\n        head.next = prev\n        prev = head\n        head = next_node\n    return prev\n\n\ndef pair_sum(head):\n    max_sum = float("-inf")\n    # Traverse to the middle node\n    fast = head\n    slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    fast = head\n    slow = reverse_linkedlist(slow)\n    while fast and slow:\n        cur_sum = fast.val + slow.val\n        max_sum = max(max_sum, cur_sum)\n        fast = fast.next\n        slow = slow.next\n    return max_sum\n\n\ndef main():\n    h = ListNode(5)\n    h.next = ListNode(4)\n    h.next.next = ListNode(2)\n    h.next.next.next = ListNode(1)\n\n    h1 = ListNode(4)\n    h1.next = ListNode(2)\n    h1.next.next = ListNode(2)\n    h1.next.next.next = ListNode(3)\n\n    # print(pairSum(h))  # 6\n    print(pair_sum(h))\n    # print(pairSum(h1))  # 7\n    print(pair_sum(h1))\n\n\nif __name__ == "__main__":\n    main()\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>l});var i=t(7294);const d={},s=i.createContext(d);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);