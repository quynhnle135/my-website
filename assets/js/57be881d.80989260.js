"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1199],{3263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(5893),s=t(1151);const a={title:"Interview Preparation - JavaScript (2)"},r="Interview Preparation - JavaScript (2)",c={id:"tech-blogs/become-fullstack-developer/interview_prep_js_2",title:"Interview Preparation - JavaScript (2)",description:'What is "use strict"? What are the major effects that it has?',source:"@site/docs/tech-blogs/become-fullstack-developer/interview_prep_js_2.md",sourceDirName:"tech-blogs/become-fullstack-developer",slug:"/tech-blogs/become-fullstack-developer/interview_prep_js_2",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_2",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Interview Preparation - JavaScript (2)"},sidebar:"tutorialSidebar",previous:{title:"Interview Preparation - JavaScript (1)",permalink:"/docs/tech-blogs/become-fullstack-developer/interview_prep_js_1"},next:{title:"Node.js Introduction and Fundamental (1)",permalink:"/docs/tech-blogs/become-fullstack-developer/node1"}},o={},l=[{value:"What is &quot;use strict&quot;? What are the major effects that it has?",id:"what-is-use-strict-what-are-the-major-effects-that-it-has",level:3},{value:"What are the different type of scopes?",id:"what-are-the-different-type-of-scopes",level:3},{value:"What is hoisting?",id:"what-is-hoisting",level:3},{value:"Explain the difference between var, let, and const?",id:"explain-the-difference-between-var-let-and-const",level:3},{value:"What is scope chain? What is lexical scoping?",id:"what-is-scope-chain-what-is-lexical-scoping",level:3},{value:"What is a closure and what are some closure use cases?",id:"what-is-a-closure-and-what-are-some-closure-use-cases",level:3},{value:"What is currying and its use case?",id:"what-is-currying-and-its-use-case",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"interview-preparation---javascript-2",children:"Interview Preparation - JavaScript (2)"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-use-strict-what-are-the-major-effects-that-it-has",children:'What is "use strict"? What are the major effects that it has?'}),"\n",(0,i.jsx)(n.h3,{id:"what-are-the-different-type-of-scopes",children:"What are the different type of scopes?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There are three different scopes:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Global scope"}),"\n",(0,i.jsx)(n.li,{children:"Function scope"}),"\n",(0,i.jsx)(n.li,{children:"Block scope"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-is-hoisting",children:"What is hoisting?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)("mark",{children:"Hoisting in JS is the process where JS interpreter moves all variables and function declarations to the top of their containing scope before the scope has actually executed. "}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Function declaration can be fully hoisted."}),"\n",(0,i.jsx)(n.li,{children:"Var variable when being hoisted, its value is undefined."}),"\n",(0,i.jsxs)(n.li,{children:["Other functions (expression functions or arrow functions), let and const variables ",(0,i.jsx)("b",{children:(0,i.jsx)("i",{children:"will return ReferenceError. "})})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"explain-the-difference-between-var-let-and-const",children:"Explain the difference between var, let, and const?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Var has global scope, can be re-declared and updated."}),"\n",(0,i.jsx)(n.li,{children:"Let and const has function scope and block scope and cannot be re-declared. However, let variables can be updated after being assigned."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"what-is-scope-chain-what-is-lexical-scoping",children:"What is scope chain? What is lexical scoping?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Scope chain: the cycle of looking for a variable's value withint the current scope, then outer scope, and so on until finding the value or reaching the global scope."}),"\n",(0,i.jsx)(n.li,{children:"Lexical scoping: code inside a function may access variables defined outside, but not the reverse. For example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function outerFunction() {\n  let outer = 'I am outside!';\n\n  function innerFunction() {\n    let inner = 'I am inside!';\n    console.log(outer); // innerFunction can access outer because of lexical scoping.\n    console.log(inner); // innerFunction can access its own variable.\n  }\n\n  console.log(outer); // outerFunction can access its own variable.\n  // console.log(inner); This would cause an error because inner is not defined in this scope.\n  innerFunction();\n}\n\nouterFunction();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"what-is-a-closure-and-what-are-some-closure-use-cases",children:"What is a closure and what are some closure use cases?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Closure: an inner function with references to outer function scope and its variable. Closure goes with lexical scoping very well. For example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function myFunction () {\n    let counter = 1;\n    return function() {\n        counter++;\n        return counter;\n    }\n} \n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Closure can be used for data encapsulation, currying, event handlers and callbacks."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"what-is-currying-and-its-use-case",children:"What is currying and its use case?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Currying is breaking down a function that takes multiple arguments into a sequence of functions that each take a single argument."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:""})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var i=t(7294);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);