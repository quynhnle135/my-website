"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[798],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6801:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={title:"Sep 26"},o=void 0,s={unversionedId:"leetcode-grinding/2023/September/sep_26_23",id:"leetcode-grinding/2023/September/sep_26_23",title:"Sep 26",description:"316. Remove Duplicate Letters",source:"@site/docs/leetcode-grinding/2023/September/sep_26_23.md",sourceDirName:"leetcode-grinding/2023/September",slug:"/leetcode-grinding/2023/September/sep_26_23",permalink:"/my-website/docs/leetcode-grinding/2023/September/sep_26_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode-grinding/2023/September/sep_26_23.md",tags:[],version:"current",frontMatter:{title:"Sep 26"},sidebar:"tutorialSidebar",previous:{title:"Sep 04",permalink:"/my-website/docs/leetcode-grinding/2023/September/sep_04_23"},next:{title:"Tutorial - Basics",permalink:"/my-website/docs/category/tutorial---basics"}},l={},c=[{value:"316. Remove Duplicate Letters",id:"316-remove-duplicate-letters",level:3},{value:"Notes:",id:"notes",level:4},{value:"151. Reverese words in a string",id:"151-reverese-words-in-a-string",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"316-remove-duplicate-letters"},"316. Remove Duplicate Letters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def removeDuplicateLetters(s):\n    result = ""\n    last_occ = {}\n    stack = []\n    visited = set()\n    for i in range(len(s)):\n        last_occ[s[i]] = i\n\n    for i in range(len(s)):\n        if s[i] not in visited:\n            while stack and stack[-1] > s[i] and last_occ[stack[-1]] > i:\n                visited.remove(stack.pop())\n            visited.add(s[i])\n            stack.append(s[i])\n    for letter in stack:\n        result += letter\n    return result\n\n\ndef main():\n    print(removeDuplicateLetters("bcabc"))\n    print(removeDuplicateLetters("cbacdcbc"))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,a.kt)("h4",{id:"notes"},"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For this problem, the main thing that I need to pay attention to is the lexicographical order"),(0,a.kt)("li",{parentName:"ul"},'An example of lexicographical order is that "abcd" is smaller than "abef" (based on the length and alphebetical order)'),(0,a.kt)("li",{parentName:"ul"},"However, the problem requires to remove the duplicate letter in order, not remove the duplicate letters and rearrange to the smallest possible lexicographical order. That's why I need to use stack and queue to keep track and compare ")),(0,a.kt)("h3",{id:"151-reverese-words-in-a-string"},"151. Reverese words in a string"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"")))}u.isMDXComponent=!0}}]);