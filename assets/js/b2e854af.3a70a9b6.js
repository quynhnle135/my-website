"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4968],{3713:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=r(5893),t=r(1151);const a={title:"Nov 10",description:"Coding Journal - Thu, Nov 10",tags:["journal"]},l=void 0,o={id:"learning-journal/2022/November/nov_10_22",title:"Nov 10",description:"Coding Journal - Thu, Nov 10",source:"@site/docs/learning-journal/2022/November/nov_10_22.md",sourceDirName:"learning-journal/2022/November",slug:"/learning-journal/2022/November/nov_10_22",permalink:"/my-website/docs/learning-journal/2022/November/nov_10_22",draft:!1,unlisted:!1,tags:[{label:"journal",permalink:"/my-website/docs/tags/journal"}],version:"current",frontMatter:{title:"Nov 10",description:"Coding Journal - Thu, Nov 10",tags:["journal"]},sidebar:"tutorialSidebar",previous:{title:"Learning Journal",permalink:"/my-website/docs/category/learning-journal"},next:{title:"Nov 11",permalink:"/my-website/docs/learning-journal/2022/November/nov_11_22"}},s={},c=[{value:"Problems I solved today",id:"problems-i-solved-today",level:3},{value:"Number Of Island:",id:"number-of-island",level:4},{value:"Reshape the matrix",id:"reshape-the-matrix",level:4},{value:"Pascal triangle",id:"pascal-triangle",level:4},{value:"Search in 2D matrix",id:"search-in-2d-matrix",level:4}];function d(n){const e={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h3,{id:"problems-i-solved-today",children:"Problems I solved today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Number of Islands"}),"\n",(0,i.jsx)(e.li,{children:"Reshape the Matrix"}),"\n",(0,i.jsx)(e.li,{children:"Pascal Triangle"}),"\n",(0,i.jsx)(e.li,{children:"Search in 2D Matrix"}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"number-of-island",children:"Number Of Island:"}),"\n",(0,i.jsx)(e.p,{children:"Apply Breadth First Search to check all the '1' around the current element and turn them to '0' to make it easier to count other islands if available and avoid duplicates."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"public static int findIsland(char[][] grid) {\n          int count = 0;\n          // access to each row\n          for (int i = 0; i < grid.length; i++) {\n                // access to each column\n                for (int j = 0; j < grid[i].length; j++) {\n                        count++;\n                        BFS(grid, i, j);\n                }\n          }\n          return count;\n}\n\npublic static void BFS(char[][] grid, int i, int j) {\n          if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == '0') return;\n\n          // turn current element to 0\n          grid[i][j] = '0';\n          BFS(grid, i + 1, j); // down\n          BFS(grid, i - 1, j); // up\n          BFS(grid, i, j + 1); // right\n          BFS(grid, i, j - 1); // left\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"reshape-the-matrix",children:"Reshape the matrix"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"public static int[][] reshapeMatrix(int[][] matrix, int r, int c) { \n    int m = matrix.length; int n = matrix[0].length; if ((m n != r c) || (m == r && r == c)) { \n        return matrix; \n    }\n\n    int row = 0;\n    int col = 0;\n    int[][] res = new int[r][c];\n    for (int i = 0; i < matrix.length; i++) {\n        for (int j = 0; j < matrix[i].length; j++) {\n                res[row][col] = matrix[i][j];\n                col++;\n                if (col == c) {\n                    col = 0;\n                    row++;\n                }\n        }\n    }\n    return res;\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"pascal-triangle",children:"Pascal triangle"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"public static List<List<Integer>> createPascalTriangle(int numRows) {\n        List<List<Integer>> triangle = new ArrayList<>();\n        if (numRows <= 0) {\n            return triangle;\n        }\n\n        List<Integer> firstRow = new ArrayList<>();\n        firstRow.add(1);\n        triangle.add(firstRow);\n\n        for (int i = 1; i < numRows; i++) {\n            List<Integer> prevRow = triangle.get(i - 1);\n            List<Integer> currentRow = new ArrayList<>();\n            currentRow.add(1);\n            for (int j = 1; j < i; j++) {\n                currentRow.add(prevRow.get(j - 1) + prevRow.get(j));\n            }\n            currentRow.add(1);\n            triangle.add(currentRow);\n        }\n        return triangle;\n    }\n"})}),"\n",(0,i.jsx)(e.h4,{id:"search-in-2d-matrix",children:"Search in 2D matrix"}),"\n",(0,i.jsx)(e.p,{children:"There are two solutions for this problem."}),"\n",(0,i.jsx)(e.p,{children:"First Solution aka Naive Approach: Time complexity is O(N^2) because I use two nested loops"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"public static boolean searchInMatrix(int[][] matrix, int target) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                if (matrix[i][j] == target) {\n                    return true;\n                }\n            }\n        }\n        return false;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Second solution: Using Binary Search but create a seperate method for it"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"public static boolean search(int[][] matrix, int target) {\n        for (int i = 0; i < matrix.length; i++) {\n            if (binarySearch(matrix[i], target)) return true;\n        }\n        return false;\n    }\n    public static boolean binarySearch(int[] arr, int target) {\n        int lo = 0;\n        int hi = arr.length - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (arr[mid] == target) {\n                return true;\n            }\n            if (target > arr[mid]) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return false;\n    }\n"})}),"\n",(0,i.jsx)(e.p,{children:"Third solution: Apply Binary Search"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"public static boolean searchMatrix(int[][] matrix, int target) {\n        int row = matrix.length;\n        int col = matrix[0].length;\n        int i = 0;\n        int j = col - 1;\n        while (i < matrix.length && j >= 0) {\n            if (matrix[i][j] == target) {\n                return true;\n            }\n            if (target > matrix[i][j]) {\n                i++;\n            }\n            else {\n                j--;\n            }\n        }\n        return false;\n    }\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>o,a:()=>l});var i=r(7294);const t={},a=i.createContext(t);function l(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);