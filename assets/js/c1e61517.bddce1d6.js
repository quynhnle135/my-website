"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),d=i,f=g["".concat(l,".").concat(d)]||g[d]||p[d]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},706:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={title:"Aug 29",description:"Tue, Aug 29"},o=void 0,s={unversionedId:"leetcode-grinding/2023/August/aug_29_23",id:"leetcode-grinding/2023/August/aug_29_23",title:"Aug 29",description:"Tue, Aug 29",source:"@site/docs/leetcode-grinding/2023/August/aug_29_23.md",sourceDirName:"leetcode-grinding/2023/August",slug:"/leetcode-grinding/2023/August/aug_29_23",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_29_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode-grinding/2023/August/aug_29_23.md",tags:[],version:"current",frontMatter:{title:"Aug 29",description:"Tue, Aug 29"},sidebar:"tutorialSidebar",previous:{title:"Aug 28",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_28_23"},next:{title:"Aug 30",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_30_23"}},l={},u=[{value:"Longest substring without repeating characters",id:"longest-substring-without-repeating-characters",level:3},{value:"Longest palindromic substring",id:"longest-palindromic-substring",level:3}],c={toc:u},g="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"longest-substring-without-repeating-characters"},"Longest substring without repeating characters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        """\n        :type s: str\n        :rtype: int\n        """\n        start = max_len = 0\n        char_dict = {}\n        for end in range(len(s)):\n            if s[end] in char_dict:\n                start = max(start, char_dict[s[end]] + 1)\n            char_dict[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n        return max_len\n')),(0,i.kt)("h3",{id:"longest-palindromic-substring"},"Longest palindromic substring"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution(object):\n    def longestPalindrome(self, s):\n        """\n        :type s: str\n        :rtype: str\n        """\n        longest = ""\n        for i in range(len(s)):\n            p1 = self.expand_around_center(s, i, i)\n            p2 = self.expand_around_center(s, i, i + 1)\n            if len(p1) > len(longest):\n                longest = p1\n            if len(p2) > len(longest):\n                longest = p2\n        return longest\n\n    def expand_around_center(self, s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1: right]\n')))}p.isMDXComponent=!0}}]);