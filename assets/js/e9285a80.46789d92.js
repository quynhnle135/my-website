"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1700],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={title:"Sep 28"},l=void 0,o={unversionedId:"daily-practice/2023/September/sep_28_23",id:"daily-practice/2023/September/sep_28_23",title:"Sep 28",description:"143, Reorder List",source:"@site/docs/daily-practice/2023/September/sep_28_23.md",sourceDirName:"daily-practice/2023/September",slug:"/daily-practice/2023/September/sep_28_23",permalink:"/my-website/docs/daily-practice/2023/September/sep_28_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Sep 28"},sidebar:"tutorialSidebar",previous:{title:"Sep 26",permalink:"/my-website/docs/daily-practice/2023/September/sep_26_23"},next:{title:"Day 1",permalink:"/my-website/docs/daily-practice/leetcode-75/day-1"}},s={},p=[{value:"143, Reorder List",id:"143-reorder-list",level:3},{value:"Notes:",id:"notes",level:4},{value:"735. Asteroid Collision",id:"735-asteroid-collision",level:3},{value:"Notes:",id:"notes-1",level:4},{value:"Daily challenge: 905. Sort array by parity",id:"daily-challenge-905-sort-array-by-parity",level:3},{value:"First approach",id:"first-approach",level:4},{value:"Second approach:",id:"second-approach",level:4}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"143-reorder-list"},"143, Reorder List"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef reorder_list(head):\n    fast = slow = head\n    # find the mid node\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n\n    # reverse the second half\n    prev = None\n    cur = slow\n    while cur:\n        next_node = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next_node\n\n    # merge two lists\n    first = head\n    second = prev\n\n    while second.next:\n        first.next, first = second, first.next\n        second.next, second = first, second.next\n\n    return head\n\n\ndef print_list(head):\n    cur = head\n    while cur.next:\n        print(cur.val, end=" -> ")\n        cur = cur.next\n    print(cur.val, end=" -> null")\n\n\ndef main():\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    # head.next.next.next.next = Node(5)\n    print_list(head=reorder_list(head))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,a.kt)("h4",{id:"notes"},"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can solve this problem using stack as well, will contemplate on this later"),(0,a.kt)("li",{parentName:"ul"},"We can solve this problem by thinking back about merging two sorted list problem"),(0,a.kt)("li",{parentName:"ul"},"Find the middle node, fast and slow pointers are really useful for this problem")),(0,a.kt)("h3",{id:"735-asteroid-collision"},"735. Asteroid Collision"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def asteroid_collision(asteroids):\n    stack = []\n    for a in asteroids:\n        if not stack or a > 0:\n            stack.append(a)\n        else:\n            while stack and stack[-1] > 0 and stack[-1] < abs(a):\n                stack.pop()\n            if not stack or stack[-1] < 0:\n                stack.append(a)\n            elif stack and stack[-1] == -a:\n                stack.pop()\n    return stack\n\n\ndef main():\n    print(asteroid_collision([5, 10, -5]))\n    print(asteroid_collision([8, -8]))\n    print(asteroid_collision([10, 2, -5]))\n\n\nif __name__ == "__main__":\n    main()\n\n\n\n')),(0,a.kt)("h4",{id:"notes-1"},"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Make the most use of stack and logical if-else statements")),(0,a.kt)("h3",{id:"daily-challenge-905-sort-array-by-parity"},"Daily challenge: 905. Sort array by parity"),(0,a.kt)("h4",{id:"first-approach"},"First approach"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Append all the even numbers first then add all the odd numbers"),(0,a.kt)("li",{parentName:"ul"},"Take O(n) space complexity and use two loops")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution(object):\n    def sortArrayByParity(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: List[int]\n        """\n        res = []\n        for n in nums:\n            if n % 2 == 0:\n                res.append(n)\n        for n in nums:\n            if n % 2 != 0:\n                res.append(n)\n        return res\n')),(0,a.kt)("h4",{id:"second-approach"},"Second approach:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"I can improve this by sorting the array in-place to improve space complexity"),(0,a.kt)("li",{parentName:"ul"},"This problem reminds me of Sort Colors problem "),(0,a.kt)("li",{parentName:"ul"},"Using two pointers and logical if-else statements")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution(object):\n    def sortArrayByParity(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: List[int]\n        """\n        if not nums:\n            return []\n        start = 0\n        end = len(nums) - 1 \n        while start < end:\n            if nums[start] % 2 == 0:\n                start += 1\n            elif nums[end] % 2 != 0:\n                end -= 1\n            else:\n                nums[start], nums[end] = nums[end], nums[start]\n                start += 1\n                end -= 1\n        return nums\n \n')))}u.isMDXComponent=!0}}]);