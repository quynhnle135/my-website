"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8597],{2970:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>u,toc:()=>l});var r=i(5893),a=i(1151);const t={title:"Sep 18, 2023"},s="Coding Journal: Sep 18, 203",u={id:"learning-journal/September/20230918",title:"Sep 18, 2023",description:"Practice Coding Interview on Pramp",source:"@site/docs/learning-journal/September/20230918.md",sourceDirName:"learning-journal/September",slug:"/learning-journal/September/20230918",permalink:"/my-website/docs/learning-journal/September/20230918",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 18, 2023"},sidebar:"tutorialSidebar",previous:{title:"Sep 17, 2023",permalink:"/my-website/docs/learning-journal/September/20230917"},next:{title:"Sep 19, 2023",permalink:"/my-website/docs/learning-journal/September/20230919"}},d={},l=[{value:"Practice Coding Interview on Pramp",id:"practice-coding-interview-on-pramp",level:2},{value:"Array Quadruplet",id:"array-quadruplet",level:5},{value:"Number of Islands",id:"number-of-islands",level:5},{value:"Leetcode grinding",id:"leetcode-grinding",level:2},{value:"Maximum in Sliding Window",id:"maximum-in-sliding-window",level:5},{value:"Repeated DNA sequence",id:"repeated-dna-sequence",level:5},{value:"Find duplicated numnber",id:"find-duplicated-numnber",level:5},{value:"Note:",id:"note",level:2}];function o(n){const e={code:"code",h1:"h1",h2:"h2",h5:"h5",li:"li",pre:"pre",ul:"ul",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"coding-journal-sep-18-203",children:"Coding Journal: Sep 18, 203"}),"\n",(0,r.jsx)(e.h2,{id:"practice-coding-interview-on-pramp",children:"Practice Coding Interview on Pramp"}),"\n",(0,r.jsx)(e.h5,{id:"array-quadruplet",children:"Array Quadruplet"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def find_array_quadruplet(nums, target):\n    if len(nums) < 4:\n        return []\n    nums.sort()\n    for i in range(len(nums) - 3):\n        for j in range(i + 1, len(nums) - 2):\n            low = j + 1\n            high = len(nums) - 1\n            s = target - nums[i] - nums[j]\n            while low < high:\n                quadruplet = [nums[i], nums[j], nums[low], nums[high]]\n                cur_sum = nums[high] + nums[low]\n                if cur_sum == s:\n                    return quadruplet\n                elif cur_sum > s:\n                    high -= 1\n                else:\n                    low += 1\n    return []\n\n\ndef main():\n    print(find_array_quadruplet([1, 4, 6, 2, 3, 5], 15))\n    print(find_array_quadruplet([10, 40, 30, 20, 90, 100], 100))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(e.h5,{id:"number-of-islands",children:"Number of Islands"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def find_num_of_islands(matrix):\n    count = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == "1":\n                traversal(matrix, i, j)\n                count += 1\n    return count\n\n\ndef traversal(matrix, row, col):\n    if col < 0 or row < 0 or row >= len(matrix) or col >= len(matrix[0]) or matrix[row][col] != "1":\n        return\n    matrix[row][col] = "0"\n    traversal(matrix, row + 1, col)\n    traversal(matrix, row - 1, col)\n    traversal(matrix, row, col + 1)\n    traversal(matrix, row, col - 1)\n\n\ndef main():\n    print(find_num_of_islands([\n                                  ["1","1","1","1","0"],\n                                  ["1","1","0","1","0"],\n                                  ["1","1","0","0","0"],\n                                  ["0","0","0","0","0"]\n                              ]))\n\n    print(find_num_of_islands([\n                                  ["1","1","0","0","0"],\n                                  ["1","1","0","0","0"],\n                                  ["0","0","1","0","0"],\n                                  ["0","0","0","1","1"]\n                              ]))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(e.h2,{id:"leetcode-grinding",children:"Leetcode grinding"}),"\n",(0,r.jsx)(e.h5,{id:"maximum-in-sliding-window",children:"Maximum in Sliding Window"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from collections import deque\n\n\ndef find_max_in_sliding_window_brute_force(nums, w):\n    if len(nums) < w:\n        return []\n\n    result = []\n    cur_max = float("-inf")\n    for i in range(len(nums) - w + 1):\n        cur_window = nums[i: i + w]\n        for num in cur_window:\n            if num > cur_max:\n                cur_max = num\n        result.append(cur_max)\n        cur_max = float("-inf")\n    return result\n\n\ndef find_max_sliding_window(nums, w):\n    if len(nums) < w:\n        return []\n\n    result = []\n    for start in range(len(nums) - w + 1):\n        sub_list = nums[start: start + w]\n        max_value = max(sub_list)\n        result.append(max_value)\n    return result\n\n\n# Using deque\ndef find_max_in_sliding_window(nums, w):\n    res = []\n    queue = deque()\n\n    for i, num in enumerate(nums):\n        while queue and queue[0] < i - w + 1:\n            queue.popleft()\n\n        while queue and nums[queue[-1]] < num:\n            queue.pop()\n\n        queue.append(i)\n\n        if i >= w - 1:\n            res.append(nums[queue[0]])\n\n    return res\n\n\ndef main():\n    print(find_max_in_sliding_window_brute_force(nums=[-4, 2, -5, 3, 6], w=3))  # [2, 3, 6]\n    print(find_max_sliding_window(nums=[-4, 2, -5, 3, 6], w=3))  # [2, 3, 6]\n\n    print(find_max_in_sliding_window_brute_force(nums=[-4, 2, -5, 3, 6], w=2))  # [2, 2, 3, 6]\n    print(find_max_sliding_window(nums=[-4, 2, -5, 3, 6], w=2))\n\n    print(find_max_in_sliding_window_brute_force(nums=[-4, 2, -5, 3, 6], w=1))  # [-4, 2, -5, 3, 6]\n    print(find_max_sliding_window(nums=[-4, 2, -5, 3, 6], w=1))  # [-4, 2, -5, 3, 6]\n\n    print(find_max_in_sliding_window_brute_force(nums=[1, 2, 3, 4, 5], w=3))  # [3, 4, 5]\n    print(find_max_sliding_window(nums=[1, 2, 3, 4, 5], w=3))  # [3, 4, 5]\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h5,{id:"repeated-dna-sequence",children:"Repeated DNA sequence"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def find_repeated_dna_sequences(s):\n    if len(s) < 10:\n        return []\n    seen = set()\n    repeated = set()\n    for i in range(len(s) - 9):\n        sequence = s[i: i + 10]\n        if sequence in seen:\n            repeated.add(sequence)\n        else:\n            seen.add(sequence)\n    return list[repeated]\n\n\ndef main():\n    print(find_repeated_dna_sequences("AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"))\n    print(find_repeated_dna_sequences("AAAAAAAAAAAA"))\n\n\nif __name__ == "__main__":\n    main()\n\n\n'})}),"\n",(0,r.jsx)(e.h5,{id:"find-duplicated-numnber",children:"Find duplicated numnber"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def find_duplicate_number(nums):\n    fast = slow = nums[0]\n\n    while True:\n        fast = nums[nums[fast]]\n        slow = nums[slow]\n        if fast == slow:\n            break\n    slow = nums[0]\n    while fast != slow:\n        slow = nums[slow]\n        fast = nums[fast]\n    return fast\n\n\ndef main():\n    print(find_duplicate_number([2, 3, 1, 2]))\n    print(find_duplicate_number([3, 2, 1, 1]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"note",children:"Note:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Should time when interviewing other people and vice versa"}),"\n",(0,r.jsx)(e.li,{children:"Should work more on graph, dfs, and bfs"}),"\n",(0,r.jsx)(e.li,{children:"Should work on recursion and pay attention to base case"}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>u,a:()=>s});var r=i(7294);const a={},t=r.createContext(a);function s(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);