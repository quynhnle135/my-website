"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3441],{3932:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>h});var i=r(5893),t=r(1151);const a={title:"Sep 27, 2023"},s="Coding Journal: Sep 27, 2023",d={id:"learning-journal/September/20230927",title:"Sep 27, 2023",description:"Graph review",source:"@site/docs/learning-journal/September/20230927.md",sourceDirName:"learning-journal/September",slug:"/learning-journal/September/20230927",permalink:"/my-website/docs/learning-journal/September/20230927",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 27, 2023"},sidebar:"tutorialSidebar",previous:{title:"Sep 26, 2023",permalink:"/my-website/docs/learning-journal/September/20230926"},next:{title:"Sep 28, 2023",permalink:"/my-website/docs/learning-journal/September/20230928"}},o={},h=[{value:"Graph review",id:"graph-review",level:2},{value:"Breadth First Search",id:"breadth-first-search",level:3},{value:"Find level of each node in graph",id:"find-level-of-each-node-in-graph",level:3},{value:"Find existing path",id:"find-existing-path",level:3},{value:"Depth first search",id:"depth-first-search",level:3},{value:"DFS traversal",id:"dfs-traversal",level:4},{value:"Notes:",id:"notes",level:5}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"coding-journal-sep-27-2023",children:"Coding Journal: Sep 27, 2023"}),"\n",(0,i.jsx)(n.h2,{id:"graph-review",children:"Graph review"}),"\n",(0,i.jsx)(n.h3,{id:"breadth-first-search",children:"Breadth First Search"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Visit the current node and its neighbors first by using queue to keep track"}),"\n",(0,i.jsx)(n.li,{children:"Using set for visited nodes so it doesn't fall into a loop"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def breadth_first_search(graph, start):\n    queue = [start]\n    visited = set()\n    traversal = []\n\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return traversal\n\n\ndef bfs(graph, start):\n    return bfs_helper(graph=graph, queue=[start], visited=set())\n\n\ndef bfs_helper(graph, queue, visited):\n    if not queue:\n        return []\n    node = queue.pop(0)\n    if node in visited:\n        return bfs_helper(graph, queue, visited)\n\n    visited.add(node)\n    for neighbor in graph[node]:\n        queue.append(neighbor)\n    return [node] + bfs_helper(graph, queue, visited)\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['D', 'E'],\n        'C': ['F'],\n        'D': [],\n        'E': ['F'],\n        'F': []\n    }\n    print(breadth_first_search(graph, 'A'))\n    print(bfs(graph, 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"find-level-of-each-node-in-graph",children:"Find level of each node in graph"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Since this exercise requires to go by level to check and count, BFS should be applied"}),"\n",(0,i.jsx)(n.li,{children:"Instead of storing the node, store the tuple of node and level"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def find_level_of_each_node(graph, start):\n    visited = set()\n    queue = [(start, 0)]\n    node_levels = {}\n\n    while queue:\n        node, level = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            node_levels[node] = level\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append((neighbor, level + 1))\n    return node_levels\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    print(find_level_of_each_node(graph, 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"find-existing-path",children:"Find existing path"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When traversing thru every node in graph, we can check if it contains end node. If contained, return True"}),"\n",(0,i.jsx)(n.li,{children:"If we're done traversing every node in graph but end node cannot be found, return False"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def check_existing_path(graph, start, end):\n    if start not in graph or end not in graph:\n        return False\n    visited = set()\n    queue = [start]\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            if node == end:\n                return True\n            visited.add(node)\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return False\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    print(check_existing_path(graph, 'A', 'E'))\n    print(check_existing_path(graph, 'A', 'C'))\n    print(check_existing_path(graph, 'C', 'F'))\n    print(check_existing_path(graph, 'A', 'W'))\n    print(check_existing_path(graph, 'W', 'A'))\n    print(check_existing_path(graph, 'E', 'A'))\n\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"depth-first-search",children:"Depth first search"}),"\n",(0,i.jsx)(n.h4,{id:"dfs-traversal",children:"DFS traversal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def dfs(graph, start):\n    return dfs_helper(graph, [start], set(), [])\n\n\ndef dfs_helper(graph, stack, visited, traversal):\n    if not stack:\n        return []\n\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                stack.append(neighbor)\n                dfs_helper(graph, stack, visited, traversal)\n    return traversal\n\n\ndef dfs_iterative(graph, start):\n    visited = set()\n    stack = [start]\n    traversal = []\n\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            traversal.append(node)\n\n        for neighbor in reversed(graph[node]):\n            if neighbor not in visited:\n                stack.append(neighbor)\n    return traversal\n\n\ndef main():\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n    another_graph = {\n        0: [1, 3],\n        1: [0, 2],\n        2: [1, 3],\n        3: [0, 2]\n    }\n\n    print(dfs_iterative(graph, 'A'))\n    print(dfs_iterative(another_graph, 0))\n    print(dfs(graph, 'A'))\n    print(dfs(another_graph, 0))\n\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,i.jsx)(n.h5,{id:"notes",children:"Notes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Quite opposite to BFS, DFS use stack since it's going downn/deeper so it doesn't need to store all of the current node's neighbor right ahead"}),"\n",(0,i.jsx)(n.li,{children:"Reversed in DFS is not necessary but if you want to return an ordered/consistent traversal of nodes, reversed help traverse the node from left to right"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>s});var i=r(7294);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);