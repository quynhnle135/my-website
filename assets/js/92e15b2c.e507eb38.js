"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9139],{9771:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>_,frontMatter:()=>a,metadata:()=>o,toc:()=>m});var i=r(5893),t=r(1151);const a={title:"Jan 25, 2024"},s="Coding Journal: Jan 25, 2024",o={id:"learning-journal/2024/January/20240125",title:"Jan 25, 2024",description:"- Continued with job search (18 applications)",source:"@site/docs/learning-journal/2024/January/20240125.md",sourceDirName:"learning-journal/2024/January",slug:"/learning-journal/2024/January/20240125",permalink:"/docs/learning-journal/2024/January/20240125",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Jan 25, 2024"},sidebar:"tutorialSidebar",previous:{title:"Jan 24, 2024",permalink:"/docs/learning-journal/2024/January/20240124"},next:{title:"Jan 26, 2024",permalink:"/docs/learning-journal/2024/January/20240126"}},d={},m=[];function l(n){const e={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"coding-journal-jan-25-2024",children:"Coding Journal: Jan 25, 2024"}),"\n",(0,i.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Continued with job search (18 applications)"}),"\n",(0,i.jsxs)(e.li,{children:["Continued solving Leetcode to prepare for technical interviews:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Trapping Rain Water"}),"\n",(0,i.jsx)(e.li,{children:"Minimum Size Subarray Sum"}),"\n",(0,i.jsx)(e.li,{children:"Fraction to Recurring Decimal"}),"\n",(0,i.jsx)(e.li,{children:"Median of Two Sorted Arrays"}),"\n",(0,i.jsx)(e.li,{children:"Pairs of Song with Total Durations Divisible by 60"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"2-question-i-had",children:"2. Question I Had"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"I don't have any question for today."}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"I don't find anything challenging for today."}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,i.jsx)(e.p,{children:"Trapping Rain Water"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef trap_1(height: List[int]) -> int:\n    res = 0\n    for i in range(len(height)):\n        leftMax = max(height[:i + 1])\n        rightMax = max(height[i:])\n        cur_height = height[i]\n        res += min(leftMax, rightMax) - cur_height\n    return res\n\n\n# Apply Binary Search\ndef trap_2(height: List[int]) -> int:\n    res = 0\n    left = 0\n    left_max = height[left]\n    right = len(height) - 1\n    right_max = height[right]\n\n    while left < right:\n        if left_max < right_max:\n            left += 1\n            left_max = max(left_max, height[left])\n            res += left_max - height[left]\n        else:\n            right -= 1\n            right_max = max(right_max, height[right])\n            res += right_max - height[right]\n    return res\n\n\ndef main():\n    print(trap_1(height=[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]))  # 6\n    print(trap_2(height=[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]))  # 6\n\n    print(trap_1(height=[4, 2, 0, 3, 2, 5]))  # 9\n    print(trap_2(height=[4, 2, 0, 3, 2, 5]))  # 9\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.p,{children:"Minimum Size Subarray Sum"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef find_min_sub_array_sum(target: int, nums: List[int]) -> int:\n    start = 0\n    cur_sum = 0\n    min_len = len(nums) + 1\n    for end in range(len(nums)):\n        cur_sum += nums[end]\n        while cur_sum >= target:\n            if end - start + 1 < min_len:\n                min_len = end - start + 1\n\n            cur_sum -= nums[start]\n            start += 1\n    return min_len if min_len != len(nums) + 1 else 0\n\n\ndef main():\n    print(find_min_sub_array_sum(target=7, nums=[2, 3, 1, 2, 4, 3]))\n    print(find_min_sub_array_sum(target=4, nums=[1, 4, 4]))\n    print(find_min_sub_array_sum(target=11, nums=[1, 1, 1, 1, 1, 1, 1]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.p,{children:"Fraction to Recurring Decimal"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def fraction_to_recurring_decimal(numerator: int, denominator: int) -> str:\n    if numerator == 0 or denominator == 0:\n        return "0"\n    res = []\n\n    if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n        res.append("-")\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n\n    integer_part = numerator // denominator\n    res.append(str(integer_part))\n\n    remainder = numerator % denominator\n    if remainder == 0:\n        return "".join(res)\n\n    res.append(".")\n    remainder_dict = {}\n    while remainder != 0:\n        if remainder in remainder_dict:\n            res.insert(remainder_dict[remainder], "(")\n            res.append(")")\n            break\n        remainder_dict[remainder] = len(res)\n        remainder *= 10\n        res.append(str(remainder // denominator))\n        remainder %= denominator\n\n    return "".join(res)\n\n\ndef main():\n    print(fraction_to_recurring_decimal(1, 2))\n    print(fraction_to_recurring_decimal(2, 1))\n    print(fraction_to_recurring_decimal(4, 333))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.p,{children:"Median of Two Sorted Arrays"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef median_of_two_sorted_arrays_1(nums1: List[int], nums2: List[int]) -> float:\n    merged_array = sorted(nums1 + nums2)\n    mid = len(merged_array) // 2\n    if len(merged_array) % 2 == 0:\n        return (merged_array[mid] + merged_array[mid - 1]) / 2\n    else:\n        return merged_array[mid]\n\n\ndef median_of_two_sorted_arrays_2(nums1: List[int], nums2: List[int]) -> float:\n    A = nums1\n    B = nums2\n    median = 0\n    if len(nums2) < len(nums1):\n        A = nums2\n        B = nums1\n\n    total = len(A) + len(B)\n    half = total // 2\n    left = 0\n    right = len(A) - 1\n\n    while True:\n        i = (left + right) // 2\n        j = half - i - 2\n\n        Aleft = A[i] if i >= 0 else float("-inf")\n        Aright = A[i + 1] if i + 1 < len(A) else float("inf")\n        Bleft = B[j] if j >= 0 else float("-inf")\n        Bright = B[j + 1] if j + 1 < len(B) else float("inf")\n\n        if Aleft <= Bright and Bleft <= Aright:\n            if total % 2 != 0:\n                return min(Aright, Bright)\n            else:\n                return (max(Aleft, Bleft) + min(Aright, Bright)) / 2\n        elif Aleft > Bright:\n            right = i - 1\n        else:\n            left = i + 1\n\n\ndef main():\n    print(median_of_two_sorted_arrays_1([1, 3], [2]))\n    print(median_of_two_sorted_arrays_2([1, 3], [2]))\n    print(median_of_two_sorted_arrays_1([1, 2], [3, 4]))\n    print(median_of_two_sorted_arrays_2([1, 2], [3, 4]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(e.p,{children:"Pairs of Song with Total Durations Divisible by 60"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from typing import List\nfrom collections import defaultdict\n\n\n# Brute force approach\ndef pairs_of_songs_1(time: List[int]) -> int:\n    count = 0\n    for i in range(len(time)):\n        for j in range(i + 1, len(time)):\n            if (time[i] + time[j]) % 60 == 0:\n                count += 1\n    return count\n\n\n# Default dictionary\ndef pairs_of_songs_2(time: List[int]) -> int:\n    count = 0\n    remainders = defaultdict(int)\n    for i in range(len(time)):\n        remainder = time[i] % 60\n        if remainder == 0:\n            count += remainders[remainder]\n        else:\n            count += remainders[60 - remainder]\n        remainders[remainder] += 1\n    return count\n\n\n# Normal Dictionary\ndef pairs_of_songs_3(time: List[int]) -> int:\n    count = 0\n    remainder_dict = {}\n    for i in range(len(time)):\n        remainder = time[i] % 60\n        if remainder == 0:\n            if remainder in remainder_dict:\n                count += remainder_dict[remainder]\n                remainder_dict[remainder] += 1\n            else:\n                remainder_dict[remainder] = 1\n        else:\n            if (60 - remainder) in remainder_dict:\n                count += remainder_dict[60 - remainder]\n            if remainder in remainder_dict:\n                remainder_dict[remainder] += 1\n            else:\n                remainder_dict[remainder] = 1\n    return count\n\n\ndef main():\n    print(pairs_of_songs_1([30, 20, 150, 100, 40]))\n    print(pairs_of_songs_2([30, 20, 150, 100, 40]))\n    print(pairs_of_songs_3([30, 20, 150, 100, 40]))\n\n    print(pairs_of_songs_1([60, 60, 60]))\n    print(pairs_of_songs_2([60, 60, 60]))\n    print(pairs_of_songs_3([60, 60, 60]))\n\n\nif __name__ == "__main__":\n    main()\n\n'})})]})}function _(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>o,a:()=>s});var i=r(7294);const t={},a=i.createContext(t);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);