"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4363],{8228:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=r(5893),t=r(1151);const a={title:"Dec 02, 2023"},i="Coding Journal: Dec 02, 2023",o={id:"learning-journal/2023/December/20231202",title:"Dec 02, 2023",description:"- Updated and finished my Expense Manager project. You can check my Github repository for this project here",source:"@site/docs/learning-journal/2023/December/20231202.md",sourceDirName:"learning-journal/2023/December",slug:"/learning-journal/2023/December/20231202",permalink:"/docs/learning-journal/2023/December/20231202",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Dec 02, 2023"},sidebar:"tutorialSidebar",previous:{title:"Dec 01, 2023",permalink:"/docs/learning-journal/2023/December/20231201"},next:{title:"Dec 04, 2023",permalink:"/docs/learning-journal/2023/December/20231204"}},l={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"coding-journal-dec-02-2023",children:"Coding Journal: Dec 02, 2023"}),"\n",(0,s.jsx)(n.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Updated and finished my Expense Manager project. You can check my Github repository for this project ",(0,s.jsx)(n.a,{href:"https://github.com/quynhnle135/expense-manager",children:"here"})]}),"\n",(0,s.jsxs)(n.li,{children:["Read and summarized ",(0,s.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_4",children:"10 Career Mistakes to Avoid as A Develoepr"})]}),"\n",(0,s.jsxs)(n.li,{children:["Read and summarized ",(0,s.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_5",children:"ChatGPT to Help You Become a 10x Programmer"})]}),"\n",(0,s.jsxs)(n.li,{children:["Read and summarized ",(0,s.jsx)(n.a,{href:"https://quinnle.io/docs/tech-blogs/notes/post_6",children:"Unpopular Opinion: It's harder than ever to be a good software engineer."})]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"2-what-questions-i-have",children:"2. What Questions I Have"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Why do we need form_valid for create view?"}),"\n",(0,s.jsx)(n.li,{children:"Why do we need serializer for API? What's the difference between model and serializer?"}),"\n",(0,s.jsx)(n.li,{children:"Why do we need class Meta in serializer?"}),"\n",(0,s.jsx)(n.li,{children:"Why there are so many different ways to build an API in Django? What's the most efficient way? What's the easiest way?"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How to get data from API if I don't use the web browser because Django REST Framework provides a browsable API interface wher I can interact with the data directly but what I use have to build an API in other framework without the browsable version? Using curl is the most common way"}),"\n",(0,s.jsx)(n.li,{children:"When using curl, there are different ways to get the authorization to access to the API as well. My way is to provide username and password, I need to research about authorization token."}),"\n",(0,s.jsx)(n.li,{children:"Same problem with the app, I need to make sure that the API display data of logging-in user."}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,s.jsx)(n.p,{children:"Updated search functions for the app"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="expense_manager_app/views.py"',children:'from django.contrib.auth import login\nfrom django.views import generic\nfrom .models import Expense\nfrom django.urls import reverse_lazy\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.contrib.auth.views import FormView\nfrom . import forms\nfrom django.db.models import Q\nfrom django.db.models import Sum\n\n\nclass UserRegisterView(FormView):\n    form_class = forms.RegisterForm\n    template_name = "expense_manager_app/register.html"\n    redirect_authenticated_user = True\n    success_url = reverse_lazy("login")\n\n    def form_valid(self, form):\n        user = form.save()\n        if user is not None:\n            login(self.request, user)\n        return super().form_valid(form)\n\n\nclass ExpenseListView(LoginRequiredMixin, generic.ListView):\n    login_url = "/login/"\n    model = Expense\n    context_object_name = "expenses"\n    template_name = "expense_manager_app/expense_list.html"\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context["expenses"] = Expense.objects.filter(user=self.request.user)\n        context["count"] = Expense.objects.filter(user=self.request.user).count()\n        total_amount = Expense.objects.filter(user=self.request.user).aggregate(total=Sum(\'amount\'))[\'total\']\n        context["total"] = round(total_amount, 2) if total_amount is not None else 0\n        return context\n\n    def get_queryset(self):\n        return super().get_queryset().filter(user=self.request.user)\n\n\nclass ExpenseSearchView(LoginRequiredMixin, generic.ListView):\n    login_url = "/login/"\n    model = Expense\n    template_name = "expense_manager_app/expense_search_list.html"\n    context_object_name = "expenses"\n\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data(user=self.request.user)\n        queryset = self.get_queryset()\n        context["count"] = queryset.count()\n        return context\n\n    def get_queryset(self):\n        queryset = super().get_queryset().filter(user=self.request.user)\n\n        search_card = self.request.GET.get("search-card") or ""\n        search_category = self.request.GET.get("search-category") or ""\n        search_date = self.request.GET.get("search-date") or ""\n        search_amount = self.request.GET.get("search-amount") or ""\n        search_notes = self.request.GET.get("search-notes") or ""\n\n        query = Q()\n\n        if search_card:\n            query &= Q(card__icontains=search_card)\n        if search_category:\n            query &= Q(category__icontains=search_category)\n        if search_date:\n            query &= Q(expense_date__contains=search_date)\n        if search_amount:\n            query &= Q(amount__exact=search_amount)\n        if search_notes:\n            query &= Q(notes__icontains=search_notes)\n\n        return queryset.filter(query) if query else queryset\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"Made an simple API with CRUD operations, search and filter functions as well"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="expense_manager_api/serializers.py"',children:'from expense_manager_app.models import Expense\nfrom rest_framework import serializers\n\n\nclass ExpenseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Expense\n        fields = ["id", "card", "amount", "expense_date", "category", "notes"]\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="expense_manager_api/views.py"from rest_framework import generics',children:'from .serializers import ExpenseSerializer\nfrom expense_manager_app.models import Expense\nfrom rest_framework import permissions\nfrom django_filters import rest_framework as filters\nfrom rest_framework.filters import SearchFilter\n\n\nclass ExpenseFilter(filters.FilterSet):\n    class Meta:\n        model = Expense\n        fields = {\n            "card": ["icontains"],\n            "category": ["icontains"],\n            "notes": ["icontains"],\n            "expense_date": ["icontains"],\n            "amount": ["iexact"]\n        }\n\n\nclass ExpenseListCreateView(generics.ListCreateAPIView):\n    serializer_class = ExpenseSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = (filters.DjangoFilterBackend, SearchFilter)\n    filterset_class = ExpenseFilter\n    search_fields = ["card", "category", "notes", "expense_date", "amount"]\n\n    def get_queryset(self):\n        user = self.request.user\n        return Expense.objects.filter(user=user)\n\n    def perform_create(self, serializer):\n        serializer.save(user=self.request.user)\n\n\nclass ExpenseRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    # queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n    permissions_class = [permissions.IsAuthenticated]\n\n    def get_queryset(self):\n        user = self.request.user\n        return Expense.objects.filter(user=user)\n\n    def perform_update(self, serializer):\n        serializer.save(user=self.request.user)\n\n\nfrom rest_framework import generics\nfrom .serializers import ExpenseSerializer\nfrom expense_manager_app.models import Expense\nfrom rest_framework import permissions\nfrom django_filters import rest_framework as filters\nfrom rest_framework.filters import SearchFilter\n\n\nclass ExpenseFilter(filters.FilterSet):\n    class Meta:\n        model = Expense\n        fields = {\n            "card": ["icontains"],\n            "category": ["icontains"],\n            "notes": ["icontains"],\n            "expense_date": ["icontains"],\n            "amount": ["iexact"]\n        }\n\n\nclass ExpenseListCreateView(generics.ListCreateAPIView):\n    serializer_class = ExpenseSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = (filters.DjangoFilterBackend, SearchFilter)\n    filterset_class = ExpenseFilter\n    search_fields = ["card", "category", "notes", "expense_date", "amount"]\n\n    def get_queryset(self):\n        user = self.request.user\n        return Expense.objects.filter(user=user)\n\n    def perform_create(self, serializer):\n        serializer.save(user=self.request.user)\n\n\nclass ExpenseRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    # queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n    permissions_class = [permissions.IsAuthenticated]\n\n    def get_queryset(self):\n        user = self.request.user\n        return Expense.objects.filter(user=user)\n\n    def perform_update(self, serializer):\n        serializer.save(user=self.request.user)\n\n\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="expense_manager_api/urls.py"',children:'from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path("expenses/", views.ExpenseListCreateView.as_view()),\n    path("expenses/<int:pk>/", views.ExpenseRetrieveUpdateDestroyAPIView.as_view())\n]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>i});var s=r(7294);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);