"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2122],{8553:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=n(5893),a=n(1151);const o={title:"Aug 30",description:"Wed, Aug 30"},l=void 0,s={id:"daily-practice/2023/August/aug_30_23",title:"Aug 30",description:"Wed, Aug 30",source:"@site/docs/daily-practice/2023/August/aug_30_23.md",sourceDirName:"daily-practice/2023/August",slug:"/daily-practice/2023/August/aug_30_23",permalink:"/my-website/docs/daily-practice/2023/August/aug_30_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Aug 30",description:"Wed, Aug 30"},sidebar:"tutorialSidebar",previous:{title:"Aug 29",permalink:"/my-website/docs/daily-practice/2023/August/aug_29_23"},next:{title:"Nov 5",permalink:"/my-website/docs/daily-practice/2023/November/11_5_23"}},i={},d=[{value:"Valid Anagram",id:"valid-anagram",level:3},{value:"Binary Tree Traversal Review",id:"binary-tree-traversal-review",level:3},{value:"Find The Height of Binary Tree",id:"find-the-height-of-binary-tree",level:3},{value:"Level Order Traversal",id:"level-order-traversal",level:3},{value:"Reverse Level Order Traversal",id:"reverse-level-order-traversal",level:3},{value:"Smallest Substring Having Given Sum",id:"smallest-substring-having-given-sum",level:3},{value:"Maximum Subarray Sum Size K",id:"maximum-subarray-sum-size-k",level:3}];function _(e){const r={code:"code",h3:"h3",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h3,{id:"valid-anagram",children:"Valid Anagram"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'def check_valid_anagram(s, t):\n    char_dict = {}\n    for c in s:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n    for c in t:\n        if c not in char_dict:\n            return False\n        else:\n            if char_dict[c] == 0:\n                return False\n            else:\n                char_dict[c] -= 1\n\n    for key in char_dict:\n        if char_dict[key] != 0:\n            return False\n    return True\n\n\ndef main():\n    print(check_valid_anagram(s="anagram", t="nagaram"))  # True\n    print(check_valid_anagram(s="rat", t="car"))  # False\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"binary-tree-traversal-review",children:"Binary Tree Traversal Review"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class Node:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree:\n    def __init__(self, root=None):\n        self.root = root\n\n    def preorder_traversal(self):\n        return self.preorder_traversal_helper(root=self.root, traversal="")\n\n    def preorder_traversal_helper(self, root, traversal):\n        if root:\n            traversal += str(root.val) + " "\n            traversal = self.preorder_traversal_helper(root.left, traversal)\n            traversal = self.preorder_traversal_helper(root.right, traversal)\n        return traversal\n\n    def inorder_traversal(self):\n        return self.inorder_traversal_helper(root=self.root, traversal="")\n\n    def inorder_traversal_helper(self, root, traversal):\n        if root:\n            traversal = self.inorder_traversal_helper(root.left, traversal)\n            traversal += str(root.val) + " "\n            traversal = self.inorder_traversal_helper(root.right, traversal)\n        return traversal\n\n    def postorder_traversal(self):\n        return self.postorder_traversal_helper(root=self.root, traversal="")\n\n    def postorder_traversal_helper(self, root, traversal):\n        if root:\n            traversal = self.postorder_traversal_helper(root.left, traversal)\n            traversal = self.postorder_traversal_helper(root.right, traversal)\n            traversal += str(root.val) + " "\n        return traversal\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    tree = BinaryTree(root=root)\n    print(tree.preorder_traversal())\n    print(tree.inorder_traversal())\n    print(tree.postorder_traversal())\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"find-the-height-of-binary-tree",children:"Find The Height of Binary Tree"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'class Node:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree:\n    def __init__(self, root=None):\n        self.root = root\n\n    def calculate_height(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.calculate_height(root.left), self.calculate_height(root.right))\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.right.right.right = Node(8)\n    tree = BinaryTree(root=root)\n    print(tree.calculate_height(root=tree.root))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"level-order-traversal",children:"Level Order Traversal"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from collections import deque\n\n\nclass Node:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = root\n\n    def level_order_traversal(self, root):\n        if not root:\n            return []\n        result = []\n        q = deque()\n        q.append(root)\n        while q:\n            level_size = len(q)\n            current_level = []\n            for i in range(level_size):\n                current_node = q.popleft()\n                current_level.append(current_node.val)\n                if current_node.left:\n                    q.append(current_node.left)\n                if current_node.right:\n                    q.append(current_node.right)\n            result.append(current_level)\n        return result\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.right.right.right = Node(8)\n    tree = BinaryTree(root=root)\n    print(tree.level_order_traversal(root=tree.root))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"reverse-level-order-traversal",children:"Reverse Level Order Traversal"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from collections import deque\n\n\nclass Node:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = root\n\n    def reverse_order_traversal(self, root):\n        if not root:\n            return []\n        q = deque()\n        s = []\n        result = []\n        q.append(root)\n        while q:\n            current_level = []\n            level_size = len(q)\n            for i in range(level_size):\n                current_node = q.popleft()\n                current_level.append(current_node.val)\n                if current_node.left:\n                    q.append(current_node.left)\n                if current_node.right:\n                    q.append(current_node.right)\n            s.append(current_level)\n\n        while s:\n            result.append(s.pop())\n        return result\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.right.right.right = Node(8)\n    tree = BinaryTree(root=root)\n    print(tree.reverse_order_traversal(root=tree.root))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"smallest-substring-having-given-sum",children:"Smallest Substring Having Given Sum"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Given an array of positive integers nums and a positive integer S, find the length of the smallest contiguous\n# subarray whose sum is at least S. Return 0 if no such subarray exists.\n\ndef find_smallest_sub(nums, s):\n    min_len = float("inf")\n    cur_sum = start = 0\n    for end in range(len(nums)):\n        cur_sum += nums[end]\n        while cur_sum >= s and start <= end:\n            min_len = min(min_len, end - start + 1)\n            cur_sum -= nums[start]\n            start += 1\n\n    if min_len == float("inf"):\n        return 0\n    return min_len\n\n\ndef main():\n    print(find_smallest_sub(nums=[2, 1, 2, 4, 3], s=7))  # 2\n    print(find_smallest_sub(nums=[1, 4, 4], s=4))  # 1\n    print(find_smallest_sub(nums=[5, 1, 3, 5, 10, 7, 4, 9, 2, 8], s=15))  # 2\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"maximum-subarray-sum-size-k",children:"Maximum Subarray Sum Size K"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Problem Statement:\n# Given an array of integers nums and a positive integer K, find the maximum sum of any contiguous subarray of size K.\n\ndef find_max_sum(nums, k):\n    if not nums:\n        return None  # Handle empty array case\n    start = 0\n    max_sum = float("-inf")\n    cur_sum = 0\n    for end in range(len(nums)):\n        cur_sum += nums[end]\n        if end - start + 1 == k:\n            max_sum = max(max_sum, cur_sum)\n            cur_sum -= nums[start]\n            start += 1\n    return max_sum\n\n\ndef main():\n    print(find_max_sum(nums=[2, 1, 5, 1, 3, 2], k=3))  # 9\n    print(find_max_sum(nums=[2, 3, 4, 1, 5], k=2))  # 7\n    print(find_max_sum(nums=[1, 4, 2, 10, 23, 3, 1, 0, 20], k=4))  # 39\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(_,{...e})}):_(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>s,a:()=>l});var t=n(7294);const a={},o=t.createContext(a);function l(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);