"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1239:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const i={title:"Aug 15",description:"Tue, Aug 15"},a=void 0,s={unversionedId:"daily-practice/2023/August/aug_15_23",id:"daily-practice/2023/August/aug_15_23",title:"Aug 15",description:"Tue, Aug 15",source:"@site/docs/daily-practice/2023/August/aug_15_23.md",sourceDirName:"daily-practice/2023/August",slug:"/daily-practice/2023/August/aug_15_23",permalink:"/my-website/docs/daily-practice/2023/August/aug_15_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Aug 15",description:"Tue, Aug 15"},sidebar:"tutorialSidebar",previous:{title:"Aug 11",permalink:"/my-website/docs/daily-practice/2023/August/aug_11_23"},next:{title:"Aug 16",permalink:"/my-website/docs/daily-practice/2023/August/aug_16_23"}},l={},u=[{value:"Sort Colors",id:"sort-colors",level:3},{value:"3Sum",id:"3sum",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"sort-colors"},"Sort Colors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def sort_colors(colors):\n    red = white = 0\n    blue = len(colors) - 1\n    while white <= blue:\n        if colors[white] == 0:\n            if colors[red] != 0:\n                colors[white], colors[red] = colors[red], colors[white]\n            white += 1\n            red += 1\n        elif colors[white] == 1:\n            white += 1\n        else:\n            if colors[blue] != 2:\n                colors[blue], colors[white] = colors[white], colors[blue]\n            blue -= 1\n    return colors\n\n\ndef main():\n    colors1 = [2, 1, 1, 2, 0, 1, 2, 0]\n    print(sort_colors(colors1))\n    colors2 = [0, 2, 1, 2, 2, 1, 2, 0]\n    print(sort_colors(colors2))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h3",{id:"3sum"},"3Sum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def three_sum(nums):\n    nums.sort()\n    result = []\n    n = len(nums)\n\n    # Check for short arrays\n    if n < 3:\n        return []\n\n    for i in range(n - 2):\n        # Skip duplicate numbers\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n\n        # Two pointers approach for the rest of the numbers\n        start, end = i + 1, n - 1\n        while start < end:\n            total = nums[i] + nums[start] + nums[end]\n            if total == 0:\n                result.append([nums[i], nums[start], nums[end]])\n                start += 1\n                end -= 1\n                # Skip duplicates\n                while start < end and nums[start] == nums[start - 1]:\n                    start += 1\n                while start < end and nums[end] == nums[end + 1]:\n                    end -= 1\n            elif total < 0:\n                start += 1\n            else:\n                end -= 1\n\n    return result\n\n\ndef main():\n    print(three_sum([-1, 0, 1, 2, -1, -4]))\n\n\nif __name__ == "__main__":\n    main()\n')))}d.isMDXComponent=!0}}]);