"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2987],{9789:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=r(5893),i=r(1151);const s={title:"Array and String"},a=void 0,d={id:"daily-practice/leetcode75/array_string",title:"Array and String",description:"Merge String Alternately",source:"@site/docs/daily-practice/leetcode75/array_string.md",sourceDirName:"daily-practice/leetcode75",slug:"/daily-practice/leetcode75/array_string",permalink:"/docs/daily-practice/leetcode75/array_string",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Array and String"},sidebar:"tutorialSidebar",previous:{title:"Leetcode 75",permalink:"/docs/category/leetcode-75"},next:{title:"Binary Tree - BFS",permalink:"/docs/daily-practice/leetcode75/bfs"}},o={},l=[{value:"Merge String Alternately",id:"merge-string-alternately",level:3},{value:"Greatest Commmon Divisor of Strings",id:"greatest-commmon-divisor-of-strings",level:3},{value:"Kids With the Greatest Number of Candies",id:"kids-with-the-greatest-number-of-candies",level:3},{value:"Can Place Flowers",id:"can-place-flowers",level:3},{value:"Reverse Vowels in a String",id:"reverse-vowels-in-a-string",level:3},{value:"Reverse Words in a String",id:"reverse-words-in-a-string",level:3},{value:"Product of Array Except Self",id:"product-of-array-except-self",level:3}];function c(n){const e={code:"code",h3:"h3",pre:"pre",...(0,i.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h3,{id:"merge-string-alternately",children:"Merge String Alternately"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from itertools import zip_longest\n\n\ndef mergeAlternately(word1, word2):\n    result = ""\n    while word1 and word2:\n        result += word1[0] + word2[0]\n        word1 = word1[1:]\n        word2 = word2[1:]\n    while word1:\n        result += word1\n        word1 = ""\n    while word2:\n        result += word2\n        word2 = ""\n    return result\n\n\ndef mergeAlternately_ii(word1, word2):\n    result = []\n    i, j = 0, 0\n    while i < len(word1) and j < len(word2):\n        result.append(word1[i])\n        result.append(word2[j])\n        i += 1\n        j += 1\n    result.extend(word1[i:])\n    result.extend(word2[j:])\n    return "".join(result)\n\n\ndef mergeAlternately_iii(word1, word2):\n    tuples = zip_longest(word1, word2, fillvalue="")\n    res = ""\n    for t in tuples:\n        res += str(t[0]) + str(t[1])\n    return res\n\n\ndef mergeAlternately_iv(word1, word2):\n    ptr1 = 0\n    ptr2 = 0\n    new_string = ""\n    while ptr1 < len(word1) and ptr2 < len(word2):\n        new_string += word1[ptr1] + word2[ptr2]\n        ptr1 += 1\n        ptr2 += 1\n    while ptr1 < len(word1):\n        new_string += word1[ptr1]\n        ptr1 += 1\n    while ptr2 < len(word2):\n        new_string += word2[ptr2]\n        ptr2 += 1\n    return new_string\n\n\ndef main():\n    print(mergeAlternately("abc", "pqr"))\n    print(mergeAlternately_ii("abc", "pqr"))\n    print(mergeAlternately_iii("abc", "pqr"))\n    print(mergeAlternately_iv("abc", "pqr"))\n    print("--")\n    print(mergeAlternately("ab", "pqrs"))\n    print(mergeAlternately_ii("ab", "pqrs"))\n    print(mergeAlternately_iii("ab", "pqrs"))\n    print(mergeAlternately_iv("ab", "pqrs"))\n    print("--")\n    print(mergeAlternately("abcd", "pq"))\n    print(mergeAlternately_ii("abcd", "pq"))\n    print(mergeAlternately_iii("abcd", "pq"))\n    print(mergeAlternately_iv("abcd", "pq"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"greatest-commmon-divisor-of-strings",children:"Greatest Commmon Divisor of Strings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import math\ndef gcdOfStrings(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n\n    gcd_len = gcd(len1, len2)\n    print(gcd_len)\n    common_divisor = str1[:gcd_len]\n    if str1 == common_divisor * (len1 // gcd_len) and str2 == common_divisor * (len2 // gcd_len):\n        return common_divisor\n\n    return ""\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef main():\n    print(gcdOfStrings(str1="ABC", str2="ABCABC"))\n    print(gcdOfStrings(str1="ABABAB", str2="ABAB"))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,t.jsx)(e.h3,{id:"kids-with-the-greatest-number-of-candies",children:"Kids With the Greatest Number of Candies"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def kids_with_the_greatest_number_of_candies(candies, extra_candies):\n    max_candies = max(candies)\n    for i in range(len(candies)):\n        if candies[i] + extra_candies >= max_candies:\n            candies[i] = True\n        else:\n            candies[i] = False\n    return candies\n\n\ndef kids_with_the_greatest_number_of_candies_ii(candies, extra_candies):\n    max_candies = max(candies)\n    for i in range(len(candies)):\n        if max_candies - candies[i] <= extra_candies:\n            candies[i] = True\n        else:\n            candies[i] = False\n    return candies\n\n\ndef main():\n    print(kids_with_the_greatest_number_of_candies([2, 3, 5, 1, 3], 3))\n    print(kids_with_the_greatest_number_of_candies_ii([2, 3, 5, 1, 3], 3))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,t.jsx)(e.h3,{id:"can-place-flowers",children:"Can Place Flowers"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def canPlaceFlowers(flowerbed, n):\n    if n == 0:\n        return True\n    count = 0\n    for i in range(len(flowerbed)):\n        if flowerbed[i] == 0:\n            leftSpot = (i == 0) or (flowerbed[i - 1] == 0)\n            rightSpot = (i == len(flowerbed) - 1) or (flowerbed[i + 1] == 0)\n\n            if leftSpot and rightSpot:\n                count += 1\n                flowerbed[i] = 1\n                if count == n:\n                    return True\n    return False\n\n\ndef main():\n    print(canPlaceFlowers([1, 0, 0, 0, 1], 1))  # True\n    print(canPlaceFlowers([1, 0, 0, 0, 1], 2))  # False\n    print(canPlaceFlowers([1, 0, 0], 1))  # True\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,t.jsx)(e.h3,{id:"reverse-vowels-in-a-string",children:"Reverse Vowels in a String"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def reverse_vowels(s):\n    vowels = "aeiouAEIOU"\n    start = 0\n    end = len(s) - 1\n    s = list(s)\n    while start < end:\n        if s[start] in vowels and s[end] in vowels:\n            # Swap\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n        elif s[start] in vowels:\n            end -= 1\n        else:\n            start += 1\n    return "".join(s)\n\n\ndef main():\n    print(reverse_vowels("hello"))\n    print(reverseVowels("hello"))\n    print(reverse_vowels("leetcode"))\n    print(reverseVowels("leetcode"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"reverse-words-in-a-string",children:"Reverse Words in a String"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import re\n\n\ndef reverse_words(s):\n    s = re.sub(" +", " ", s.strip())\n    words = []\n    start = 0\n    res = ""\n    for end in range(len(s)):\n        if s[end] == " ":\n            word = s[start: end]\n            words.append(word)\n            start = end + 1\n\n    # Connect last word\n    words.append(s[start: len(s)])\n\n    # Reverse words\n    for i in range(len(words) - 1, -1, -1):\n        res += words[i] + " "\n\n    return res.strip()\n\n\ndef reverseWords(s):\n    stack = []\n    s = re.sub(" +", " ", s.strip())\n    word = ""\n    for i in range(len(s)):\n        if s[i] != " ":\n            word += s[i]\n        else:\n            stack.append(word)\n            word = ""\n    stack.append(word)\n    reversed_s = ""\n    while stack:\n        reversed_s += stack.pop() + " "\n    return reversed_s.strip()\n\n\ndef main():\n    print(reverse_words("the sky is blue"))  # blue is sky the\n    print(reverse_words("    harry    potter"))  # potter harry\n    print(reverseWords("the sky is blue"))\n    print(reverseWords("     harry    potter "))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"product-of-array-except-self",children:"Product of Array Except Self"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def findProduct_i(nums):\n    res = [0] * len(nums)\n    for i in range(len(nums)):\n        cur_product = 1\n        for j in range(len(nums)):\n            if i == j:\n                continue\n            else:\n                cur_product *= nums[j]\n        res[i] = cur_product\n    return res\n\n\ndef findProduct_ii(nums):\n    n = len(nums)\n    pre = [1] * n\n    post = [1] * n\n    res = [1] * n\n    pre_product = 1\n    post_product = 1\n    for i in range(n):\n        pre[i] = pre_product\n        pre_product *= nums[i]\n\n    for i in range(n - 1, -1, -1):\n        post[i] = post_product\n        post_product *= nums[i]\n\n    for i in range(n):\n        res[i] = pre[i] * post[i]\n    return res\n\n\ndef main():\n    nums1 = [1, 2, 3, 4]\n    nums2 = [-1, 1, 0, -3, 3]\n    print(findProduct_i(nums1))\n    print(findProduct_ii(nums1))\n    print(findProduct_i(nums2))\n    print(findProduct_ii(nums2))\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>d,a:()=>a});var t=r(7294);const i={},s=t.createContext(i);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);