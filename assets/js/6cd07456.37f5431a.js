"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[987],{9789:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var t=r(5893),i=r(1151);const s={title:"Array and String",position:1},a=void 0,l={id:"daily-practice/leetcode75/array_string",title:"Array and String",description:"Merge String Alternately",source:"@site/docs/daily-practice/leetcode75/array_string.md",sourceDirName:"daily-practice/leetcode75",slug:"/daily-practice/leetcode75/array_string",permalink:"/my-website/docs/daily-practice/leetcode75/array_string",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Array and String",position:1},sidebar:"tutorialSidebar",previous:{title:"Leetcode 75",permalink:"/my-website/docs/category/leetcode-75-1"},next:{title:"Binary Tree - BFS",permalink:"/my-website/docs/daily-practice/leetcode75/bfs"}},d={},o=[{value:"Merge String Alternately",id:"merge-string-alternately",level:3},{value:"Greatest Commmon Divisor of Strings",id:"greatest-commmon-divisor-of-strings",level:3},{value:"Kids With the Greatest Number of Candies",id:"kids-with-the-greatest-number-of-candies",level:3},{value:"Can Place Flowers",id:"can-place-flowers",level:3},{value:"Reverse Vowels in a String",id:"reverse-vowels-in-a-string",level:3},{value:"Reverse Words in a String",id:"reverse-words-in-a-string",level:3},{value:"Product of Array Except Self",id:"product-of-array-except-self",level:3}];function c(e){const n={code:"code",h3:"h3",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"merge-string-alternately",children:"Merge String Alternately"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from itertools import zip_longest\n\n\ndef mergeAlternately(word1, word2):\n    result = ""\n    while word1 and word2:\n        result += word1[0] + word2[0]\n        word1 = word1[1:]\n        word2 = word2[1:]\n    while word1:\n        result += word1\n        word1 = ""\n    while word2:\n        result += word2\n        word2 = ""\n    return result\n\n\ndef mergeAlternately_ii(word1, word2):\n    result = []\n    i, j = 0, 0\n    while i < len(word1) and j < len(word2):\n        result.append(word1[i])\n        result.append(word2[j])\n        i += 1\n        j += 1\n    result.extend(word1[i:])\n    result.extend(word2[j:])\n    return "".join(result)\n\n\ndef mergeAlternately_iii(word1, word2):\n    tuples = zip_longest(word1, word2, fillvalue="")\n    res = ""\n    for t in tuples:\n        res += str(t[0]) + str(t[1])\n    return res\n\n\ndef mergeAlternately_iv(word1, word2):\n    ptr1 = 0\n    ptr2 = 0\n    new_string = ""\n    while ptr1 < len(word1) and ptr2 < len(word2):\n        new_string += word1[ptr1] + word2[ptr2]\n        ptr1 += 1\n        ptr2 += 1\n    while ptr1 < len(word1):\n        new_string += word1[ptr1]\n        ptr1 += 1\n    while ptr2 < len(word2):\n        new_string += word2[ptr2]\n        ptr2 += 1\n    return new_string\n\n\ndef main():\n    print(mergeAlternately("abc", "pqr"))\n    print(mergeAlternately_ii("abc", "pqr"))\n    print(mergeAlternately_iii("abc", "pqr"))\n    print(mergeAlternately_iv("abc", "pqr"))\n    print("--")\n    print(mergeAlternately("ab", "pqrs"))\n    print(mergeAlternately_ii("ab", "pqrs"))\n    print(mergeAlternately_iii("ab", "pqrs"))\n    print(mergeAlternately_iv("ab", "pqrs"))\n    print("--")\n    print(mergeAlternately("abcd", "pq"))\n    print(mergeAlternately_ii("abcd", "pq"))\n    print(mergeAlternately_iii("abcd", "pq"))\n    print(mergeAlternately_iv("abcd", "pq"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"greatest-commmon-divisor-of-strings",children:"Greatest Commmon Divisor of Strings"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})}),"\n",(0,t.jsx)(n.h3,{id:"kids-with-the-greatest-number-of-candies",children:"Kids With the Greatest Number of Candies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def kids_with_the_greatest_number_of_candies(candies, extra_candies):\n    max_candies = max(candies)\n    for i in range(len(candies)):\n        if candies[i] + extra_candies >= max_candies:\n            candies[i] = True\n        else:\n            candies[i] = False\n    return candies\n\n\ndef kids_with_the_greatest_number_of_candies_ii(candies, extra_candies):\n    max_candies = max(candies)\n    for i in range(len(candies)):\n        if max_candies - candies[i] <= extra_candies:\n            candies[i] = True\n        else:\n            candies[i] = False\n    return candies\n\n\ndef main():\n    print(kids_with_the_greatest_number_of_candies([2, 3, 5, 1, 3], 3))\n    print(kids_with_the_greatest_number_of_candies_ii([2, 3, 5, 1, 3], 3))\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"can-place-flowers",children:"Can Place Flowers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})}),"\n",(0,t.jsx)(n.h3,{id:"reverse-vowels-in-a-string",children:"Reverse Vowels in a String"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def reverse_vowels(s):\n    vowels = "aeiouAEIOU"\n    start = 0\n    end = len(s) - 1\n    s = list(s)\n    while start < end:\n        if s[start] in vowels and s[end] in vowels:\n            # Swap\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n        elif s[start] in vowels:\n            end -= 1\n        else:\n            start += 1\n    return "".join(s)\n\n\ndef main():\n    print(reverse_vowels("hello"))\n    print(reverseVowels("hello"))\n    print(reverse_vowels("leetcode"))\n    print(reverseVowels("leetcode"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"reverse-words-in-a-string",children:"Reverse Words in a String"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})}),"\n",(0,t.jsx)(n.h3,{id:"product-of-array-except-self",children:"Product of Array Except Self"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var t=r(7294);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);