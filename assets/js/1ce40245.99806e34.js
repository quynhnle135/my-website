"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5487],{2018:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(5893),i=t(1151);const s={title:"Sep 26"},o=void 0,l={id:"daily-practice/2023/September/sep_26_23",title:"Sep 26",description:"316. Remove Duplicate Letters",source:"@site/docs/daily-practice/2023/September/sep_26_23.md",sourceDirName:"daily-practice/2023/September",slug:"/daily-practice/2023/September/sep_26_23",permalink:"/my-website/docs/daily-practice/2023/September/sep_26_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 26"},sidebar:"tutorialSidebar",previous:{title:"Sep 04",permalink:"/my-website/docs/daily-practice/2023/September/sep_04_23"},next:{title:"Sep 28",permalink:"/my-website/docs/daily-practice/2023/September/sep_28_23"}},a={},d=[{value:"316. Remove Duplicate Letters",id:"316-remove-duplicate-letters",level:3},{value:"Notes:",id:"notes",level:4},{value:"151. Reverese words in a string",id:"151-reverese-words-in-a-string",level:3},{value:"Notes:",id:"notes-1",level:4},{value:"114. Flatten Binary Tree to Linked List",id:"114-flatten-binary-tree-to-linked-list",level:3},{value:"Notes:",id:"notes-2",level:4},{value:"222. Count complete tree nodes",id:"222-count-complete-tree-nodes",level:3},{value:"Notes:",id:"notes-3",level:4},{value:"111. Minimum depth of binary tree",id:"111-minimum-depth-of-binary-tree",level:3},{value:"Notes:",id:"notes-4",level:4},{value:"404. Sum of left leaves",id:"404-sum-of-left-leaves",level:3},{value:"Notes:",id:"notes-5",level:4}];function c(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"316-remove-duplicate-letters",children:"316. Remove Duplicate Letters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def removeDuplicateLetters(s):\n    result = ""\n    last_occ = {}\n    stack = []\n    visited = set()\n    for i in range(len(s)):\n        last_occ[s[i]] = i\n\n    for i in range(len(s)):\n        if s[i] not in visited:\n            while stack and stack[-1] > s[i] and last_occ[stack[-1]] > i:\n                visited.remove(stack.pop())\n            visited.add(s[i])\n            stack.append(s[i])\n    for letter in stack:\n        result += letter\n    return result\n\n\ndef main():\n    print(removeDuplicateLetters("bcabc"))\n    print(removeDuplicateLetters("cbacdcbc"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"notes",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For this problem, the main thing that I need to pay attention to is the lexicographical order"}),"\n",(0,r.jsx)(n.li,{children:'An example of lexicographical order is that "abcd" is smaller than "abef" (based on the length and alphebetical order)'}),"\n",(0,r.jsx)(n.li,{children:"However, the problem requires to remove the duplicate letter in order, not remove the duplicate letters and rearrange to the smallest possible lexicographical order. That's why I need to use stack and queue to keep track and compare"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"151-reverese-words-in-a-string",children:"151. Reverese words in a string"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import re\n\n\ndef reverse_word(word, start, end):\n    while start < end:\n        temp = word[end]\n        word[end] = word[start]\n        word[start] = temp\n        start += 1\n        end -= 1\n\n\ndef reverse_words_in_a_string(sentence):\n    sentence = re.sub(" +", " ", sentence.strip())\n    sentence = list(sentence)\n    reverse_word(sentence, 0, len(sentence) - 1)\n    start = end = 0\n    while start < len(sentence):\n        while end < len(sentence) and sentence[end] != " ":\n            end += 1\n        reverse_word(sentence, start, end - 1)\n        start = end = end + 1\n    return "".join(sentence)\n\n\ndef reverse_words_in_a_string_ii(s):\n    s = re.sub(" +", " ", s.strip())\n    start = end = 0\n    words = []\n    word = ""\n    while start < len(s):\n        while end < len(s) and s[end] != " ":\n            word += s[end]\n            end += 1\n        words.append(word)\n        word = ""\n        start = end = end + 1\n    return " ".join(words[::-1])\n\n\ndef main():\n    s = "the sky is blue"\n    print(reverse_words_in_a_string(s), len(reverse_words_in_a_string(s)))\n    print(reverse_words_in_a_string_ii(s), len(reverse_words_in_a_string_ii(s)))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"notes-1",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Go over the second approach which is a little bit similar to the first one but I don't need to implement another helper function"}),"\n",(0,r.jsx)(n.li,{children:'re.sub(" +", " ", s.strip()) is a key point here to make the solution shorter and more effective.'}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"114-flatten-binary-tree-to-linked-list",children:"114. Flatten Binary Tree to Linked List"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef flatten_binary_tree(root):\n    current = root\n    while current:\n        if current.left:\n            last = current.left\n            while last.right:\n                last = last.right\n            last.right = current.right\n            current.right = current.left\n            current.left = None\n        current = current.right\n    \n\n"})}),"\n",(0,r.jsx)(n.h4,{id:"notes-2",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"I still comtemplate this problem since it's a little bit confusing."}),"\n",(0,r.jsx)(n.li,{children:"It requires to do everythin in-place so there's no need to return anything. How can I print out the result? Should I print it as a linked list or a Tree?"}),"\n",(0,r.jsx)(n.li,{children:"Basuically, does this exercise requrie to move every node in the left branch to right branch but is there any order that it's looking for?"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"222-count-complete-tree-nodes",children:"222. Count complete tree nodes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef count_complete_nodes(root):\n    return inorder_traversal_count(root, 0)\n\n\ndef inorder_traversal_count(current, count):\n    if current:\n        count += 1\n        count = inorder_traversal_count(current.left, count)\n        count = inorder_traversal_count(current.right, count)\n    return count\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.left.left = TreeNode(20)\n    root.left.left.left = TreeNode(15)\n    root.left.left.left.left = TreeNode(7)\n    print(count_complete_nodes(root))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"notes-3",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"I applied Inorder Traversal since it's count the current node first then move on to its left and right children"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"111-minimum-depth-of-binary-tree",children:"111. Minimum depth of binary tree"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef minDepth(root):\n    if not root:\n        return 0\n    if not root.left:\n        return 1 + minDepth(root.right)\n    if not root.right:\n        return 1 + minDepth(root.left)\n    return 1 + min(minDepth(root.left), minDepth(root.right))\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.left.left = TreeNode(20)\n    root.left.left.left = TreeNode(15)\n    root.left.left.left.left = TreeNode(7)\n    print(minDepth(root))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"notes-4",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When I first tried to solve this problem, I forgot to consider if the left branch or the right branch is None. Therefore, if it falls to that case, my function always return 1 because of the root is counted as 1 and it's the minimum"}),"\n",(0,r.jsx)(n.li,{children:"I tried to improve and set the edge case for empty left branch or right branch"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"404-sum-of-left-leaves",children:"404. Sum of left leaves"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef sumOfLeftLeaves(root):\n    return helper(root, False)\n\n\ndef helper(current, isLeft):\n    if not current:\n        return 0\n    if not current.left and not current.right and isLeft:\n        return current.val\n    return helper(current.left, True) + helper(current.right, False)\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.right.left = TreeNode(15)\n    root.right.right = TreeNode(7)\n    print(sumOfLeftLeaves(root))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"notes-5",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The main key for the solution is to check if it's the left node or not"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var r=t(7294);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);