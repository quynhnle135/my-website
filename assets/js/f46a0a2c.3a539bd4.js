"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3772],{8510:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>u,toc:()=>o});var r=t(5893),i=t(1151);const s={title:"Aug 20",description:"Sun, Aug 20"},a=void 0,u={id:"daily-practice/2023/August/aug_20_23",title:"Aug 20",description:"Sun, Aug 20",source:"@site/docs/daily-practice/2023/August/aug_20_23.md",sourceDirName:"daily-practice/2023/August",slug:"/daily-practice/2023/August/aug_20_23",permalink:"/my-website/docs/daily-practice/2023/August/aug_20_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Aug 20",description:"Sun, Aug 20"},sidebar:"tutorialSidebar",previous:{title:"Aug 17",permalink:"/my-website/docs/daily-practice/2023/August/aug_17_23"},next:{title:"Aug 21",permalink:"/my-website/docs/daily-practice/2023/August/aug_21_23"}},m={},o=[{value:"Basic Binary Search",id:"basic-binary-search",level:4},{value:"Search in 2D matrix",id:"search-in-2d-matrix",level:4},{value:"Search insert position",id:"search-insert-position",level:4},{value:"Two Sum",id:"two-sum",level:4},{value:"Single Number",id:"single-number",level:4}];function _(n){const e={code:"code",h4:"h4",pre:"pre",...(0,i.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h4,{id:"basic-binary-search",children:"Basic Binary Search"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def binary_search(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(nums, 6))  # 5\n    print(binary_search(nums, 11))  # -1\n    print(binary_search(nums, 1))  # 0\n    print(binary_search(nums, 0))  # -1\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h4,{id:"search-in-2d-matrix",children:"Search in 2D matrix"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def search_2d_matrix(matrix, target):\n    row = 0\n    column = len(matrix[0]) - 1\n    while row < len(matrix) and column >= 0:\n        if matrix[row][column] == target:\n            return True\n        elif matrix[row][column] > target:\n            column -= 1\n        else:\n            row += 1\n    return False\n\n\ndef main():\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    print(search_2d_matrix(matrix, 9))  # True\n    print(search_2d_matrix(matrix, 5))  # True\n    print(search_2d_matrix(matrix, 10))  # False\n    print(search_2d_matrix(matrix, 12))  # False\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h4,{id:"search-insert-position",children:"Search insert position"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def search_insert_position(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\n# My way of linear search\ndef search_insert_position_linear(nums, target):\n    if target <= nums[0]:\n        return 0\n\n    if target > nums[len(nums) - 1]:\n        return len(nums)\n\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n        elif (i <= len(nums) - 2) and (nums[i] < target) and (nums[i + 1] > target):\n            return i + 1\n\n\n# More optimal linear search\ndef search_insert_position_enumerate(nums, target):\n    if not nums:\n        return 0\n    for i, num in enumerate(nums):\n        if num >= target:\n            return i\n    return len(nums)\n\n\ndef main():\n    nums = [1, 3, 5, 6]\n    target1 = 5\n    target2 = 6\n    target3 = 7\n    target4 = 0\n\n    print(search_insert_position(nums, target1))  # 2\n    print(search_insert_position_linear(nums, target1))\n    print(search_insert_position_enumerate(nums, target1))\n\n    print("---")\n\n    print(search_insert_position(nums, target2))  # 3\n    print(search_insert_position_linear(nums, target2))\n    print(search_insert_position_enumerate(nums, target2))\n\n    print("---")\n\n    print(search_insert_position(nums, target3))  # 4\n    print(search_insert_position_linear(nums, target3))\n    print(search_insert_position_enumerate(nums, target3))\n\n    print("---")\n\n    print(search_insert_position(nums, target4))  # 0\n    print(search_insert_position_linear(nums, target4))\n    print(search_insert_position_enumerate(nums, target4))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h4,{id:"two-sum",children:"Two Sum"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# Using binary search\ndef two_sum_sorted_array(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low < high:\n        if nums[low] + nums[high] == target:\n            return [low + 1, high + 1]\n        elif nums[low] + nums[high] > target:\n            high -= 1\n        else:\n            low += 1\n    return [-1, -1]\n\n\n# Given array is not sorted\ndef two_sum(nums, target):\n    nums_dict = {nums[0]: 0}\n\n    for i in range(1, len(nums)):\n        if (target - nums[i]) in nums_dict:\n            return [i, nums_dict[target - nums[i]]]\n        else:\n            nums_dict[nums[i]] = i\n    return [-1, -1]\n\n\ndef main():\n    print(two_sum_sorted_array(nums=[2, 7, 11, 15], target=9))\n    print(two_sum_sorted_array(nums=[2, 7, 11, 15], target=30))\n    print(two_sum_sorted_array(nums=[2, 7, 11, 15], target=18))\n    print(two_sum_sorted_array(nums=[3, 2, 4], target=6))\n    print(two_sum_sorted_array(nums=[3, 2, 4], target=5))\n    print(two_sum_sorted_array(nums=[3, 2, 4], target=10))\n\n    print("-----")\n\n    print(two_sum(nums=[2, 7, 11, 15], target=9))\n    print(two_sum(nums=[2, 7, 11, 15], target=30))\n    print(two_sum(nums=[2, 7, 11, 15], target=18))\n\n    print(two_sum(nums=[3, 2, 4], target=6))\n    print(two_sum(nums=[3, 2, 4], target=5))\n    print(two_sum(nums=[3, 2, 4], target=10))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h4,{id:"single-number",children:"Single Number"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# Using dictionary to store occurrences\ndef find_single_number_dict(nums):\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n\n    for key in nums_dict:\n        if nums_dict[key] == 1:\n            return key\n\n\ndef main():\n    nums1 = [2, 2, 1]\n    nums2 = [4, 1, 2, 1, 2]\n    nums3 = [1]\n\n    print(find_single_number_dict(nums1))  # 1\n    print(find_single_number_dict(nums2))  # 4\n    print(find_single_number_dict(nums3))  # 1\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function c(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(_,{...n})}):_(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>u,a:()=>a});var r=t(7294);const i={},s=r.createContext(i);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);