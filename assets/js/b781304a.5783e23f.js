"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9470],{8359:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(5893),s=t(1151);const a={title:"Sep 13, 2023"},i="Coding Journal: Sep 13, 2023",l={id:"learning-journal/September/20230913",title:"Sep 13, 2023",description:"Working on the Expense Management API",source:"@site/docs/learning-journal/September/20230913.md",sourceDirName:"learning-journal/September",slug:"/learning-journal/September/20230913",permalink:"/my-website/docs/learning-journal/September/20230913",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Sep 13, 2023"},sidebar:"tutorialSidebar",previous:{title:"Sep 12, 2023",permalink:"/my-website/docs/learning-journal/September/20230912"},next:{title:"Sep 16, 2023",permalink:"/my-website/docs/learning-journal/September/20230916"}},o={},p=[{value:"Working on the Expense Management API",id:"working-on-the-expense-management-api",level:3},{value:"Project level (expense_management)",id:"project-level-expense_management",level:4},{value:"App level (expense_api)",id:"app-level-expense_api",level:4},{value:"Notes",id:"notes",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"coding-journal-sep-13-2023",children:"Coding Journal: Sep 13, 2023"}),"\n",(0,r.jsx)(n.h3,{id:"working-on-the-expense-management-api",children:"Working on the Expense Management API"}),"\n",(0,r.jsx)(n.h4,{id:"project-level-expense_management",children:"Project level (expense_management)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="expense_management/settings.py"',children:"INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_api.apps.ExpenseApiConfig',  # new\n    'rest_framework',  # new\n    'django_filters',  # new\n]\n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="expense_management.py/urls.py"',children:"from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('expense_api.urls')),\n]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"app-level-expense_api",children:"App level (expense_api)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="expense_api/models.py"',children:"class Expense(models.Model):\n    card_name = models.CharField(max_length=255)\n    title = models.CharField(max_length=255)\n    expense_date = models.DateField()\n    amount = models.DecimalField(max_digits=6, decimal_places=2)\n    category = models.CharField(max_length=255)\n    note = models.TextField(null=True, blank=True)\n    expense_type = models.CharField(\n        max_length=20,\n        choices=[('business', 'Business'), ('personal', 'Personal')],\n        default='personal'\n    )\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="expense_api/serializers.py"',children:"class ExpenseSerializer(serializers.ModelSerializer):\n    tag_list = serializers.CharField(write_only=True, required=False)\n\n    class Meta:\n        model = Expense\n        fields = '__all__'\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="expense_api/urls.py"',children:"from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.ExpenseListCreateView.as_view()),\n    path('<int:pk>/', views.ExpenseRetrieveUpdateDestroy.as_view()),\n]\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="expense_api/views.py"',children:"from django_filters import rest_framework as filters\nfrom rest_framework import generics\nfrom .models import Expense\nfrom .serializers import ExpenseSerializer\n\n\n# Create your views here.\nclass ExpenseFilter(filters.FilterSet):\n    min_amount = filters.NumberFilter(field_name='amount', lookup_expr='gte')\n    max_amount = filters.NumberFilter(field_name='amount', lookup_expr='lte')\n    category = filters.CharFilter(field_name='category', lookup_expr='iexact')\n    card_name = filters.CharFilter(field_name='card_name', lookup_expr='iexact')\n    date_range = filters.DateFromToRangeFilter(field_name='expense_date')\n\n    class Meta:\n        model = Expense\n        fields = '__all__'\n\n\nclass ExpenseListCreateView(generics.ListCreateAPIView):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n    filterset_class = ExpenseFilter\n\n\nclass ExpenseRetrieveUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n"})}),"\n",(0,r.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"I still need to work on adding tags features since I had difficulty creating model, serializer, and view for tag."}),"\n",(0,r.jsx)(n.li,{children:"The most interesting feature I've worked on in this project is filtering. User can either choose to view expense by selecting min/max amount, category, card name, or transaction date"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var r=t(7294);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);