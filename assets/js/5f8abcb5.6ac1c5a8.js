"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5802],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,b=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return r?n.createElement(b,i(i({ref:t},d),{},{components:r})):n.createElement(b,i({ref:t},d))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5510:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Oct 29"},i=void 0,l={unversionedId:"coding-journal/2023/October/oct_29_23",id:"coding-journal/2023/October/oct_29_23",title:"Oct 29",description:"What I did today",source:"@site/docs/coding-journal/2023/10 - October/oct_29_23.md",sourceDirName:"coding-journal/2023/10 - October",slug:"/coding-journal/2023/October/oct_29_23",permalink:"/my-website/docs/coding-journal/2023/October/oct_29_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Oct 29"},sidebar:"tutorialSidebar",previous:{title:"Oct 22",permalink:"/my-website/docs/coding-journal/2023/October/oct_22_23"},next:{title:"Oct 30",permalink:"/my-website/docs/coding-journal/2023/October/oct_30_23"}},s={},c=[{value:"What I did today",id:"what-i-did-today",level:3},{value:"Django Library Project",id:"django-library-project",level:4},{value:"API",id:"api",level:5}],d={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"what-i-did-today"},"What I did today"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Update README file for Django To Do List App Project: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/quynhnle135/django-todolist-project"},"https://github.com/quynhnle135/django-todolist-project")),(0,a.kt)("li",{parentName:"ul"},"Reviewed and made a small project Library to remember all Django application and API I've learned: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/quynhnle135/django-library-project"},"https://github.com/quynhnle135/django-library-project")),(0,a.kt)("li",{parentName:"ul"},"What I liked about this is the search function I learned and added to. User can search by author, title, date publication, or rating.")),(0,a.kt)("h4",{id:"django-library-project"},"Django Library Project"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Built myself a small application and API where I can add all the books I've read with my rating and reviews. "),(0,a.kt)("li",{parentName:"ul"},"Implemented basic operations: create/add, update, delelete, view details"),(0,a.kt)("li",{parentName:"ul"},"Need to finish by added style and add search/filter function for API")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="base/models.py"',title:'"base/models.py"'},"from django.db import models\n\n\n# Create your models here.\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n    publication_date = models.DateField()\n    summary = models.TextField(blank=True, null=True)\n    review = models.TextField(blank=True, null=True)\n    rating = models.DecimalField(max_digits=2, decimal_places=1)\n\n    def __str__(self):\n        return self.title\n\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="base/views.py"',title:'"base/views.py"'},'from django.views import generic\nfrom .models import Book\nfrom django.urls import reverse_lazy\n\n\n# Create your views here.\nclass BookListView(generic.ListView):\n    model = Book\n    context_object_name = "books"\n    template_name = "base/book_list.html"\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n\n        title = self.request.GET.get("title")\n        author = self.request.GET.get("author")\n        min_rating = self.request.GET.get("min_rating")\n        publication_date = self.request.GET.get("publication_date")\n\n        if title:\n            queryset = queryset.filter(title__icontains=title)\n        if author:\n            queryset = queryset.filter(author__icontains=author)\n        if min_rating:\n            queryset = queryset.filter(rating__gte=min_rating)\n        if publication_date:\n            queryset = queryset.filter(publication_date=publication_date)\n\n        return queryset\n\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context["count"] = context["books"].count()\n        # context["search-area"] = self.request.GET.get("search-area")\n        return context\n\n\nclass BookDetailView(generic.DetailView):\n    model = Book\n    template_name = "base/book_detail.html"\n\n\nclass BookAddView(generic.CreateView):\n    model = Book\n    fields = "__all__"\n    template_name = "base/book_form.html"\n    success_url = reverse_lazy("book-list")\n\n\nclass BookUpdateView(generic.UpdateView):\n    model = Book\n    fields = "__all__"\n    template_name = "base/book_update_form.html"\n    success_url = reverse_lazy("book-list")\n\n\nclass BookDeleteView(generic.DeleteView):\n    model = Book\n    template_name = "base/book_confirm_delete_form.html"\n    success_url = reverse_lazy("book-list")\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="base/urls.py"',title:'"base/urls.py"'},'from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path("books/", views.BookListView.as_view(), name="book-list"),\n    path("books/<int:pk>/", views.BookDetailView.as_view(), name="book-detail"),\n    path("books/add/", views.BookAddView.as_view(), name="book-add"),\n    path("books/<int:pk>/update/", views.BookUpdateView.as_view(), name="book-update"),\n    path("books/<int:pk>/delete/", views.BookDeleteView.as_view(), name="book-delete"),\n]\n')),(0,a.kt)("h5",{id:"api"},"API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="libraryapi/serializers.py"',title:'"libraryapi/serializers.py"'},'from rest_framework import serializers\nfrom base.models import Book\n\n\nclass BookSerializer(serializers.ModelSerializer):\n    title = serializers.CharField(max_length=255)\n    author = serializers.CharField(max_length=255)\n    publication_date = serializers.DateField()\n    summary = serializers.CharField(allow_blank=True, allow_null=True)\n    review = serializers.CharField(allow_blank=True, allow_null=True)\n    rating = serializers.DecimalField(max_digits=2, decimal_places=1)\n\n    class Meta:\n        model = Book\n        fields = "__all__"\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="libraryapi/views.py"',title:'"libraryapi/views.py"'},"from base.models import Book\nfrom .serializers import BookSerializer\nfrom rest_framework import generics\n\n\n# Create your views here.\nclass BookListAPIView(generics.ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n\nclass BookRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="libraryapi/urls.py"',title:'"libraryapi/urls.py"'},"from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path('books/', views.BookListAPIView.as_view()),\n    path('books/<int:pk>/', views.BookRetrieveUpdateDestroyAPIView.as_view()),\n]\n")))}u.isMDXComponent=!0}}]);