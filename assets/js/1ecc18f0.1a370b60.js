"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[251],{9443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=t(5893),s=t(1151);const i={title:"What's so special about self?"},a="What's so special about self?",r={id:"tech-blogs/oop/oop_in_python_02",title:"What's so special about self?",description:"1. What is self?",source:"@site/docs/tech-blogs/oop/oop_in_python_02.md",sourceDirName:"tech-blogs/oop",slug:"/tech-blogs/oop/oop_in_python_02",permalink:"/docs/tech-blogs/oop/oop_in_python_02",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"What's so special about self?"},sidebar:"tutorialSidebar",previous:{title:"Why is object-oriented programming so important?",permalink:"/docs/tech-blogs/oop/oop_in_python_01"},next:{title:"The __init__() method",permalink:"/docs/tech-blogs/oop/oop_in_python_03"}},l={},c=[{value:"1. What is self?",id:"1-what-is-self",level:2},{value:"2. Why is self so important?",id:"2-why-is-self-so-important",level:2},{value:"Notes:",id:"notes",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"whats-so-special-about-self",children:"What's so special about self?"}),"\n",(0,o.jsx)(n.h2,{id:"1-what-is-self",children:"1. What is self?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"self"}),' is often described as "a reference to the current instance of the class"']}),"\n",(0,o.jsx)(n.li,{children:"A class is a blueprint for making objects. If you use one blueprint to make three different houses, the front door on the blueprint would represent three different front doors in the real world."}),"\n",(0,o.jsx)(n.li,{children:"Take a look at this example:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class Robot:\n    def __init__(self, name: str = ""):\n        self.name = name\n        print(self)\n    \n    def say_hello(self):\n        print(f"Hi, I\'m {self.name}!")\n\n\nmy_arrmy = [Robot() for _ in range(3)]\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Output:\n<__main__.Robot object at 0x100970e50>\n<__main__.Robot object at 0x100970f50>\n<__main__.Robot object at 0x100970f90>\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"self"})," point to the object created from class Robot at the specific memory address. Three different objects created from class Robot have three different places in memory."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-why-is-self-so-important",children:"2. Why is self so important?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"While it's helpful to think of a class as a blueprint for making objects, it's also helpful to think of it as a container for information and actions."}),"\n",(0,o.jsx)(n.li,{children:"It's really helpful to have a way to access any information associated with an object from anywhere in the class."}),"\n",(0,o.jsx)(n.li,{children:"It's just as helpful to have access to any action (method) associated with an object, from anywhere in the class."}),"\n",(0,o.jsx)(n.li,{children:"Expand the demo Robot class with more information:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class Robot:\n    def __init__(self, name: str = ""):\n        self.name = name\n        self.type = "drone"\n        self.mass_grams = 249\n    \n    def say_hello(self):\n        print(f"Hi, I\'m {self.name}!")\n        print(f"I\'m a {self.type}.")\n        print(f"I have a mass of {self.mass_grams}.")\nmy_robot = Robot("William")\nmy_robot.say_hello()\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Output:\n>>> Hi, I'm William!\n>>> I'm a drone.\n>>> I have a mass of 249g.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here's what without ",(0,o.jsx)(n.code,{children:"self"})," looks like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def make_robot(name=""):\n    """Make a robot."""\n    robot_dict = {\n        "name": name,\n        "type": "drone",\n        "mass_grams": 249,\n    }\n\n    return robot_dict\n\ndef say_hello(robot_dict):\n    """Make a robot say hello."""\n    print(f"Hi, I\'m {robot_dict[\'name\']}.")\n    print(f"I\'m a {robot_dict[\'type\']}.")\n    print(f"I have a mass of {robot_dict[\'mass_grams\']}g.")\n\nmy_robot = make_robot("William")\nsay_hello(my_robot)\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["For this version of the program, ",(0,o.jsx)(n.code,{children:"make_robot()"})," returns a dictionary containing all the information relating to a robot."]}),"\n",(0,o.jsxs)(n.li,{children:["The function ",(0,o.jsx)(n.code,{children:"say_hello()"})," accepts a robot dictionary and prints the information it contains"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"notes",children:"Notes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"As you can see, in the OOP version of the code there's a connection between the information and the associated actions. The varibles that refer to the robot's information are connected to the methods that define the robot's behavior."}),"\n",(0,o.jsxs)(n.li,{children:["In the non-OOP version, there's no connection between the information and the related actions. The function ",(0,o.jsx)(n.code,{children:"say_hello()"})," works for a dictionary about a robot, but there's nothing that ties it specifically to that dictionary."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"When you call a method, Python automatically inserts the self argument when it makes the actual call."}),"\n",(0,o.jsx)(n.li,{children:"You can see what's in self because every instance of self has a dictionary associated with it:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class Robot:\n    """A class representing simple robots."""\n\n    def __init__(self, name=""):\n        self.name = name\n        self.type = "drone"\n        self.mass_grams = 249\n        print(self.__dict__)\n\n    def say_hello(self):\n        ...\n\nmy_robot = Robot("William")\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:">>> {'name': 'William', 'type': 'drone', 'mass_grams': 249}\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["You can read the full article ",(0,o.jsx)(n.a,{href:"https://www.mostlypython.com/p/oop-in-python-part-2-whats-so-special",children:"here"})]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var o=t(7294);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);