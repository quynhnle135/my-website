"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6195],{2838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(5893),i=t(1151);const a={title:"Dec 18, 2023"},s="Coding Journal: Dec 18, 2023",l={id:"learning-journal/2023/December/20231218",title:"Dec 18, 2023",description:"- Added new function `appendarticlesto_file()` and refactored the program (10:00AM)",source:"@site/docs/learning-journal/2023/December/20231218.md",sourceDirName:"learning-journal/2023/December",slug:"/learning-journal/2023/December/20231218",permalink:"/docs/learning-journal/2023/December/20231218",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Dec 18, 2023"},sidebar:"tutorialSidebar",previous:{title:"Dec 17, 2023",permalink:"/docs/learning-journal/2023/December/20231217"},next:{title:"Dive Into Design Patterns",permalink:"/docs/category/dive-into-design-patterns"}},o={},c=[];function d(e){const n={code:"code",h1:"h1",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"coding-journal-dec-18-2023",children:"Coding Journal: Dec 18, 2023"}),"\n",(0,r.jsx)(n.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added new function ",(0,r.jsx)(n.code,{children:"append_articles_to_file()"})," and refactored the program (10:00AM)"]}),"\n",(0,r.jsxs)(n.li,{children:["Got rid of ",(0,r.jsx)(n.code,{children:"get_this_week_articles()"})," functions and added optinal arguments ",(0,r.jsx)(n.code,{children:"fromdate"})," and ",(0,r.jsx)(n.code,{children:"todate"})," instead to ",(0,r.jsx)(n.code,{children:"get_latest_articles()"})," (10:00AM)"]}),"\n",(0,r.jsx)(n.li,{children:"Tried to create a to-read-list with articles generated from the tool (1:00PM)"}),"\n",(0,r.jsx)(n.li,{children:"Set up crontab to schedule generating to-read-list daily at 7:00AM (1:00PM)"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"2-question-i-have",children:"2. Question I Have"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["What are the differences among ",(0,r.jsx)(n.code,{children:"popularity"}),", ",(0,r.jsx)(n.code,{children:"publishedAt"}),", and ",(0,r.jsx)(n.code,{children:"relevancy"})," parameters in ",(0,r.jsx)(n.code,{children:"sortBy"}),"?","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"popularity"}),": The API returns articles based on their popularity which is determined by factors such as how many times an article has been viewed, shared, or interacted with \u2192 Useful when you want to see what news stories are trending or receiving the most attention"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"publishedAt"}),": The API returns articles by their publication date \u2192 Useful if you want to see the latest news, or real-time updates on specific events or area"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"relevancy"}),": The API focuses on the relevance of the articles to the search query or filters used \u2192 Ideal if your goal is to find articles most closely aligned with specific topics or keywords."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,r.jsx)(n.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["New function ",(0,r.jsx)(n.code,{children:"append_articles_to_file()"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="article_generator.py"',children:'def append_articles_to_file(file_path, args):\n    response = get_latest_articles(args)\n    articles = response["articles"][:10]\n    if not articles:\n        print("No articles to append.")\n        return\n\n    try:\n        with open(file_path, "a") as file:\n            for count, article in enumerate(articles, start=1):\n                title = article.get("title", "No Title")\n                author = article.get("author", "Unknown Author")\n                published_at = article.get("publishedAt", "N/A")\n                description = article.get("description", "No Description")\n                url = article.get("url", "No URL")\n\n                file.write(\n                      f"{count}. {title}\\n"\n                      f"Written by: {author}\\n"\n                      f"Published at: {published_at}\\n"\n                      f"Description: {description}\\n"\n                      f"Read the full article at: {url}\\n\\n"\n                )\n    except IOError as e:\n        print(f"An error occurred while opening the file: {e}")\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Added and refactored command-lines and arguments"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="main.py"',children:'import articles_generator\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="News Articles Generator")\n\n    parser.add_argument(\n        "-p", "--publishers",\n        action="store_true",\n        help="Retrieve a list of top news publishers. Can be filtered by category, country, and language."\n    )\n    parser.add_argument(\n        "-a", "--articles",\n        action="store_true",\n        help="Fetch the latest news articles. Filters like keyword, sortby, domain, category, country, and language "\n             "can be applied. "\n    )\n    parser.add_argument(\n        "-ap", "--append",\n        action="store_true",\n        help="Enable this option to append the latest news articles to a specified file. Requires a valid file path "\n             "to be provided with the \'--file\' option. "\n    )\n\n    # Optional arguments\n    parser.add_argument(\n        "-ca", "--category",\n        type=str,\n        help="Filter publishers/articles by a specific news category (e.g., \'business\', \'sports\'). Applies to both "\n             "publishers and articles. "\n    )\n    parser.add_argument(\n        "-co", "--country",\n        type=str,\n        help="Filter publishers/articles by country using ISO country codes (e.g., \'us\' for the United States, "\n             "\'gb\' for Great Britain). Applies to both publishers and articles."\n    )\n    parser.add_argument(\n        "-la", "--language",\n        type=str,\n        help="Filter publishers/articles by language using ISO language codes (e.g., \'en\' for English, \'es\' for "\n             "Spanish). Applies to both publishers and articles."\n    )\n    parser.add_argument("-k", "--keyword", type=str, help="Search articles with a specific keyword in the title.")\n    parser.add_argument("-do", "--domain", type=str, help="Search articles in a specific domain.")\n    parser.add_argument(\n        "-so", "--sortby",\n        type=str,\n        choices=[\'publishedAt\', \'relevancy\', \'popularity\'],\n        help="Sort retrieved articles by \'publishedAt\', \'relevancy\', or \'popularity\'. Applicable only for articles."\n    )\n    parser.add_argument(\n        "-fd", "--fromdate",\n        type=str,\n        help="Specify the start date for filtering articles. Format: YYYY-MM-DD. "\n             "Articles from this date onwards will be included."\n    )\n    parser.add_argument(\n        "-td", "--todate",\n        type=str,\n        help="Specify the end date for filtering articles. Format: YYYY-MM-DD. "\n             "Only articles up to this date will be included."\n    )\n    parser.add_argument(\n        "-f", "--file",\n        type=str,\n        help="Provide the file path where the articles will be appended. "\n             "Ensure the file path is accessible and writable."\n    )\n\n    args = parser.parse_args()\n\n    if args.publishers:\n        print("---10  Publishers---")\n        articles_generator.get_publishers(args)\n\n    if args.articles:\n        print("---10 Articles---")\n        articles_generator.get_latest_articles(args)\n\n    if args.append:\n        print("---Appending news to a file---")\n        articles_generator.append_articles_to_file(args.file, args)\n\n\nif __name__ == "__main__":\n    main()\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var r=t(7294);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);