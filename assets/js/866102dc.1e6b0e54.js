"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5393],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>v});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(t),f=i,v=p["".concat(s,".").concat(f)]||p[f]||u[f]||o;return t?r.createElement(v,a(a({ref:n},l),{},{components:t})):r.createElement(v,a({ref:n},l))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const o={title:"Oct 2"},a=void 0,c={unversionedId:"coding-journal/2023/October/oct_02_23",id:"coding-journal/2023/October/oct_02_23",title:"Oct 2",description:"Breadth first search review",source:"@site/docs/coding-journal/2023/October/oct_02_23.md",sourceDirName:"coding-journal/2023/October",slug:"/coding-journal/2023/October/oct_02_23",permalink:"/my-website/docs/coding-journal/2023/October/oct_02_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding-journal/2023/October/oct_02_23.md",tags:[],version:"current",frontMatter:{title:"Oct 2"},sidebar:"tutorialSidebar",previous:{title:"Oct 1",permalink:"/my-website/docs/coding-journal/2023/October/oct_01_23"},next:{title:"Oct 3",permalink:"/my-website/docs/coding-journal/2023/October/oct_03_23"}},s={},d=[{value:"Breadth first search review",id:"breadth-first-search-review",level:3},{value:"Depth first search review",id:"depth-first-search-review",level:3},{value:"Number of provinces",id:"number-of-provinces",level:3},{value:"Detect cycle in a directed graph",id:"detect-cycle-in-a-directed-graph",level:3}],l={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"breadth-first-search-review"},"Breadth first search review"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def breadth_first_search(graph):\n    queue = []\n    visited = set()\n    result = []\n    for key in graph:\n        if key not in visited:\n            queue.append(key)\n            while queue:\n                node = queue.pop(0)\n                if node not in visited:\n                    visited.add(node)\n                    result.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n    return result\n")),(0,i.kt)("h3",{id:"depth-first-search-review"},"Depth first search review"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def depth_first_search(graph):\n    stack = []\n    visited = set()\n    result = []\n    for vertex in graph:\n        if vertex not in visited:\n            stack.append(vertex)\n            while stack:\n                node = stack.pop()\n                if node not in visited:\n                    visted.add(node)\n                    result.append(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            stack.append(neighbor)\n    return result\n")),(0,i.kt)("h3",{id:"number-of-provinces"},"Number of provinces"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def countProvinces(provinces):\n    count = 0\n    n = len(provinces)\n    visited = [0] * n\n    queue = []\n    for i in range(n):\n        if visited[i] == 0:\n            count += 1\n            queue.append(i)\n            while queue:\n                node = queue.pop(0)\n                visited[node] = 1\n                for j in range(n):\n                    if provinces[node][j] == 1 and visited[j] == 0:\n                        queue.append(j)\n    return count\n\n\ndef main():\n    provinces1 = [[1, 0, 0, 1],\n                  [0, 1, 1, 0],\n                  [0, 1, 1, 1],\n                  [1, 0, 1, 1]]\n\n    provinces2 = [[1, 0, 0,  0],\n                 [0, 1, 1, 0],\n                 [0, 1, 1, 0],\n                 [0, 0, 0, 1]]\n\n    print(countProvinces(provinces1))\n    print(countProvinces(provinces2))\n\nif __name__ == "__main__":\n    main()\n\n\n')),(0,i.kt)("h3",{id:"detect-cycle-in-a-directed-graph"},"Detect cycle in a directed graph"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n\n    def addEdge(self, v, w):\n        self.graph[v].append(w)\n        self.graph[w].append(v)\n\n    def isCyclic(self):\n        visited = [False] * self.V\n        for i in range(self.V):\n            if visited[i] == False:\n                if self.isCyclicUtil(i, visited, -1) == True:\n                    return True\n        return False\n\n    def isCyclicUtil(self, v, visited, parent):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                if self.isCyclicUtil(i, visited, v):\n                    return True\n            elif parent != i:\n                return True\n        return False\n\n\ndef main():\n    g = Graph(5)\n    g.addEdge(1, 0)\n    g.addEdge(1, 2)\n    g.addEdge(2, 0)\n    g.addEdge(0, 3)\n    g.addEdge(3, 4)\n    print(g.graph)\n\n\nif __name__ == "__main__":\n    main()\n')))}u.isMDXComponent=!0}}]);