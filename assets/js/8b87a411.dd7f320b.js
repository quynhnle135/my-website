"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5603],{3928:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=r(5893),t=r(1151);const a={title:"Nov 04"},i=void 0,l={id:"learning-journal/2023/November/11_4_23",title:"Nov 04",description:"What I did today:",source:"@site/docs/learning-journal/2023/November/11_4_23.md",sourceDirName:"learning-journal/2023/November",slug:"/learning-journal/2023/November/11_4_23",permalink:"/my-website/docs/learning-journal/2023/November/11_4_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Nov 04"},sidebar:"tutorialSidebar",previous:{title:"Nov 11",permalink:"/my-website/docs/learning-journal/2023/November/11_11_23"},next:{title:"Nov 05",permalink:"/my-website/docs/learning-journal/2023/November/11_5_23"}},o={},d=[{value:"What I did today:",id:"what-i-did-today",level:2},{value:"Setting up the project",id:"setting-up-the-project",level:3},{value:"Working in on the Restaurant Application",id:"working-in-on-the-restaurant-application",level:3},{value:"Working on the Restaurant API",id:"working-on-the-restaurant-api",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"what-i-did-today",children:"What I did today:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Review and updated Little Lemon Restaurant Project"}),"\n",(0,s.jsx)(n.li,{children:"Updated old journal entries on my website"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"little-lemon-restaurant-review-and-updated",children:"Little Lemon Restaurant review and updated"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-the-project",children:"Setting up the project"}),"\n",(0,s.jsx)(n.p,{children:"Install Django"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-commandine",children:"pip install django\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create littlemon project"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-commandline",children:"django-admin startproject littlelemon .\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create restaurant app"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-commandline",children:"python3 manage.py startapp restaurant\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create restaurant API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-commandline",children:"python3 manage.py startapp restaurant_api\n"})}),"\n",(0,s.jsx)(n.p,{children:"Connect restaurant app and restaurant API to the project"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="littlemon/settings.py"',children:"\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'restaurant.apps.RestaurantConfig',  # connect restaurant app\n    'restaurant_api.apps.RestaurantApiConfig',  # connect restaurant api\n    'rest_framework',  # install Django REST framework\n    'djoser',  # install djoser\n]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Connect restaurant app and restaurant API's URLS to the project"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title = "littlelemon/urls.py"',children:"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('restaurant.urls')),\n    path('api/', include('restaurant_api.urls')),\n    path('auth/', include('djoser.urls')),\n    path('auth/', include('djoser.urls.authtoken')),\n]\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"working-in-on-the-restaurant-application",children:"Working in on the Restaurant Application"}),"\n",(0,s.jsx)(n.p,{children:"Setting up the models"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant/models.py"',children:'from django.db import models\n\n\n# Create your models here.\nclass Booking(models.Model):\n    first_name = models.CharField(max_length=200)\n    last_name = models.CharField(max_length=200)\n    guest_number = models.IntegerField()\n    comment = models.CharField(max_length=1000)\n\n    def __str__(self):\n        return self.first_name + " " + self.last_name\n\n\nclass Menu(models.Model):\n    name = models.CharField(max_length=200)\n    price = models.IntegerField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return self.name\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"Register these models to admin site"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant/admin.py"',children:"from django.contrib import admin\nfrom .models import Booking, Menu\n\n\n# Register your models here.\nadmin.site.register(Booking)\nadmin.site.register(Menu)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Write views for the application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant/views.py"',children:'from django.shortcuts import render\nfrom .forms import BookingForm\nfrom .models import Menu\n\n\n# Create your views here.\ndef home(request):\n    return render(request, "index.html")\n\n\ndef about(request):\n    return render(request, "about.html")\n\n\ndef book(request):\n    form = BookingForm()\n    if request.method == "POST":\n        form = BookingForm(request.POST)\n        if form.is_valid():\n            form.save()\n    context = {"form": form}\n    return render(request, "book.html", context)\n\n\ndef menu(request):\n    menu_data = Menu.objects.all()\n    main_data = {"menu_data": menu_data}\n    return render(request, "menu.html", main_data)\n\n\ndef display_menu_item(request, pk=None):\n    if pk:\n        menu_item = Menu.objects.get(pk=pk)\n    else:\n        menu_item = ""\n    return render(request, "menu_item.html", {"menu_item": menu_item})\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"Connect the views to the urls"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant/urls.py"',children:"from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.home, name=\"home\"),\n    path('about/', views.about, name=\"about\"),\n    path('book/', views.book, name=\"book\"),\n    path('menu/', views.menu, name=\"menu\"),\n    path('menu/<int:pk>/', views.display_menu_item, name=\"menu_item\")\n]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"working-on-the-restaurant-api",children:"Working on the Restaurant API"}),"\n",(0,s.jsx)(n.p,{children:"Set up models"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant_api/models.py"',children:"from django.db import models\nfrom django.contrib.auth.models import User\n\n\n# Create your models here.\nclass Category(models.Model):\n    slug = models.SlugField()\n    title = models.CharField(max_length=255, db_index=True)\n\n\nclass MenuItem(models.Model):\n    title = models.CharField(max_length=255, db_index=True)\n    price = models.DecimalField(max_digits=6, decimal_places=2, db_index=True)\n    featured = models.BooleanField(db_index=True)\n    category = models.ForeignKey(Category, on_delete=models.PROTECT)\n\n\nclass Cart(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    menuitem = models.ForeignKey(MenuItem, on_delete=models.CASCADE)\n    quantity = models.SmallIntegerField()\n    unit_price = models.DecimalField(max_digits=6, decimal_places=2)\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n\n    class Meta:\n        unique_together = ('menuitem', 'user')\n\n\nclass Order(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    delivery_crew = models.ForeignKey(User, on_delete=models.SET_NULL, related_name=\"delivery_crew\", null=True)\n    status = models.BooleanField(default=0, db_index=True)\n    total = models.DecimalField(max_digits=6, decimal_places=2, default=0)\n    date = models.DateField(db_index=True)\n\n\nclass OrderItem(models.Model):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name=\"order\")\n    menuitem = models.ForeignKey(MenuItem, on_delete=models.CASCADE)\n    quantity = models.SmallIntegerField()\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n\n    class Meta:\n        unique_together = ('order', 'menuitem')\n\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set up serializers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant_api/serializers.py',children:"from .models import Category, MenuItem, Cart, Order, OrderItem\nfrom django.contrib.auth.models import User\nfrom rest_framework import serializers\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = ['id', 'title', 'slug']\n\n\nclass MenuItemSerializer(serializers.ModelSerializer):\n    category = serializers.PrimaryKeyRelatedField(\n        queryset=Category.objects.all()\n    )\n\n    class Meta:\n        model = MenuItem\n        fields = ['id', 'tile', 'price', 'category', 'featured']\n\n\nclass CartSerializer(serializers.ModelSerializer):\n    user = serializers.PrimaryKeyRelatedField(\n        queryset=User.objects.all(),\n        default=serializers.CurrentUserDefault()\n    )\n\n    def validate(self, attrs):\n        attrs['price'] = attrs['quantity'] * attrs['unit_price']\n        return attrs\n\n    class Meta:\n        model = Cart\n        fields = ['user', 'menuitem', 'unit_price', 'quantity', 'price']\n        extra_kwargs = {\n            'price': {'read_only': True}\n        }\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OrderItem\n        fields = ['order', 'menuitem', 'quantity', 'price']\n\n\nclass OrderSerializer(serializers.ModelSerializer):\n    orderitem = OrderItemSerializer(many=True, read_only=True, source='order')\n\n    class Meta:\n        model = Order\n        fields = ['id', 'user', 'deliver_crew', 'status', 'date', 'total', 'orderitem']\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email']\n"})}),"\n",(0,s.jsx)(n.p,{children:"Write views for API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant_api/views.py"',children:'\nfrom rest_framework.permissions import IsAdminUser, IsAuthenticated\nfrom rest_framework import generics\nfrom rest_framework import viewsets, status\nfrom django.shortcuts import get_object_or_404\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework.response import Response\nfrom .models import *\nfrom .serializers import *\n\n\n# Create your views here.\nclass CategoriesView(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\n    def get_permissions(self):\n        permission_classes = []\n        if self.request.method != "GET":\n            permission_classes = [IsAuthenticated]\n\n        return [permission() for permission in permission_classes]\n\n\nclass MenuItemView(generics.ListCreateAPIView):\n    queryset = MenuItem.objects.all()\n    serializer_class = MenuItemSerializer\n    search_fields = [\'category__title\']\n    ordering_fields = [\'price\', \'inventory\']\n\n    def get_permissions(self):\n        permission_classes = []\n        if self.request.method != "GET":\n            permission_classes = [IsAuthenticated]\n\n        return [permission() for permission in permission_classes]\n\n\nclass SingleMenuItemView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = MenuItem.objects.all()\n    serializer_class = MenuItemSerializer\n\n    def get_permissions(self):\n        permission_classes = []\n        if self.request.method != "GET":\n            permission_classes = [IsAuthenticated]\n\n        return [permission() for permission in permission_classes]\n\n\nclass CartView(generics.ListCreateAPIView):\n    queryset = Cart.objects.all()\n    serializer_class = CartSerializer\n\n    def get_queryset(self):\n        return Cart.objects.all().filter(user=self.request.user)\n\n    def delete(self, request, *args, **kwargs):\n        Cart.objects.all().filter(user=self.request.user).delete()\n        return Response("ok")\n\n\nclass OrderView(generics.ListCreateAPIView):\n    queryset = Order\n    serializer_class = OrderSerializer\n\n    def get_queryset(self):\n        if self.request.user.is_superuser:\n            return Order.objects.all()\n        elif self.request.user.groups.count() == 0:  # normal customer - no group\n            return Order.objects.all().filter(user=self.request.user)\n        elif self.request.user.groups.filter(name="Delivery Crew").exists():  # delivery crew\n            return Order.objects.all().filter(delivery_crew=self.request.user)  # only show orders assigned to delivery crew\n        else:  # delivery crew or manager\n            return Order.objects.all()\n\n    def create(self, request, *args, **kwargs):\n        menuitem_count = Cart.objects.all().filter(user=self.request.user).count()\n        if menuitem_count == 0:\n            return Response({"message": "no item in cart"})\n\n        data = request.data.copy()\n        total = self.get_total_price(self.request.user)\n        data[\'total\'] = total\n        data[\'user\'] = self.request.user.id\n        order_serializer = OrderSerializer(data=data)\n        if order_serializer.is_valid():\n            order = order_serializer.save()\n\n            items = Cart.objects.all().filter(user=self.request.user).all()\n\n            for item in items.values():\n                orderitem = OrderItem(\n                    order=order,\n                    menuitem=item[\'menuitem_id\'],\n                    price=item[\'price\'],\n                    quantity=item[\'quantity\'],\n                )\n                orderitem.save()\n\n            Cart.objects.all().filter(user=self.request.user).delete()  # delete cart items\n\n            result = order_serializer.data.copy()\n            result[\'total\'] = total\n            return Response(order_serializer.data)\n\n    def get_total_price(self, user):\n        total = 0\n        items = Cart.objects.all().filter(user=user).all()\n        for item in items.values():\n            total += item[\'price\']\n        return total\n\n\nclass SingleOrderView(generics.RetrieveUpdateAPIView):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n    permission_classes = [IsAuthenticated]\n\n    def update(self, request, *args, **kwargs):\n        if self.request.user.groups.count() == 0:  # Normal user, not belonging to any group = Customer\n            return Response(\'Not Ok\')\n        else:  # everyone else - Super Admin, Manager and Delivery Crew\n            return super().update(request, *args, **kwargs)\n\n\nclass GroupViewSet(viewsets.ViewSet):\n    permission_classes = [IsAdminUser]\n\n    def list(self, request):\n        users = User.objects.all().filter(groups__name=\'Manager\')\n        items = UserSerializer(users, many=True)\n        return Response(items.data)\n\n    def create(self, request):\n        user = get_object_or_404(User, username=request.data[\'username\'])\n        managers = Group.objects.get(name="Manager")\n        managers.user_set.add(user)\n        return Response({"message": "user added to the manager group"}, 200)\n\n    def destroy(self, request):\n        user = get_object_or_404(User, username=request.data[\'username\'])\n        managers = Group.objects.get(name="Manager")\n        managers.user_set.remove(user)\n        return Response({"message": "user removed from the manager group"}, 200)\n\n\nclass DeliveryCrewViewSet(viewsets.ViewSet):\n    permission_classes = [IsAuthenticated]\n\n    def list(self, request):\n        users = User.objects.all().filter(groups__name=\'Delivery Crew\')\n        items = UserSerializer(users, many=True)\n        return Response(items.data)\n\n    def create(self, request):\n        # only for super admin and managers\n        if not self.request.user.is_superuser:\n            if not self.request.user.groups.filter(name=\'Manager\').exists():\n                return Response({"message": "forbidden"}, status.HTTP_403_FORBIDDEN)\n\n        user = get_object_or_404(User, username=request.data[\'username\'])\n        dc = Group.objects.get(name="Delivery Crew")\n        dc.user_set.add(user)\n        return Response({"message": "user added to the delivery crew group"}, 200)\n\n    def destroy(self, request):\n        # only for super admin and managers\n        if not self.request.user.is_superuser:\n            if not self.request.user.groups.filter(name=\'Manager\').exists():\n                return Response({"message": "forbidden"}, status.HTTP_403_FORBIDDEN)\n        user = get_object_or_404(User, username=request.data[\'username\'])\n        dc = Group.objects.get(name="Delivery Crew")\n        dc.user_set.remove(user)\n        return Response({"message": "user removed from the delivery crew group"}, 200)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Connect URLS to the views"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="restaurant_api/urls.py"',children:"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('categories', views.CategoriesView.as_view()),\n    path('menu-items', views.MenuItemView.as_view()),\n    path('menu-items/<int:pk>', views.SingleMenuItemView.as_view()),\n    path('cart/menu-items', views.CartView.as_view()),\n    path('orders', views.OrderView.as_view()),\n    path('orders/<int:pk>', views.SingleOrderView.as_view()),\n    path('groups/manager/users', views.GroupViewSet.as_view(\n        {'get': 'list', 'post': 'create', 'delete': 'destroy'})),\n    path('groups/delivery-crew/users', views.DeliveryCrewViewSet.as_view(\n        {'get': 'list', 'post': 'create', 'delete': 'destroy'}))\n]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>i});var s=r(7294);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);