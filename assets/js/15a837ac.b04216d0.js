"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1302],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>p});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var m=r.createContext({}),o=function(n){var e=r.useContext(m),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=o(n.components);return r.createElement(m.Provider,{value:e},n.children)},c="mdxType",_={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,m=n.parentName,l=u(n,["components","mdxType","originalType","parentName"]),c=o(t),g=i,p=c["".concat(m,".").concat(g)]||c[g]||_[g]||a;return t?r.createElement(p,s(s({ref:e},l),{},{components:t})):r.createElement(p,s({ref:e},l))}));function p(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,s=new Array(a);s[0]=g;var u={};for(var m in e)hasOwnProperty.call(e,m)&&(u[m]=e[m]);u.originalType=n,u[c]="string"==typeof n?n:i,s[1]=u;for(var o=2;o<a;o++)s[o]=t[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5419:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>s,default:()=>_,frontMatter:()=>a,metadata:()=>u,toc:()=>o});var r=t(7462),i=(t(7294),t(3905));const a={title:"Aug 20",description:"Sun, Aug 20"},s=void 0,u={unversionedId:"leetcode-grinding/2023/August/aug_20_23",id:"leetcode-grinding/2023/August/aug_20_23",title:"Aug 20",description:"Sun, Aug 20",source:"@site/docs/leetcode-grinding/2023/August/aug_20_23.md",sourceDirName:"leetcode-grinding/2023/August",slug:"/leetcode-grinding/2023/August/aug_20_23",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_20_23",draft:!1,tags:[],version:"current",frontMatter:{title:"Aug 20",description:"Sun, Aug 20"},sidebar:"tutorialSidebar",previous:{title:"Aug 17",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_17_23"},next:{title:"Aug 21",permalink:"/my-website/docs/leetcode-grinding/2023/August/aug_21_23"}},m={},o=[{value:"Basic Binary Search",id:"basic-binary-search",level:4},{value:"Search in 2D matrix",id:"search-in-2d-matrix",level:4},{value:"Search insert position",id:"search-insert-position",level:4},{value:"Two Sum",id:"two-sum",level:4},{value:"Single Number",id:"single-number",level:4}],l={toc:o},c="wrapper";function _(n){let{components:e,...t}=n;return(0,i.kt)(c,(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"basic-binary-search"},"Basic Binary Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def binary_search(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(nums, 6))  # 5\n    print(binary_search(nums, 11))  # -1\n    print(binary_search(nums, 1))  # 0\n    print(binary_search(nums, 0))  # -1\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h4",{id:"search-in-2d-matrix"},"Search in 2D matrix"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def search_2d_matrix(matrix, target):\n    row = 0\n    column = len(matrix[0]) - 1\n    while row < len(matrix) and column >= 0:\n        if matrix[row][column] == target:\n            return True\n        elif matrix[row][column] > target:\n            column -= 1\n        else:\n            row += 1\n    return False\n\n\ndef main():\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    print(search_2d_matrix(matrix, 9))  # True\n    print(search_2d_matrix(matrix, 5))  # True\n    print(search_2d_matrix(matrix, 10))  # False\n    print(search_2d_matrix(matrix, 12))  # False\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h4",{id:"search-insert-position"},"Search insert position"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def search_insert_position(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\n# My way of linear search\ndef search_insert_position_linear(nums, target):\n    if target <= nums[0]:\n        return 0\n\n    if target > nums[len(nums) - 1]:\n        return len(nums)\n\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n        elif (i <= len(nums) - 2) and (nums[i] < target) and (nums[i + 1] > target):\n            return i + 1\n\n\n# More optimal linear search\ndef search_insert_position_enumerate(nums, target):\n    if not nums:\n        return 0\n    for i, num in enumerate(nums):\n        if num >= target:\n            return i\n    return len(nums)\n\n\ndef main():\n    nums = [1, 3, 5, 6]\n    target1 = 5\n    target2 = 6\n    target3 = 7\n    target4 = 0\n\n    print(search_insert_position(nums, target1))  # 2\n    print(search_insert_position_linear(nums, target1))\n    print(search_insert_position_enumerate(nums, target1))\n\n    print("---")\n\n    print(search_insert_position(nums, target2))  # 3\n    print(search_insert_position_linear(nums, target2))\n    print(search_insert_position_enumerate(nums, target2))\n\n    print("---")\n\n    print(search_insert_position(nums, target3))  # 4\n    print(search_insert_position_linear(nums, target3))\n    print(search_insert_position_enumerate(nums, target3))\n\n    print("---")\n\n    print(search_insert_position(nums, target4))  # 0\n    print(search_insert_position_linear(nums, target4))\n    print(search_insert_position_enumerate(nums, target4))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h4",{id:"two-sum"},"Two Sum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Using binary search\ndef two_sum_sorted_array(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low < high:\n        if nums[low] + nums[high] == target:\n            return [low + 1, high + 1]\n        elif nums[low] + nums[high] > target:\n            high -= 1\n        else:\n            low += 1\n    return [-1, -1]\n\n\n# Given array is not sorted\ndef two_sum(nums, target):\n    nums_dict = {nums[0]: 0}\n\n    for i in range(1, len(nums)):\n        if (target - nums[i]) in nums_dict:\n            return [i, nums_dict[target - nums[i]]]\n        else:\n            nums_dict[nums[i]] = i\n    return [-1, -1]\n\n\ndef main():\n    print(two_sum_sorted_array(nums=[2, 7, 11, 15], target=9))\n    print(two_sum_sorted_array(nums=[2, 7, 11, 15], target=30))\n    print(two_sum_sorted_array(nums=[2, 7, 11, 15], target=18))\n    print(two_sum_sorted_array(nums=[3, 2, 4], target=6))\n    print(two_sum_sorted_array(nums=[3, 2, 4], target=5))\n    print(two_sum_sorted_array(nums=[3, 2, 4], target=10))\n\n    print("-----")\n\n    print(two_sum(nums=[2, 7, 11, 15], target=9))\n    print(two_sum(nums=[2, 7, 11, 15], target=30))\n    print(two_sum(nums=[2, 7, 11, 15], target=18))\n\n    print(two_sum(nums=[3, 2, 4], target=6))\n    print(two_sum(nums=[3, 2, 4], target=5))\n    print(two_sum(nums=[3, 2, 4], target=10))\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("h4",{id:"single-number"},"Single Number"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Using dictionary to store occurrences\ndef find_single_number_dict(nums):\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n\n    for key in nums_dict:\n        if nums_dict[key] == 1:\n            return key\n\n\ndef main():\n    nums1 = [2, 2, 1]\n    nums2 = [4, 1, 2, 1, 2]\n    nums3 = [1]\n\n    print(find_single_number_dict(nums1))  # 1\n    print(find_single_number_dict(nums2))  # 4\n    print(find_single_number_dict(nums3))  # 1\n\n\nif __name__ == "__main__":\n    main()\n')))}_.isMDXComponent=!0}}]);