"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4680],{5060:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>_,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=t(5893),o=t(1151);const l={title:"Aug 17",description:"Thu, Aug 17"},a=void 0,i={id:"daily-practice/2023/August/aug_17_23",title:"Aug 17",description:"Thu, Aug 17",source:"@site/docs/daily-practice/2023/August/aug_17_23.md",sourceDirName:"daily-practice/2023/August",slug:"/daily-practice/2023/August/aug_17_23",permalink:"/my-website/docs/daily-practice/2023/August/aug_17_23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Aug 17",description:"Thu, Aug 17"},sidebar:"tutorialSidebar",previous:{title:"Aug 16",permalink:"/my-website/docs/daily-practice/2023/August/aug_16_23"},next:{title:"Aug 20",permalink:"/my-website/docs/daily-practice/2023/August/aug_20_23"}},s={},d=[{value:"Binary Tree Review",id:"binary-tree-review",level:3},{value:"Height of Tree",id:"height-of-tree",level:3},{value:"Python Deque",id:"python-deque",level:3},{value:"Binary Tree Level Order Traversal",id:"binary-tree-level-order-traversal",level:3}];function f(e){const r={code:"code",h3:"h3",pre:"pre",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h3,{id:"binary-tree-review",children:"Binary Tree Review"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def inorder_traversal(self, root):\n        return self._inorder_traversal(root=root, traversal=[])\n\n    def _inorder_traversal(self, root, traversal):\n        if root:\n            self._inorder_traversal(root.left, traversal)\n            traversal.append(root.value)\n            self._inorder_traversal(root.right, traversal)\n        return traversal\n\n    def preorder_traversal(self, root):\n        return self._preorder_traversal_recursive(root=root, traversal=[])\n\n    def _preorder_traversal_recursive(self, root, traversal):\n        if root:\n            traversal.append(root.value)\n            self._preorder_traversal_recursive(root.left, traversal)\n            self._preorder_traversal_recursive(root.right, traversal)\n        return traversal\n\n    def postorder_traversal(self, root):\n        return self._postorder_traversal(root=root, traversal=[])\n\n    def _postorder_traversal(self, root, traversal):\n        if root:\n            self._postorder_traversal(root.left, traversal)\n            self._postorder_traversal(root.right, traversal)\n            traversal.append(root.value)\n        return traversal\n\n\ndef main():\n    tree = BinaryTree(1)\n    tree.root.left = Node(2)\n    tree.root.right = Node(3)\n    tree.root.left.left = Node(4)\n    tree.root.left.right = Node(5)\n    tree.root.right.left = Node(6)\n    tree.root.right.right = Node(7)\n    print(tree.preorder_traversal(root=tree.root))  # 1 2 4 5 3 6 7\n    print(tree.inorder_traversal(root=tree.root))  # 4 2 5 1 6 3 7\n    print(tree.postorder_traversal(root=tree.root))  # 4 5 2 6 7 3 1\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,n.jsx)(r.h3,{id:"height-of-tree",children:"Height of Tree"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import collections\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass BinaryTree:\n    def __init__(self, root: Node):\n        self.root = root\n\n    # BFS\n    def find_max_height_bfs(self):\n        pass\n\n    # DFS Recursive\n    def find_max_height_dfs(self, root):\n        if not root:\n            return 0\n        return max(self.find_max_height_dfs(root.left), self.find_max_height_dfs(root.right)) + 1\n\n\ndef main():\n    root = Node(1)  # 1st level\n    root.left = Node(2)  # 2nd level\n    root.right = Node(3)\n    root.left.left = Node(3)  # 3rd level\n    root.left.right = Node(5)\n    root.left.left.left = Node(4)  # 4th level\n\n    tree = BinaryTree(root=root)\n    print(tree.find_max_height_dfs(root=tree.root))  # 4\n\n    another_root = Node(1)  # 1st level\n    another_root.left = Node(2)  # 2nd level\n    another_root.right = Node(3)\n    another_root.right.left = Node(4)  # 3rd level\n\n    another_tree = BinaryTree(root=another_root)\n    print(another_tree.find_max_height_dfs(root=another_tree.root))  # 3\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,n.jsx)(r.h3,{id:"python-deque",children:"Python Deque"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import collections\n\n\ndef main():\n    my_queue = collections.deque()\n    my_queue.appendleft(1)\n    my_queue.appendleft(2)\n    my_queue.appendleft(3)\n    my_queue.appendleft(4)\n    # my_queue.append(1)\n    # my_queue.append(2)\n    # my_queue.append(3)\n\n    while my_queue:\n        print(my_queue.pop())\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,n.jsx)(r.h3,{id:"binary-tree-level-order-traversal",children:"Binary Tree Level Order Traversal"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import collections\n\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def level_order_traversal(self):\n        result = []\n        q = collections.deque()\n        q.append(self.root.value)\n\n        while q:\n            level = []\n            q_length = len(q)\n            for i in range(q_length):\n                node = q.popleft()\n                if node:\n                    level.append(node.value)\n                    q.append(node.left)\n                    q.append(node.right)\n            if level:\n                result.append(level)\n        return result\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    tree = BinaryTree(root=root)\n    # tree.left = Node(2)\n    # tree.left.left = Node(4)\n    # tree.left.left.left = Node(7)\n    # tree.left.left.right = Node(8)\n    # tree.right = Node(3)\n    # tree.right.left = Node(5)\n    # tree.right.right = Node(6)\n    # tree.right.left.right = Node(9)\n    # tree.right.left.left = Node(10)\n    # tree.right.right.left = Node(11)\n    # tree.right.right.right = Node(12)\n\n    print(tree.level_order_traversal())\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function _(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(f,{...e})}):f(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>a});var n=t(7294);const o={},l=n.createContext(o);function a(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);