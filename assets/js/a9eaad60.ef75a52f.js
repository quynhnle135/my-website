"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5734],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(r),d=s,g=c["".concat(l,".").concat(d)]||c[d]||p[d]||a;return r?n.createElement(g,i(i({ref:t},m),{},{components:r})):n.createElement(g,i({ref:t},m))}));function g(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:s,i[1]=o;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1482:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=r(7462),s=(r(7294),r(3905));const a={title:"Aug 29",description:"Tue, Aug 29"},i=void 0,o={unversionedId:"coding-journal/2023/August/aug_29_23",id:"coding-journal/2023/August/aug_29_23",title:"Aug 29",description:"Tue, Aug 29",source:"@site/docs/coding-journal/2023/8 - August/aug_29_23.md",sourceDirName:"coding-journal/2023/8 - August",slug:"/coding-journal/2023/August/aug_29_23",permalink:"/my-website/docs/coding-journal/2023/August/aug_29_23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding-journal/2023/8 - August/aug_29_23.md",tags:[],version:"current",frontMatter:{title:"Aug 29",description:"Tue, Aug 29"},sidebar:"tutorialSidebar",previous:{title:"Aug 28",permalink:"/my-website/docs/coding-journal/2023/August/aug_28_23"},next:{title:"Project Summary",permalink:"/my-website/docs/coding-journal/2023/August/projects_summary"}},l={},u=[{value:"Finish final project",id:"finish-final-project",level:3},{value:"Project set-up",id:"project-set-up",level:4}],m={toc:u},c="wrapper";function p(e){let{components:t,...r}=e;return(0,s.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"finish-final-project"},"Finish final project"),(0,s.kt)("h4",{id:"project-set-up"},"Project set-up"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="littlelemon/settings.py"',title:'"littlelemon/settings.py"'},"INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'restaurant.apps.RestaurantConfig',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'djoser',\n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="littlelemon/urls.py"',title:'"littlelemon/urls.py"'},"from django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom restaurant.views import BookingViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'tables', BookingViewSet)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('restaurant/', include('restaurant.urls')),\n    path('restaurant/booking/', include(router.urls)),\n    path('auth/', include('djoser.urls')),\n    path('auth/', include('djoser.urls.authtoken')),\n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="restaurant/models.py"',title:'"restaurant/models.py"'},"from django.db import models\n\n# Create your models here.\n\n\nclass Booking(models.Model):\n    name = models.CharField(max_length=255)\n    no_of_guests = models.IntegerField()\n    booking_date = models.DateTimeField()\n\n    def __str__(self) -> str:\n        return self.name\n\n\nclass MenuItem(models.Model):\n    title = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    inventory = models.IntegerField()\n\n    def __str__(self) -> str:\n        return self.title\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="restaurant/serializers.py"',title:'"restaurant/serializers.py"'},"from .models import Booking, MenuItem\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\n\n\nclass BookingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Booking\n        fields = \"__all__\"\n\n\nclass MenuItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = MenuItem\n        fields = \"__all__\"\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'groups']\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="restaurant/urls.py"',title:'"restaurant/urls.py"'},"from django.urls import path\nfrom . import views\nfrom rest_framework.authtoken.views import obtain_auth_token\n\n\nurlpatterns = [\n    path('', views.index, name=\"home\"),\n    path('menu/', views.MenuItemView.as_view(), name=\"menu\"),\n    path('menu/<int:pk>/', views.SingleMenuItemView.as_view()),\n    path('api-token-auth/', obtain_auth_token),\n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="restaurant/views.py"',title:'"restaurant/views.py"'},'from django.shortcuts import render\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom .models import Booking, MenuItem\nfrom .serializers import BookingSerializer, MenuItemSerializer, UserSerializer\nfrom rest_framework import generics\nfrom rest_framework import viewsets\nfrom rest_framework.permissions import IsAuthenticated\nfrom django.contrib.auth.models import User\nfrom rest_framework.decorators import api_view, permission_classes\n# Create your views here.\n\n\ndef index(request):\n    return render(request, "index.html")\n\n\nclass MenuItemView(generics.CreateAPIView):\n    permission_classes = [IsAuthenticated]\n    queryset = MenuItem.objects.all()\n    serializer_class = MenuItemSerializer\n\n\nclass SingleMenuItemView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = MenuItem.objects.all()\n    serializer_class = MenuItemSerializer\n\n\nclass BookingViewSet(viewsets.ModelViewSet):\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    permission_classes = [IsAuthenticated]\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [IsAuthenticated]\n\n\n@api_view()\n@permission_classes([IsAuthenticated])\ndef msg(request):\n    return Response({"message": "This view is protected"})\n')))}p.isMDXComponent=!0}}]);