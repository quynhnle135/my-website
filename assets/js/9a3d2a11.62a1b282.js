"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3213],{4184:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var a=i(5893),t=i(1151);const s={title:"Jan 29, 2024"},r="Coding Journal: Jan 29, 2024",d={id:"learning-journal/2024/January/20240129",title:"Jan 29, 2024",description:"- Continued with job search (22 applications)",source:"@site/docs/learning-journal/2024/January/20240129.md",sourceDirName:"learning-journal/2024/January",slug:"/learning-journal/2024/January/20240129",permalink:"/docs/learning-journal/2024/January/20240129",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Jan 29, 2024"},sidebar:"tutorialSidebar",previous:{title:"Jan 26, 2024",permalink:"/docs/learning-journal/2024/January/20240126"},next:{title:"Dive Into Design Patterns",permalink:"/docs/category/dive-into-design-patterns"}},l={},o=[{value:"Stack",id:"stack",level:3},{value:"Graph",id:"graph",level:3},{value:"Hashmap",id:"hashmap",level:3},{value:"Linked List",id:"linked-list",level:3}];function c(n){const e={code:"code",h1:"h1",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"coding-journal-jan-29-2024",children:"Coding Journal: Jan 29, 2024"}),"\n",(0,a.jsx)(e.h1,{id:"1-what-i-learned-and-did-today",children:"1. What I Learned and Did Today"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Continued with job search (22 applications)"}),"\n",(0,a.jsxs)(e.li,{children:["Continued solving Leetcode to prepare for technical interviews:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Stack:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Valid parentheses"}),"\n",(0,a.jsx)(e.li,{children:"Simplify path"}),"\n",(0,a.jsx)(e.li,{children:"Min stack"}),"\n",(0,a.jsx)(e.li,{children:"Evaluate reverse polish notation"}),"\n",(0,a.jsx)(e.li,{children:"Asteroid Collision"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["Graph:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Number of islands"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["Hashmap:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Valid anagram"}),"\n",(0,a.jsx)(e.li,{children:"Group anagrams"}),"\n",(0,a.jsx)(e.li,{children:"Two sum"}),"\n",(0,a.jsx)(e.li,{children:"Word pattern"}),"\n",(0,a.jsx)(e.li,{children:"Ransom note"}),"\n",(0,a.jsx)(e.li,{children:"Isomorphic strings"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["LinkedList:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Linked list cycle"}),"\n",(0,a.jsx)(e.li,{children:"Merge two sorted lists"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h1,{id:"2-question-i-had",children:"2. Question I Had"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"I don't have any question for today."}),"\n"]}),"\n",(0,a.jsx)(e.h1,{id:"3-what-i-found-challenging",children:"3. What I Found Challenging"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"I don't find anything challenging for today."}),"\n"]}),"\n",(0,a.jsx)(e.h1,{id:"4-code-i-wrote-today",children:"4. Code I Wrote Today"}),"\n",(0,a.jsx)(e.h3,{id:"stack",children:"Stack"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Valid parentheses"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def is_valid_parentheses(s: str) -> bool:\n    stack = []\n    for ch in s:\n        if ch in "([{":\n            stack.append(ch)\n        else:\n            if not stack:\n                return False\n            else:\n                t = stack.pop()\n                if (t == "(" and ch == ")") or (t == "[" and ch == "]") or (t == "{" and ch == "}"):\n                    continue\n                else:\n                    return False\n    return not stack\n\n\ndef main():\n    print(is_valid_parentheses(s="()"))\n    print(is_valid_parentheses(s="()[]{}"))\n    print(is_valid_parentheses(s="(]"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Simplify path"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def simplify_path(path: str) -> str:\n    path = path.split("/")\n    stack = []\n    for p in path:\n        if p == "..":\n            if stack:\n                stack.pop()\n        elif p and p != ".":\n            stack.append(p)\n    return "/" + "/".join(stack)\n\n\ndef main():\n    path = "/home/"\n    print(path.split("/"))\n    print(simplify_path(path="/home/"))  # /home\n    print(simplify_path(path="/../"))  # /\n    print(simplify_path(path="/home//foo"))  # /home/foo\n    print(simplify_path(path="/a/./b/../../c/"))  # /c\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Min stack"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class MinStack:\n    def __init__(self) -> None:\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, value: int) -> None:\n        self.stack.append(value)\n        if not self.min_stack or value < self.min_stack[-1]:\n            self.min_stack.append(value)\n\n    def pop(self) -> None:\n        top = self.stack.pop()\n        if top == self.min_stack[-1]:\n            self.min_stack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def get_min(self) -> int:\n        return self.min_stack[-1]\n\n\ndef main():\n    minStack = MinStack()\n    minStack.push(-2)\n    minStack.push(0)\n    minStack.push(-3)\n    print(minStack.top())  # -3\n    print(minStack.get_min())  # -3\n    minStack.pop()\n    minStack.pop()\n    print(minStack.top())  # -2\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Evaluate reverse polish notation"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef evaluate_reverse_polish_notation(tokens: List[str]) -> int:\n    stack = []\n    res = 0\n    for t in tokens:\n        if t in "+-*/":\n            second_num = stack.pop()\n            first_num = stack.pop()\n            if t == "+":\n                res = first_num + second_num\n            elif t == "-":\n                res = first_num - second_num\n            elif t == "*":\n                res = first_num * second_num\n            else:\n                res = int(first_num / second_num)\n            stack.append(res)\n        else:\n            stack.append(int(t))\n        print(stack)\n    return stack[-1]\n\n\ndef main():\n    print(evaluate_reverse_polish_notation(tokens=["2", "1", "+", "3", "*"]))\n    print(evaluate_reverse_polish_notation(tokens=["4", "13", "5", "/", "+"]))\n    print(evaluate_reverse_polish_notation(tokens=["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]))  # 22\n    print(-132 // 6)\n\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Asteroid collision"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef asteroids_collision(asteroids: List[int]) -> List[int]:\n    stack = []\n\n    for a in asteroids:\n        if not stack or a > 0:\n            stack.append(a)\n\n        while stack and stack[-1] > 0 and stack[-1] < -a:\n            stack.pop()\n\n        if not stack or stack[-1] < 0:\n            stack.append(a)\n        elif stack and stack[-1] == -a:\n            stack.pop()\n        # print(stack)\n    return stack\n\n\ndef main():\n    print(asteroids_collision([5, 10, -5]))\n    print(asteroids_collision([8, -8]))\n    print(asteroids_collision([10, 2, -5]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"graph",children:"Graph"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Number of islands"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef number_of_islands(grid: List[List[str]]) -> int:\n    islands = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == "1":\n                islands += 1\n                dfs(row, col, grid)\n    return islands\n\n\ndef dfs(row: int, col: int, grid: List[List[str]]) -> None:\n    if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or grid[row][col] == "0":\n        return\n    grid[row][col] = "0"\n    dfs(row - 1, col, grid)\n    dfs(row + 1, col, grid)\n    dfs(row, col - 1, grid)\n    dfs(row, col + 1, grid)\n\n\ndef main():\n    print(number_of_islands(grid=[\n                                    ["1", "1", "1", "1", "0"],\n                                    ["1", "1", "0", "1", "0"],\n                                    ["1", "1", "0", "0", "0"],\n                                    ["0", "0", "0", "0", "0"]\n                                ]))  # 1\n    print(number_of_islands(grid=[\n                                    ["1", "1", "0", "0", "0"],\n                                    ["1", "1", "0", "0", "0"],\n                                    ["0", "0", "1", "0", "0"],\n                                    ["0", "0", "0", "1", "1"]\n                                ]))  # 3\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,a.jsx)(e.h3,{id:"hashmap",children:"Hashmap"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Valid anagram"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def is_valid(s: str, t: str):\n    hashmap = {}\n    for ch in s:\n        if ch in hashmap:\n            hashmap[ch] += 1\n        else:\n            hashmap[ch] = 1\n\n    for ch in t:\n        if ch not in hashmap:\n            return False\n        else:\n            hashmap[ch] -= 1\n            if hashmap[ch] == 0:\n                del hashmap[ch]\n    return not hashmap\n\n\ndef main():\n    print(is_valid("anagram", "nagaram"))\n    print(is_valid("rat", "cat"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Group anagram"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef group_anagrams(words: List[str]) -> List[List[str]]:\n    anagrams = {}\n    for word in words:\n        sorted_word = "".join(sorted(word))\n        if sorted_word in anagrams:\n            anagrams[sorted_word].append(word)\n        else:\n            anagrams[sorted_word] = [word]\n        # print(anagrams)\n    return list(anagrams.values())\n\n\ndef main():\n    print(group_anagrams(["eat","tea","tan","ate","nat","bat"]))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Two sum"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from typing import List\n\n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    num_dict = {}\n    for i in range(len(nums)):\n        if target - nums[i] in num_dict:\n            return [num_dict[target - nums[i]], i]\n        else:\n            num_dict[nums[i]] = i\n    return [-1, -1]\n\n\ndef main():\n    print(two_sum(nums=[2, 7, 11, 15], target=9))\n    print(two_sum(nums=[3, 2, 4], target=6))\n    print(two_sum(nums=[3, 3], target=6))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Word pattern"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def word_pattern(pattern: str, s: str) -> bool:\n    s = s.split()\n    if len(s) != len(pattern):\n        return False\n    pattern_dict = {}\n    word_dict = {}\n    for i in range(len(s)):\n        word = s[i]\n        p = pattern[i]\n        if word in word_dict and word_dict[word] != p:\n            return False\n        elif word not in word_dict:\n            word_dict[word] = p\n\n        if p in pattern_dict and pattern_dict[p] != word:\n            return False\n        elif p not in pattern_dict:\n            pattern_dict[p] = word\n    return True\n\n\ndef main():\n    print(word_pattern("abba", "dog cat cat dog"))\n    print(word_pattern("abba", "dog cat cat fish"))\n    print(word_pattern("abba", "dog dog dog dog"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Ransom note"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def ransom_note(ransom_note: str, magazine: str) -> bool:\n    hashmap = {}\n    for ch in magazine:\n        if ch in hashmap:\n            hashmap[ch] += 1\n        else:\n            hashmap[ch] = 1\n\n    for ch in ransom_note:\n        if ch not in hashmap:\n            return False\n        else:\n            hashmap[ch] -= 1\n            if hashmap[ch] == 0:\n                del hashmap[ch]\n    return True\n\n\ndef main():\n    print(ransom_note("a", "b"))\n    print(ransom_note("aa", "ab"))\n    print(ransom_note("aa", "aab"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Isomorphic strings"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def isomorphic_string(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n\n    s_dict = {}\n    t_dict = {}\n\n    for i in range(len(s)):\n        s_ch = s[i]\n        t_ch = t[i]\n        if s_ch in s_dict and t_ch != s_dict[s_ch]:\n            return False\n        elif s_ch not in s_dict:\n            s_dict[s_ch] = t_ch\n\n        if t_ch in t_dict and s_ch != t_dict[t_ch]:\n            return False\n        elif t_ch not in t_dict:\n            t_dict[t_ch] = s_ch\n\n    return True\n\n\ndef main():\n    print(isomorphic_string("add", "egg"))  # True\n    print(isomorphic_string("foo", "bar"))\n    print(isomorphic_string("paper", "title"))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"linked-list",children:"Linked List"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Linked list cycle"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class Node:\n    def __init__(self, val: int, next=None):\n        self.val = val\n        self.next = next\n\n\ndef print_list(head: Node) -> None:\n    cur = head\n    while cur.next:\n        print(cur.val, end="->")\n        cur = cur.next\n    print(cur.val, end="->null")\n\n\ndef has_cycle(head: Node) -> bool:\n    fast = head\n    slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n        if fast == slow:\n            return True\n    return False\n\n\ndef main():\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    # head.next.next.next.next = head.next\n    print(has_cycle(head=head))\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Merge two sorted lists"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef print_list(head: Node) -> None:\n    cur = head\n    while cur.next:\n        print(cur.val, end="->")\n        cur = cur.next\n    print(cur.val, end="->null")\n\n\ndef merge_two_sorted_list(head1: Node, head2: Node) -> Node:\n    dummy_head = cur = Node()\n    cur.next = head1\n    while head1 and head2:\n        if head1.val < head2.val:\n            cur.next = head1\n            head1 = head1.next\n        else:\n            cur.next = head2\n            head2 = head2.next\n        cur = cur.next\n\n    while head1:\n        cur.next = head1\n        head1 = head1.next\n        cur = cur.next\n\n    while head2:\n        cur.next = head2\n        head2 = head2.next\n        cur = cur.next\n\n    return dummy_head.next\n\n\ndef main():\n    head1 = Node(1)\n    head1.next = Node(3)\n    head1.next.next = Node(4)\n    head1.next.next.next = Node(6)\n\n    head2 = Node(2)\n    head2.next = Node(4)\n    head2.next.next = Node(5)\n    head2.next.next.next = Node(7)\n\n    print_list(head=merge_two_sorted_list(head1, head2))\n\n\nif __name__ == "__main__":\n    main()\n'})})]})}function h(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>d,a:()=>r});var a=i(7294);const t={},s=a.createContext(t);function r(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);